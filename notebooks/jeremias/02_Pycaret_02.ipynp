{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Setup ","metadata":{}},{"cell_type":"code","source":"!pip install --pre pycaret\n!pip install mlflow","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:00:58.620821Z","iopub.execute_input":"2024-07-14T09:00:58.621221Z","iopub.status.idle":"2024-07-14T09:02:06.799370Z","shell.execute_reply.started":"2024-07-14T09:00:58.621190Z","shell.execute_reply":"2024-07-14T09:02:06.797959Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting pycaret\n  Downloading pycaret-3.3.2-py3-none-any.whl.metadata (17 kB)\nRequirement already satisfied: ipython>=5.5.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (8.20.0)\nRequirement already satisfied: ipywidgets>=7.6.5 in /opt/conda/lib/python3.10/site-packages (from pycaret) (7.7.1)\nRequirement already satisfied: tqdm>=4.62.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (4.66.4)\nRequirement already satisfied: numpy<1.27,>=1.21 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.26.4)\nCollecting pandas<2.2.0 (from pycaret)\n  Downloading pandas-2.1.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\nRequirement already satisfied: jinja2>=3 in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.1.2)\nRequirement already satisfied: scipy<=1.11.4,>=1.6.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.11.4)\nCollecting joblib<1.4,>=1.2.0 (from pycaret)\n  Downloading joblib-1.3.2-py3-none-any.whl.metadata (5.4 kB)\nCollecting scikit-learn>1.4.0 (from pycaret)\n  Downloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\nCollecting pyod>=1.1.3 (from pycaret)\n  Downloading pyod-2.0.1.tar.gz (163 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m163.8/163.8 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: imbalanced-learn>=0.12.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.12.3)\nRequirement already satisfied: category-encoders>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.6.3)\nRequirement already satisfied: lightgbm>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (4.2.0)\nRequirement already satisfied: numba>=0.55.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.58.1)\nRequirement already satisfied: requests>=2.27.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.32.3)\nRequirement already satisfied: psutil>=5.9.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.9.3)\nRequirement already satisfied: markupsafe>=2.0.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.1.3)\nRequirement already satisfied: importlib-metadata>=4.12.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (6.11.0)\nRequirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.9.2)\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.2.1)\nRequirement already satisfied: deprecation>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.1.0)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.4.1)\nRequirement already satisfied: matplotlib<3.8.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.7.5)\nRequirement already satisfied: scikit-plot>=0.3.7 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.3.7)\nRequirement already satisfied: yellowbrick>=1.4 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.5)\nRequirement already satisfied: plotly>=5.14.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.18.0)\nCollecting kaleido>=0.2.1 (from pycaret)\n  Downloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl.metadata (15 kB)\nCollecting schemdraw==0.15 (from pycaret)\n  Downloading schemdraw-0.15-py3-none-any.whl.metadata (2.2 kB)\nCollecting plotly-resampler>=0.8.3.1 (from pycaret)\n  Downloading plotly_resampler-0.10.0-py3-none-any.whl.metadata (13 kB)\nRequirement already satisfied: statsmodels>=0.12.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.14.1)\nCollecting sktime==0.26.0 (from pycaret)\n  Downloading sktime-0.26.0-py3-none-any.whl.metadata (29 kB)\nCollecting tbats>=1.1.3 (from pycaret)\n  Downloading tbats-1.1.3-py3-none-any.whl.metadata (3.8 kB)\nCollecting pmdarima>=2.0.4 (from pycaret)\n  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (7.8 kB)\nCollecting wurlitzer (from pycaret)\n  Downloading wurlitzer-3.1.1-py3-none-any.whl.metadata (2.5 kB)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from sktime==0.26.0->pycaret) (21.3)\nCollecting scikit-base<0.8.0 (from sktime==0.26.0->pycaret)\n  Downloading scikit_base-0.7.8-py3-none-any.whl.metadata (8.8 kB)\nCollecting scikit-learn>1.4.0 (from pycaret)\n  Downloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\nRequirement already satisfied: patsy>=0.5.1 in /opt/conda/lib/python3.10/site-packages (from category-encoders>=2.4.0->pycaret) (0.5.6)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from imbalanced-learn>=0.12.0->pycaret) (3.2.0)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata>=4.12.0->pycaret) (3.17.0)\nRequirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (5.1.1)\nRequirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.19.1)\nRequirement already satisfied: matplotlib-inline in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.1.6)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (3.0.42)\nRequirement already satisfied: pygments>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (2.17.2)\nRequirement already satisfied: stack-data in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.6.2)\nRequirement already satisfied: traitlets>=5 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (5.9.0)\nRequirement already satisfied: exceptiongroup in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (1.2.0)\nRequirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (4.8.0)\nRequirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (6.28.0)\nRequirement already satisfied: ipython-genutils~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (0.2.0)\nRequirement already satisfied: widgetsnbextension~=3.6.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (3.6.7)\nRequirement already satisfied: jupyterlab-widgets>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (3.0.9)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (1.4.5)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (2.9.0.post0)\nRequirement already satisfied: fastjsonschema in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (2.19.1)\nRequirement already satisfied: jsonschema>=2.6 in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (4.20.0)\nRequirement already satisfied: jupyter-core in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (5.7.1)\nRequirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.55.0->pycaret) (0.41.1)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas<2.2.0->pycaret) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas<2.2.0->pycaret) (2023.4)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly>=5.14.0->pycaret) (8.2.3)\nCollecting dash>=2.9.0 (from plotly-resampler>=0.8.3.1->pycaret)\n  Downloading dash-2.17.1-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: orjson<4.0.0,>=3.8.0 in /opt/conda/lib/python3.10/site-packages (from plotly-resampler>=0.8.3.1->pycaret) (3.9.10)\nCollecting tsdownsample>=0.1.3 (from plotly-resampler>=0.8.3.1->pycaret)\n  Downloading tsdownsample-0.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.9 kB)\nRequirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (3.0.8)\nRequirement already satisfied: urllib3 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (1.26.18)\nRequirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (69.0.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (3.6)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (2024.7.4)\nRequirement already satisfied: Flask<3.1,>=1.0.4 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.3)\nRequirement already satisfied: Werkzeug<3.1 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.3)\nCollecting dash-html-components==2.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\n  Downloading dash_html_components-2.0.0-py3-none-any.whl.metadata (3.8 kB)\nCollecting dash-core-components==2.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\n  Downloading dash_core_components-2.0.0-py3-none-any.whl.metadata (2.9 kB)\nCollecting dash-table==5.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\n  Downloading dash_table-5.0.0-py3-none-any.whl.metadata (2.4 kB)\nRequirement already satisfied: typing-extensions>=4.1.1 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (4.9.0)\nRequirement already satisfied: retrying in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.3.3)\nRequirement already satisfied: nest-asyncio in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.5.8)\nRequirement already satisfied: comm>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (0.2.1)\nRequirement already satisfied: debugpy>=1.6.5 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (1.8.0)\nRequirement already satisfied: jupyter-client>=6.1.12 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (7.4.9)\nRequirement already satisfied: pyzmq>=24 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (24.0.1)\nRequirement already satisfied: tornado>=6.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.3.3)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /opt/conda/lib/python3.10/site-packages (from jedi>=0.16->ipython>=5.5.0->pycaret) (0.8.3)\nRequirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (23.2.0)\nRequirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (2023.12.1)\nRequirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.32.1)\nRequirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.16.2)\nRequirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.10/site-packages (from jupyter-core->nbformat>=4.2.0->pycaret) (3.11.0)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from patsy>=0.5.1->category-encoders>=2.4.0->pycaret) (1.16.0)\nRequirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.10/site-packages (from pexpect>4.3->ipython>=5.5.0->pycaret) (0.7.0)\nRequirement already satisfied: wcwidth in /opt/conda/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=5.5.0->pycaret) (0.2.13)\nRequirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.10/site-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.4)\nRequirement already satisfied: executing>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (2.0.1)\nRequirement already satisfied: asttokens>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (2.4.1)\nRequirement already satisfied: pure-eval in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (0.2.2)\nRequirement already satisfied: itsdangerous>=2.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.0)\nRequirement already satisfied: click>=8.1.3 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (8.1.7)\nRequirement already satisfied: blinker>=1.6.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.8.2)\nRequirement already satisfied: entrypoints in /opt/conda/lib/python3.10/site-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (0.4)\nRequirement already satisfied: argon2-cffi in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.1.0)\nRequirement already satisfied: nbconvert>=5 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.4.5)\nRequirement already satisfied: Send2Trash>=1.8.0 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.2)\nRequirement already satisfied: terminado>=0.8.3 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.18.0)\nRequirement already satisfied: prometheus-client in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.19.0)\nRequirement already satisfied: nbclassic>=0.4.7 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.0.0)\nRequirement already satisfied: jupyter-server>=1.8 in /opt/conda/lib/python3.10/site-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.12.5)\nRequirement already satisfied: notebook-shim>=0.2.3 in /opt/conda/lib/python3.10/site-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.3)\nRequirement already satisfied: mistune<2,>=0.8.1 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.4)\nRequirement already satisfied: jupyterlab-pygments in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.3.0)\nRequirement already satisfied: bleach in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.1.0)\nRequirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.0)\nRequirement already satisfied: testpath in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.6.0)\nRequirement already satisfied: defusedxml in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.7.1)\nRequirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.12.2)\nRequirement already satisfied: nbclient<0.6.0,>=0.5.0 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.13)\nRequirement already satisfied: argon2-cffi-bindings in /opt/conda/lib/python3.10/site-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.2.0)\nRequirement already satisfied: anyio>=3.1.0 in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.2.0)\nRequirement already satisfied: jupyter-events>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.9.0)\nRequirement already satisfied: jupyter-server-terminals in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\nRequirement already satisfied: overrides in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (7.4.0)\nRequirement already satisfied: websocket-client in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.7.0)\nRequirement already satisfied: cffi>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.16.0)\nRequirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.5)\nRequirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\nRequirement already satisfied: sniffio>=1.1 in /opt/conda/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\nRequirement already satisfied: pycparser in /opt/conda/lib/python3.10/site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.21)\nRequirement already satisfied: python-json-logger>=2.0.4 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.0.7)\nRequirement already satisfied: pyyaml>=5.3 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.0.1)\nRequirement already satisfied: rfc3339-validator in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.1.4)\nRequirement already satisfied: rfc3986-validator>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.1.1)\nRequirement already satisfied: fqdn in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.1)\nRequirement already satisfied: isoduration in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (20.11.0)\nRequirement already satisfied: jsonpointer>1.13 in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.4)\nRequirement already satisfied: uri-template in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\nRequirement already satisfied: webcolors>=1.11 in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.13)\nRequirement already satisfied: arrow>=0.15.0 in /opt/conda/lib/python3.10/site-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\nRequirement already satisfied: types-python-dateutil>=2.8.10 in /opt/conda/lib/python3.10/site-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.8.19.20240106)\nDownloading pycaret-3.3.2-py3-none-any.whl (486 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m486.1/486.1 kB\u001b[0m \u001b[31m18.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading schemdraw-0.15-py3-none-any.whl (106 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m106.8/106.8 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading sktime-0.26.0-py3-none-any.whl (21.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.8/21.8 MB\u001b[0m \u001b[31m60.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading joblib-1.3.2-py3-none-any.whl (302 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.2/302.2 kB\u001b[0m \u001b[31m17.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl (79.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.9/79.9 MB\u001b[0m \u001b[31m19.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading pandas-2.1.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m83.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading plotly_resampler-0.10.0-py3-none-any.whl (80 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.7/80.7 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m53.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.1/12.1 MB\u001b[0m \u001b[31m81.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[?25hDownloading tbats-1.1.3-py3-none-any.whl (44 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading wurlitzer-3.1.1-py3-none-any.whl (8.6 kB)\nDownloading dash-2.17.1-py3-none-any.whl (7.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.5/7.5 MB\u001b[0m \u001b[31m82.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\nDownloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\nDownloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\nDownloading scikit_base-0.7.8-py3-none-any.whl (130 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.1/130.1 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tsdownsample-0.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m54.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hBuilding wheels for collected packages: pyod\n  Building wheel for pyod (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pyod: filename=pyod-2.0.1-py3-none-any.whl size=193267 sha256=97d53d1f8378460b847d7c06f854418fdb500b6633429ab7384b37a7b4dcfd91\n  Stored in directory: /root/.cache/pip/wheels/94/75/88/b853cf33b0053b0a001dca55b74d515048b7656e736364eb57\nSuccessfully built pyod\nInstalling collected packages: kaleido, dash-table, dash-html-components, dash-core-components, wurlitzer, tsdownsample, scikit-base, schemdraw, joblib, scikit-learn, pandas, sktime, pyod, dash, pmdarima, plotly-resampler, tbats, pycaret\n  Attempting uninstall: joblib\n    Found existing installation: joblib 1.4.2\n    Uninstalling joblib-1.4.2:\n      Successfully uninstalled joblib-1.4.2\n  Attempting uninstall: scikit-learn\n    Found existing installation: scikit-learn 1.2.2\n    Uninstalling scikit-learn-1.2.2:\n      Successfully uninstalled scikit-learn-1.2.2\n  Attempting uninstall: pandas\n    Found existing installation: pandas 2.2.2\n    Uninstalling pandas-2.2.2:\n      Successfully uninstalled pandas-2.2.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nbeatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.2.3 which is incompatible.\nlibpysal 4.9.2 requires packaging>=22, but you have packaging 21.3 which is incompatible.\nlibpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\nmomepy 0.7.2 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\nosmnx 1.9.3 requires shapely>=2.0, but you have shapely 1.8.5.post1 which is incompatible.\npointpats 2.5.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\nspaghetti 1.7.6 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\nspopt 0.6.1 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\nxarray 2024.6.0 requires packaging>=23.1, but you have packaging 21.3 which is incompatible.\nydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed dash-2.17.1 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 joblib-1.3.2 kaleido-0.2.1 pandas-2.1.4 plotly-resampler-0.10.0 pmdarima-2.0.4 pycaret-3.3.2 pyod-2.0.1 schemdraw-0.15 scikit-base-0.7.8 scikit-learn-1.4.2 sktime-0.26.0 tbats-1.1.3 tsdownsample-0.1.3 wurlitzer-3.1.1\nCollecting mlflow\n  Downloading mlflow-2.14.3-py3-none-any.whl.metadata (29 kB)\nRequirement already satisfied: Flask<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.0.3)\nRequirement already satisfied: alembic!=1.10.0,<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.13.2)\nCollecting cachetools<6,>=5.0.0 (from mlflow)\n  Downloading cachetools-5.3.3-py3-none-any.whl.metadata (5.3 kB)\nRequirement already satisfied: click<9,>=7.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (8.1.7)\nRequirement already satisfied: cloudpickle<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.2.1)\nRequirement already satisfied: docker<8,>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (7.0.0)\nRequirement already satisfied: entrypoints<1 in /opt/conda/lib/python3.10/site-packages (from mlflow) (0.4)\nRequirement already satisfied: gitpython<4,>=3.1.9 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.1.41)\nCollecting graphene<4 (from mlflow)\n  Downloading graphene-3.3-py2.py3-none-any.whl.metadata (7.7 kB)\nRequirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (6.11.0)\nRequirement already satisfied: markdown<4,>=3.3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.5.2)\nRequirement already satisfied: matplotlib<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.7.5)\nRequirement already satisfied: numpy<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.26.4)\nRequirement already satisfied: opentelemetry-api<3,>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.22.0)\nRequirement already satisfied: opentelemetry-sdk<3,>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.22.0)\nRequirement already satisfied: packaging<25 in /opt/conda/lib/python3.10/site-packages (from mlflow) (21.3)\nRequirement already satisfied: pandas<3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.1.4)\nRequirement already satisfied: protobuf<5,>=3.12.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.20.3)\nCollecting pyarrow<16,>=4.0.0 (from mlflow)\n  Downloading pyarrow-15.0.2-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (3.0 kB)\nRequirement already satisfied: pytz<2025 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2023.3.post1)\nRequirement already satisfied: pyyaml<7,>=5.1 in /opt/conda/lib/python3.10/site-packages (from mlflow) (6.0.1)\nCollecting querystring-parser<2 (from mlflow)\n  Downloading querystring_parser-1.2.4-py2.py3-none-any.whl.metadata (559 bytes)\nRequirement already satisfied: requests<3,>=2.17.3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.32.3)\nRequirement already satisfied: scikit-learn<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.4.2)\nRequirement already satisfied: scipy<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.11.4)\nRequirement already satisfied: sqlalchemy<3,>=1.4.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.0.25)\nRequirement already satisfied: sqlparse<1,>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (0.4.4)\nRequirement already satisfied: Jinja2<4,>=2.11 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.1.2)\nCollecting gunicorn<23 (from mlflow)\n  Downloading gunicorn-22.0.0-py3-none-any.whl.metadata (4.4 kB)\nRequirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow) (1.3.5)\nRequirement already satisfied: typing-extensions>=4 in /opt/conda/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow) (4.9.0)\nRequirement already satisfied: urllib3>=1.26.0 in /opt/conda/lib/python3.10/site-packages (from docker<8,>=4.0.0->mlflow) (1.26.18)\nRequirement already satisfied: Werkzeug>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (3.0.3)\nRequirement already satisfied: itsdangerous>=2.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (2.2.0)\nRequirement already satisfied: blinker>=1.6.2 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (1.8.2)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\nCollecting graphql-core<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_core-3.2.3-py3-none-any.whl.metadata (10 kB)\nCollecting graphql-relay<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_relay-3.2.0-py3-none-any.whl.metadata (12 kB)\nCollecting aniso8601<10,>=8 (from graphene<4->mlflow)\n  Downloading aniso8601-9.0.1-py2.py3-none-any.whl.metadata (23 kB)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.17.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from Jinja2<4,>=2.11->mlflow) (2.1.3)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (1.4.5)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (2.9.0.post0)\nRequirement already satisfied: deprecated>=1.2.6 in /opt/conda/lib/python3.10/site-packages (from opentelemetry-api<3,>=1.9.0->mlflow) (1.2.14)\nRequirement already satisfied: opentelemetry-semantic-conventions==0.43b0 in /opt/conda/lib/python3.10/site-packages (from opentelemetry-sdk<3,>=1.9.0->mlflow) (0.43b0)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas<3->mlflow) (2023.4)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from querystring-parser<2->mlflow) (1.16.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (3.6)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (2024.7.4)\nRequirement already satisfied: joblib>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn<2->mlflow) (1.3.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn<2->mlflow) (3.2.0)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\nRequirement already satisfied: wrapt<2,>=1.10 in /opt/conda/lib/python3.10/site-packages (from deprecated>=1.2.6->opentelemetry-api<3,>=1.9.0->mlflow) (1.14.1)\nRequirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\nDownloading mlflow-2.14.3-py3-none-any.whl (25.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m25.8/25.8 MB\u001b[0m \u001b[31m58.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading cachetools-5.3.3-py3-none-any.whl (9.3 kB)\nDownloading graphene-3.3-py2.py3-none-any.whl (128 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.2/128.2 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading gunicorn-22.0.0-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.4/84.4 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pyarrow-15.0.2-cp310-cp310-manylinux_2_28_x86_64.whl (38.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.3/38.3 MB\u001b[0m \u001b[31m40.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading querystring_parser-1.2.4-py2.py3-none-any.whl (7.9 kB)\nDownloading aniso8601-9.0.1-py2.py3-none-any.whl (52 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.8/52.8 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_core-3.2.3-py3-none-any.whl (202 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m202.9/202.9 kB\u001b[0m \u001b[31m11.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_relay-3.2.0-py3-none-any.whl (16 kB)\nInstalling collected packages: aniso8601, querystring-parser, pyarrow, graphql-core, cachetools, gunicorn, graphql-relay, graphene, mlflow\n  Attempting uninstall: pyarrow\n    Found existing installation: pyarrow 16.1.0\n    Uninstalling pyarrow-16.1.0:\n      Successfully uninstalled pyarrow-16.1.0\n  Attempting uninstall: cachetools\n    Found existing installation: cachetools 4.2.4\n    Uninstalling cachetools-4.2.4:\n      Successfully uninstalled cachetools-4.2.4\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\napache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\napache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\napache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\nbeatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.2.3 which is incompatible.\nkfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\ntensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.4.1 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed aniso8601-9.0.1 cachetools-5.3.2 graphene-3.3 graphql-core-3.2.3 graphql-relay-3.2.0 gunicorn-22.0.0 mlflow-2.14.3 pyarrow-15.0.2 querystring-parser-1.2.4\n","output_type":"stream"}]},{"cell_type":"code","source":"# for some model interpretation functions\n!pip install interpret","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:04:13.435214Z","iopub.execute_input":"2024-07-14T09:04:13.436123Z","iopub.status.idle":"2024-07-14T09:04:35.061434Z","shell.execute_reply.started":"2024-07-14T09:04:13.436072Z","shell.execute_reply":"2024-07-14T09:04:35.060155Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting interpret\n  Downloading interpret-0.6.2-py3-none-any.whl.metadata (1.1 kB)\nCollecting interpret-core==0.6.2 (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading interpret_core-0.6.2-py3-none-any.whl.metadata (2.8 kB)\nRequirement already satisfied: numpy>=1.11.1 in /opt/conda/lib/python3.10/site-packages (from interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.26.4)\nRequirement already satisfied: scipy>=0.18.1 in /opt/conda/lib/python3.10/site-packages (from interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.11.4)\nRequirement already satisfied: pandas>=0.19.2 in /opt/conda/lib/python3.10/site-packages (from interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.1.4)\nRequirement already satisfied: scikit-learn>=0.18.1 in /opt/conda/lib/python3.10/site-packages (from interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.4.2)\nRequirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.3.2)\nRequirement already satisfied: plotly>=3.8.1 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.18.0)\nRequirement already satisfied: dash>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.17.1)\nRequirement already satisfied: dash-core-components>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.0.0)\nRequirement already satisfied: dash-html-components>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.0.0)\nRequirement already satisfied: dash-table>=4.1.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.0.0)\nCollecting dash-cytoscape>=0.1.1 (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading dash_cytoscape-1.0.1.tar.gz (4.0 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.0/4.0 MB\u001b[0m \u001b[31m51.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hCollecting gevent>=1.3.6 (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading gevent-24.2.1-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (13 kB)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.32.3)\nRequirement already satisfied: ipykernel>=4.10.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (6.28.0)\nRequirement already satisfied: ipython>=5.5.0 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (8.20.0)\nRequirement already satisfied: shap>=0.28.5 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.44.1)\nRequirement already satisfied: dill>=0.2.5 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.3.8)\nRequirement already satisfied: psutil>=5.6.2 in /opt/conda/lib/python3.10/site-packages (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.9.3)\nCollecting SALib>=1.3.3 (from interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading salib-1.5.0-py3-none-any.whl.metadata (11 kB)\nRequirement already satisfied: Flask<3.1,>=1.0.4 in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.0.3)\nRequirement already satisfied: Werkzeug<3.1 in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.0.3)\nRequirement already satisfied: importlib-metadata in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (6.11.0)\nRequirement already satisfied: typing-extensions>=4.1.1 in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (4.9.0)\nRequirement already satisfied: retrying in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.3.3)\nRequirement already satisfied: nest-asyncio in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.5.8)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (69.0.3)\nCollecting zope.event (from gevent>=1.3.6->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading zope.event-5.0-py3-none-any.whl.metadata (4.4 kB)\nCollecting zope.interface (from gevent>=1.3.6->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret)\n  Downloading zope.interface-6.4.post2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (42 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.9/42.9 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: greenlet>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from gevent>=1.3.6->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.0.3)\nRequirement already satisfied: comm>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.2.1)\nRequirement already satisfied: debugpy>=1.6.5 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.8.0)\nRequirement already satisfied: jupyter-client>=6.1.12 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (7.4.9)\nRequirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.7.1)\nRequirement already satisfied: matplotlib-inline>=0.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.1.6)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (21.3)\nRequirement already satisfied: pyzmq>=24 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (24.0.1)\nRequirement already satisfied: tornado>=6.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (6.3.3)\nRequirement already satisfied: traitlets>=5.4.0 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.9.0)\nRequirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (5.1.1)\nRequirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.19.1)\nRequirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.0.42)\nRequirement already satisfied: pygments>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.17.2)\nRequirement already satisfied: stack-data in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.6.2)\nRequirement already satisfied: exceptiongroup in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.2.0)\nRequirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (4.8.0)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.19.2->interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.19.2->interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.19.2->interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2023.4)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly>=3.8.1->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (8.2.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2024.7.4)\nRequirement already satisfied: matplotlib>=3.5 in /opt/conda/lib/python3.10/site-packages (from SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.7.5)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.70.16)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.18.1->interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.2.0)\nRequirement already satisfied: tqdm>=4.27.0 in /opt/conda/lib/python3.10/site-packages (from shap>=0.28.5->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (4.66.4)\nRequirement already satisfied: slicer==0.0.7 in /opt/conda/lib/python3.10/site-packages (from shap>=0.28.5->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.0.7)\nRequirement already satisfied: numba in /opt/conda/lib/python3.10/site-packages (from shap>=0.28.5->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.58.1)\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.10/site-packages (from shap>=0.28.5->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.2.1)\nRequirement already satisfied: Jinja2>=3.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.1.2)\nRequirement already satisfied: itsdangerous>=2.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.2.0)\nRequirement already satisfied: click>=8.1.3 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (8.1.7)\nRequirement already satisfied: blinker>=1.6.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.8.2)\nRequirement already satisfied: parso<0.9.0,>=0.8.3 in /opt/conda/lib/python3.10/site-packages (from jedi>=0.16->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.8.3)\nRequirement already satisfied: entrypoints in /opt/conda/lib/python3.10/site-packages (from jupyter-client>=6.1.12->ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.4)\nRequirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.10/site-packages (from jupyter-core!=5.0.*,>=4.12->ipykernel>=4.10.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.11.0)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.4.5)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.5->SALib>=1.3.3->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.1.1)\nRequirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.10/site-packages (from pexpect>4.3->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.7.0)\nRequirement already satisfied: wcwidth in /opt/conda/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.2.13)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas>=0.19.2->interpret-core==0.6.2->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (1.16.0)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from Werkzeug<3.1->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.1.3)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata->dash>=1.0.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (3.17.0)\nRequirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba->shap>=0.28.5->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.41.1)\nRequirement already satisfied: executing>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.0.1)\nRequirement already satisfied: asttokens>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (2.4.1)\nRequirement already satisfied: pure-eval in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->interpret-core[dash,debug,linear,notebook,plotly,sensitivity,shap]==0.6.2->interpret) (0.2.2)\nDownloading interpret-0.6.2-py3-none-any.whl (1.4 kB)\nDownloading interpret_core-0.6.2-py3-none-any.whl (13.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m63.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading gevent-24.2.1-cp310-cp310-manylinux_2_28_x86_64.whl (6.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.5/6.5 MB\u001b[0m \u001b[31m80.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading salib-1.5.0-py3-none-any.whl (778 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m778.8/778.8 kB\u001b[0m \u001b[31m31.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading zope.event-5.0-py3-none-any.whl (6.8 kB)\nDownloading zope.interface-6.4.post2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (247 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m247.8/247.8 kB\u001b[0m \u001b[31m12.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hBuilding wheels for collected packages: dash-cytoscape\n  Building wheel for dash-cytoscape (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for dash-cytoscape: filename=dash_cytoscape-1.0.1-py3-none-any.whl size=4010600 sha256=390755035161c4fe246d2f1230d1d04d56a7c4321af3f8efe5d47865cd43ede9\n  Stored in directory: /root/.cache/pip/wheels/2b/86/e6/a00e9295bb80ac2d86b93b9cbf5ba1ae78e9f739d75398e41f\nSuccessfully built dash-cytoscape\nInstalling collected packages: zope.interface, zope.event, gevent, SALib, interpret-core, dash-cytoscape, interpret\nSuccessfully installed SALib-1.5.0 dash-cytoscape-1.0.1 gevent-24.2.1 interpret-0.6.2 interpret-core-0.6.2 zope.event-5.0 zope.interface-6.4.post2\n","output_type":"stream"}]},{"cell_type":"code","source":"from pycaret.utils import version\nversion()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:05:10.319738Z","iopub.execute_input":"2024-07-14T09:05:10.320185Z","iopub.status.idle":"2024-07-14T09:05:10.420100Z","shell.execute_reply.started":"2024-07-14T09:05:10.320149Z","shell.execute_reply":"2024-07-14T09:05:10.418983Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'3.3.2'"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nplt.rcParams[\"figure.figsize\"] = (7, 5)  # Change matplotlib Box Size\nplt.rcParams[\"font.size\"] = 10  # Change matplotlib Font Size\nplt.style.use(\"fivethirtyeight\")","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:05:33.753993Z","iopub.execute_input":"2024-07-14T09:05:33.754823Z","iopub.status.idle":"2024-07-14T09:05:35.428872Z","shell.execute_reply.started":"2024-07-14T09:05:33.754782Z","shell.execute_reply":"2024-07-14T09:05:35.427836Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.simplefilter('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:06:13.418846Z","iopub.execute_input":"2024-07-14T09:06:13.419434Z","iopub.status.idle":"2024-07-14T09:06:13.424389Z","shell.execute_reply.started":"2024-07-14T09:06:13.419403Z","shell.execute_reply":"2024-07-14T09:06:13.423268Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"df_train_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv',index_col=0)\ndf_test_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv',index_col=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:07:05.906917Z","iopub.execute_input":"2024-07-14T09:07:05.907320Z","iopub.status.idle":"2024-07-14T09:07:41.514185Z","shell.execute_reply.started":"2024-07-14T09:07:05.907292Z","shell.execute_reply":"2024-07-14T09:07:41.510203Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"data = df_train_raw.copy()\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:23.691196Z","iopub.execute_input":"2024-07-14T09:23:23.691623Z","iopub.status.idle":"2024-07-14T09:23:24.339090Z","shell.execute_reply.started":"2024-07-14T09:23:23.691578Z","shell.execute_reply":"2024-07-14T09:23:24.337855Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"    Gender  Age  Driving_License  Region_Code  Previously_Insured Vehicle_Age  \\\nid                                                                              \n0     Male   21                1         35.0                   0    1-2 Year   \n1     Male   43                1         28.0                   0   > 2 Years   \n2   Female   25                1         14.0                   1    < 1 Year   \n3   Female   35                1          1.0                   0    1-2 Year   \n4   Female   36                1         15.0                   1    1-2 Year   \n\n   Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  Response  \nid                                                                          \n0             Yes         65101.0                 124.0      187         0  \n1             Yes         58911.0                  26.0      288         1  \n2              No         38043.0                 152.0      254         0  \n3             Yes          2630.0                 156.0       76         0  \n4              No         31951.0                 152.0      294         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>21</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>65101.0</td>\n      <td>124.0</td>\n      <td>187</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>43</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>&gt; 2 Years</td>\n      <td>Yes</td>\n      <td>58911.0</td>\n      <td>26.0</td>\n      <td>288</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Female</td>\n      <td>25</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>&lt; 1 Year</td>\n      <td>No</td>\n      <td>38043.0</td>\n      <td>152.0</td>\n      <td>254</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>2630.0</td>\n      <td>156.0</td>\n      <td>76</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>36</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>1-2 Year</td>\n      <td>No</td>\n      <td>31951.0</td>\n      <td>152.0</td>\n      <td>294</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data['Gender'] = data['Gender'].map({'Male': 1, 'Female': 0})\ndata['Vehicle_Age'] = data['Vehicle_Age'].map({'< 1 Year': 0, '1-2 Year': 1, '> 2 Years': 2})\ndata['Vehicle_Damage'] = data['Vehicle_Damage'].map({'Yes': 1, 'No': 0})","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:28.055977Z","iopub.execute_input":"2024-07-14T09:23:28.056393Z","iopub.status.idle":"2024-07-14T09:23:30.465446Z","shell.execute_reply.started":"2024-07-14T09:23:28.056360Z","shell.execute_reply":"2024-07-14T09:23:30.464244Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:42.658223Z","iopub.execute_input":"2024-07-14T09:23:42.658623Z","iopub.status.idle":"2024-07-14T09:23:42.675212Z","shell.execute_reply.started":"2024-07-14T09:23:42.658590Z","shell.execute_reply":"2024-07-14T09:23:42.673754Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"    Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                  \n0        1   21                1         35.0                   0   \n1        1   43                1         28.0                   0   \n2        0   25                1         14.0                   1   \n3        0   35                1          1.0                   0   \n4        0   36                1         15.0                   1   \n\n    Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                      \n0             1               1         65101.0                 124.0   \n1             2               1         58911.0                  26.0   \n2             0               0         38043.0                 152.0   \n3             1               1          2630.0                 156.0   \n4             1               0         31951.0                 152.0   \n\n    Vintage  Response  \nid                     \n0       187         0  \n1       288         1  \n2       254         0  \n3        76         0  \n4       294         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>21</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>65101.0</td>\n      <td>124.0</td>\n      <td>187</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>43</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>58911.0</td>\n      <td>26.0</td>\n      <td>288</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>25</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>38043.0</td>\n      <td>152.0</td>\n      <td>254</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>35</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2630.0</td>\n      <td>156.0</td>\n      <td>76</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>36</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>31951.0</td>\n      <td>152.0</td>\n      <td>294</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:53.043171Z","iopub.execute_input":"2024-07-14T09:23:53.044017Z","iopub.status.idle":"2024-07-14T09:23:53.055039Z","shell.execute_reply.started":"2024-07-14T09:23:53.043980Z","shell.execute_reply":"2024-07-14T09:23:53.053812Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 11504798 entries, 0 to 11504797\nData columns (total 11 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   Gender                int64  \n 1   Age                   int64  \n 2   Driving_License       int64  \n 3   Region_Code           float64\n 4   Previously_Insured    int64  \n 5   Vehicle_Age           int64  \n 6   Vehicle_Damage        int64  \n 7   Annual_Premium        float64\n 8   Policy_Sales_Channel  float64\n 9   Vintage               int64  \n 10  Response              int64  \ndtypes: float64(3), int64(8)\nmemory usage: 1.0 GB\n","output_type":"stream"}]},{"cell_type":"code","source":"data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:56.776954Z","iopub.execute_input":"2024-07-14T09:23:56.777336Z","iopub.status.idle":"2024-07-14T09:23:56.924103Z","shell.execute_reply.started":"2024-07-14T09:23:56.777308Z","shell.execute_reply":"2024-07-14T09:23:56.922977Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"Gender                  0\nAge                     0\nDriving_License         0\nRegion_Code             0\nPreviously_Insured      0\nVehicle_Age             0\nVehicle_Damage          0\nAnnual_Premium          0\nPolicy_Sales_Channel    0\nVintage                 0\nResponse                0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:23:57.861371Z","iopub.execute_input":"2024-07-14T09:23:57.861743Z","iopub.status.idle":"2024-07-14T09:24:06.264560Z","shell.execute_reply.started":"2024-07-14T09:23:57.861715Z","shell.execute_reply":"2024-07-14T09:24:06.263316Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"             Gender           Age  Driving_License   Region_Code  \\\ncount  1.150480e+07  1.150480e+07     1.150480e+07  1.150480e+07   \nmean   5.413510e-01  3.838356e+01     9.980220e-01  2.641869e+01   \nstd    4.982872e-01  1.499346e+01     4.443120e-02  1.299159e+01   \nmin    0.000000e+00  2.000000e+01     0.000000e+00  0.000000e+00   \n25%    0.000000e+00  2.400000e+01     1.000000e+00  1.500000e+01   \n50%    1.000000e+00  3.600000e+01     1.000000e+00  2.800000e+01   \n75%    1.000000e+00  4.900000e+01     1.000000e+00  3.500000e+01   \nmax    1.000000e+00  8.500000e+01     1.000000e+00  5.200000e+01   \n\n       Previously_Insured   Vehicle_Age  Vehicle_Damage  Annual_Premium  \\\ncount        1.150480e+07  1.150480e+07    1.150480e+07    1.150480e+07   \nmean         4.629966e-01  6.031073e-01    5.026798e-01    3.046137e+04   \nstd          4.986289e-01  5.678559e-01    4.999928e-01    1.645475e+04   \nmin          0.000000e+00  0.000000e+00    0.000000e+00    2.630000e+03   \n25%          0.000000e+00  0.000000e+00    0.000000e+00    2.527700e+04   \n50%          0.000000e+00  1.000000e+00    1.000000e+00    3.182400e+04   \n75%          1.000000e+00  1.000000e+00    1.000000e+00    3.945100e+04   \nmax          1.000000e+00  2.000000e+00    1.000000e+00    5.401650e+05   \n\n       Policy_Sales_Channel       Vintage      Response  \ncount          1.150480e+07  1.150480e+07  1.150480e+07  \nmean           1.124254e+02  1.638977e+02  1.229973e-01  \nstd            5.403571e+01  7.997953e+01  3.284341e-01  \nmin            1.000000e+00  1.000000e+01  0.000000e+00  \n25%            2.900000e+01  9.900000e+01  0.000000e+00  \n50%            1.510000e+02  1.660000e+02  0.000000e+00  \n75%            1.520000e+02  2.320000e+02  0.000000e+00  \nmax            1.630000e+02  2.990000e+02  1.000000e+00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n      <td>1.150480e+07</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.413510e-01</td>\n      <td>3.838356e+01</td>\n      <td>9.980220e-01</td>\n      <td>2.641869e+01</td>\n      <td>4.629966e-01</td>\n      <td>6.031073e-01</td>\n      <td>5.026798e-01</td>\n      <td>3.046137e+04</td>\n      <td>1.124254e+02</td>\n      <td>1.638977e+02</td>\n      <td>1.229973e-01</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.982872e-01</td>\n      <td>1.499346e+01</td>\n      <td>4.443120e-02</td>\n      <td>1.299159e+01</td>\n      <td>4.986289e-01</td>\n      <td>5.678559e-01</td>\n      <td>4.999928e-01</td>\n      <td>1.645475e+04</td>\n      <td>5.403571e+01</td>\n      <td>7.997953e+01</td>\n      <td>3.284341e-01</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000e+00</td>\n      <td>2.000000e+01</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>2.630000e+03</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000e+00</td>\n      <td>2.400000e+01</td>\n      <td>1.000000e+00</td>\n      <td>1.500000e+01</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>2.527700e+04</td>\n      <td>2.900000e+01</td>\n      <td>9.900000e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000e+00</td>\n      <td>3.600000e+01</td>\n      <td>1.000000e+00</td>\n      <td>2.800000e+01</td>\n      <td>0.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>3.182400e+04</td>\n      <td>1.510000e+02</td>\n      <td>1.660000e+02</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000e+00</td>\n      <td>4.900000e+01</td>\n      <td>1.000000e+00</td>\n      <td>3.500000e+01</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>3.945100e+04</td>\n      <td>1.520000e+02</td>\n      <td>2.320000e+02</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000e+00</td>\n      <td>8.500000e+01</td>\n      <td>1.000000e+00</td>\n      <td>5.200000e+01</td>\n      <td>1.000000e+00</td>\n      <td>2.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>5.401650e+05</td>\n      <td>1.630000e+02</td>\n      <td>2.990000e+02</td>\n      <td>1.000000e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.hist(figsize=(16, 12));","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:26:35.260645Z","iopub.execute_input":"2024-07-14T09:26:35.261961Z","iopub.status.idle":"2024-07-14T09:26:43.107718Z","shell.execute_reply.started":"2024-07-14T09:26:35.261914Z","shell.execute_reply":"2024-07-14T09:26:43.106579Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x1200 with 12 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## data preparation","metadata":{}},{"cell_type":"code","source":"np.mean(data['Annual_Premium']), np.median(data['Annual_Premium'])","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:36:57.524295Z","iopub.execute_input":"2024-07-14T09:36:57.525798Z","iopub.status.idle":"2024-07-14T09:36:57.984507Z","shell.execute_reply.started":"2024-07-14T09:36:57.525655Z","shell.execute_reply":"2024-07-14T09:36:57.980323Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"(30461.370410588694, 31824.0)"},"metadata":{}}]},{"cell_type":"code","source":"data['Annual_Premium'] = np.where(data['Annual_Premium'] > 32000, 1, 0)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:38:39.959624Z","iopub.execute_input":"2024-07-14T09:38:39.960227Z","iopub.status.idle":"2024-07-14T09:38:40.141463Z","shell.execute_reply.started":"2024-07-14T09:38:39.960185Z","shell.execute_reply":"2024-07-14T09:38:40.139973Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"data_sample= data.sample(frac=0.025, random_state=42)\ndata_sample","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:38:41.557321Z","iopub.execute_input":"2024-07-14T09:38:41.557705Z","iopub.status.idle":"2024-07-14T09:38:42.210989Z","shell.execute_reply.started":"2024-07-14T09:38:41.557677Z","shell.execute_reply":"2024-07-14T09:38:42.209690Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                        \n2899125        0   41                1         28.0                   0   \n3854901        0   40                1         28.0                   0   \n7377384        1   31                1         18.0                   0   \n10901782       0   24                1         37.0                   1   \n8099641        1   33                1         28.0                   1   \n...          ...  ...              ...          ...                 ...   \n7212347        0   50                1         38.0                   0   \n5944779        0   28                1         28.0                   1   \n10779580       0   21                1         14.0                   1   \n5896240        0   37                1         41.0                   1   \n3068604        0   47                1         28.0                   0   \n\n          Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                            \n2899125             1               1               0                 157.0   \n3854901             1               1               1                  13.0   \n7377384             0               1               0                 152.0   \n10901782            0               0               0                 152.0   \n8099641             1               0               1                 124.0   \n...               ...             ...             ...                   ...   \n7212347             1               1               1                 124.0   \n5944779             0               0               1                 152.0   \n10779580            0               0               0                 152.0   \n5896240             1               0               0                  29.0   \n3068604             1               1               1                 122.0   \n\n          Vintage  Response  \nid                           \n2899125        46         0  \n3854901       245         0  \n7377384        31         0  \n10901782      217         0  \n8099641       286         0  \n...           ...       ...  \n7212347        98         1  \n5944779       181         0  \n10779580      258         0  \n5896240       174         0  \n3068604       264         0  \n\n[287620 rows x 11 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2899125</th>\n      <td>0</td>\n      <td>41</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>157.0</td>\n      <td>46</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3854901</th>\n      <td>0</td>\n      <td>40</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>245</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7377384</th>\n      <td>1</td>\n      <td>31</td>\n      <td>1</td>\n      <td>18.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>152.0</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10901782</th>\n      <td>0</td>\n      <td>24</td>\n      <td>1</td>\n      <td>37.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>152.0</td>\n      <td>217</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8099641</th>\n      <td>1</td>\n      <td>33</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>124.0</td>\n      <td>286</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7212347</th>\n      <td>0</td>\n      <td>50</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>124.0</td>\n      <td>98</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5944779</th>\n      <td>0</td>\n      <td>28</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>152.0</td>\n      <td>181</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10779580</th>\n      <td>0</td>\n      <td>21</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>152.0</td>\n      <td>258</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5896240</th>\n      <td>0</td>\n      <td>37</td>\n      <td>1</td>\n      <td>41.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>29.0</td>\n      <td>174</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3068604</th>\n      <td>0</td>\n      <td>47</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>122.0</td>\n      <td>264</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>287620 rows × 11 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Prepare Datasets","metadata":{}},{"cell_type":"code","source":"X = data_sample.drop(columns=['Response'], axis=1)\ny = data_sample['Response']\nX.shape, y.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:52:32.857611Z","iopub.execute_input":"2024-07-14T09:52:32.858147Z","iopub.status.idle":"2024-07-14T09:52:32.882553Z","shell.execute_reply.started":"2024-07-14T09:52:32.858111Z","shell.execute_reply":"2024-07-14T09:52:32.881434Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"((287620, 10), (287620,))"},"metadata":{}}]},{"cell_type":"code","source":"y.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:52:46.792741Z","iopub.execute_input":"2024-07-14T09:52:46.793201Z","iopub.status.idle":"2024-07-14T09:52:46.807143Z","shell.execute_reply.started":"2024-07-14T09:52:46.793165Z","shell.execute_reply":"2024-07-14T09:52:46.805777Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"Response\n0    252271\n1     35349\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X.shape, y.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:52:49.548565Z","iopub.execute_input":"2024-07-14T09:52:49.549078Z","iopub.status.idle":"2024-07-14T09:52:49.556923Z","shell.execute_reply.started":"2024-07-14T09:52:49.549023Z","shell.execute_reply":"2024-07-14T09:52:49.555578Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"((287620, 10), (287620,))"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX_train.shape, X_test.shape, y_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:52:51.555555Z","iopub.execute_input":"2024-07-14T09:52:51.556049Z","iopub.status.idle":"2024-07-14T09:52:51.629072Z","shell.execute_reply.started":"2024-07-14T09:52:51.556011Z","shell.execute_reply":"2024-07-14T09:52:51.627756Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"((230096, 10), (57524, 10), (230096,))"},"metadata":{}}]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:52:53.630400Z","iopub.execute_input":"2024-07-14T09:52:53.630868Z","iopub.status.idle":"2024-07-14T09:52:53.647484Z","shell.execute_reply.started":"2024-07-14T09:52:53.630823Z","shell.execute_reply":"2024-07-14T09:52:53.646056Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                        \n10038217       1   23                1         50.0                   1   \n2787465        1   26                1         18.0                   0   \n7726940        0   38                1         28.0                   1   \n9242559        1   22                1         15.0                   1   \n10628562       0   66                1         46.0                   0   \n\n          Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                            \n10038217            0               0               1                 152.0   \n2787465             0               1               0                 153.0   \n7726940             1               0               1                 124.0   \n9242559             0               0               1                 152.0   \n10628562            1               1               0                  11.0   \n\n          Vintage  \nid                 \n10038217      296  \n2787465        68  \n7726940       127  \n9242559       261  \n10628562      132  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10038217</th>\n      <td>1</td>\n      <td>23</td>\n      <td>1</td>\n      <td>50.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>152.0</td>\n      <td>296</td>\n    </tr>\n    <tr>\n      <th>2787465</th>\n      <td>1</td>\n      <td>26</td>\n      <td>1</td>\n      <td>18.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>153.0</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>7726940</th>\n      <td>0</td>\n      <td>38</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>124.0</td>\n      <td>127</td>\n    </tr>\n    <tr>\n      <th>9242559</th>\n      <td>1</td>\n      <td>22</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>152.0</td>\n      <td>261</td>\n    </tr>\n    <tr>\n      <th>10628562</th>\n      <td>0</td>\n      <td>66</td>\n      <td>1</td>\n      <td>46.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>11.0</td>\n      <td>132</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Initialize Setup","metadata":{}},{"cell_type":"code","source":"from pycaret.classification import *\n\nclf = setup(data=pd.concat([X_train, y_train], axis=1),\n            target = 'Response',\n            session_id=13,\n            max_encoding_ohe=600, # columns with 600 or less categories will be One-hot encoded ELSE target encoding\n            rare_to_value=0.008, # Categories with less than 0.008 (0.8%) of the data will be grouped into a new category (Other)\n            rare_value='Other',\n            experiment_name='swiss1',\n            normalize = True,\n            log_experiment = True,\n            n_jobs=-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:11.674623Z","iopub.execute_input":"2024-07-14T09:53:11.675799Z","iopub.status.idle":"2024-07-14T09:53:14.032020Z","shell.execute_reply.started":"2024-07-14T09:53:11.675757Z","shell.execute_reply":"2024-07-14T09:53:14.030904Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7de5d2378a30>","text/html":"<style type=\"text/css\">\n#T_c6677_row8_col1, #T_c6677_row12_col1 {\n  background-color: lightgreen;\n}\n</style>\n<table id=\"T_c6677\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_c6677_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n      <th id=\"T_c6677_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_c6677_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_c6677_row0_col0\" class=\"data row0 col0\" >Session id</td>\n      <td id=\"T_c6677_row0_col1\" class=\"data row0 col1\" >13</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_c6677_row1_col0\" class=\"data row1 col0\" >Target</td>\n      <td id=\"T_c6677_row1_col1\" class=\"data row1 col1\" >Response</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_c6677_row2_col0\" class=\"data row2 col0\" >Target type</td>\n      <td id=\"T_c6677_row2_col1\" class=\"data row2 col1\" >Binary</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_c6677_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n      <td id=\"T_c6677_row3_col1\" class=\"data row3 col1\" >(230096, 11)</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_c6677_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n      <td id=\"T_c6677_row4_col1\" class=\"data row4 col1\" >(230096, 11)</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_c6677_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n      <td id=\"T_c6677_row5_col1\" class=\"data row5 col1\" >(161067, 11)</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_c6677_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n      <td id=\"T_c6677_row6_col1\" class=\"data row6 col1\" >(69029, 11)</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_c6677_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n      <td id=\"T_c6677_row7_col1\" class=\"data row7 col1\" >10</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_c6677_row8_col0\" class=\"data row8 col0\" >Preprocess</td>\n      <td id=\"T_c6677_row8_col1\" class=\"data row8 col1\" >True</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_c6677_row9_col0\" class=\"data row9 col0\" >Imputation type</td>\n      <td id=\"T_c6677_row9_col1\" class=\"data row9 col1\" >simple</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_c6677_row10_col0\" class=\"data row10 col0\" >Numeric imputation</td>\n      <td id=\"T_c6677_row10_col1\" class=\"data row10 col1\" >mean</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n      <td id=\"T_c6677_row11_col0\" class=\"data row11 col0\" >Categorical imputation</td>\n      <td id=\"T_c6677_row11_col1\" class=\"data row11 col1\" >mode</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n      <td id=\"T_c6677_row12_col0\" class=\"data row12 col0\" >Normalize</td>\n      <td id=\"T_c6677_row12_col1\" class=\"data row12 col1\" >True</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n      <td id=\"T_c6677_row13_col0\" class=\"data row13 col0\" >Normalize method</td>\n      <td id=\"T_c6677_row13_col1\" class=\"data row13 col1\" >zscore</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n      <td id=\"T_c6677_row14_col0\" class=\"data row14 col0\" >Fold Generator</td>\n      <td id=\"T_c6677_row14_col1\" class=\"data row14 col1\" >StratifiedKFold</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n      <td id=\"T_c6677_row15_col0\" class=\"data row15 col0\" >Fold Number</td>\n      <td id=\"T_c6677_row15_col1\" class=\"data row15 col1\" >10</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n      <td id=\"T_c6677_row16_col0\" class=\"data row16 col0\" >CPU Jobs</td>\n      <td id=\"T_c6677_row16_col1\" class=\"data row16 col1\" >-1</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n      <td id=\"T_c6677_row17_col0\" class=\"data row17 col0\" >Use GPU</td>\n      <td id=\"T_c6677_row17_col1\" class=\"data row17 col1\" >False</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n      <td id=\"T_c6677_row18_col0\" class=\"data row18 col0\" >Log Experiment</td>\n      <td id=\"T_c6677_row18_col1\" class=\"data row18 col1\" >MlflowLogger</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n      <td id=\"T_c6677_row19_col0\" class=\"data row19 col0\" >Experiment Name</td>\n      <td id=\"T_c6677_row19_col1\" class=\"data row19 col1\" >swiss1</td>\n    </tr>\n    <tr>\n      <th id=\"T_c6677_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n      <td id=\"T_c6677_row20_col0\" class=\"data row20 col0\" >USI</td>\n      <td id=\"T_c6677_row20_col1\" class=\"data row20 col1\" >9fef</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}]},{"cell_type":"code","source":"get_config('pipeline')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:18.770629Z","iopub.execute_input":"2024-07-14T09:53:18.771125Z","iopub.status.idle":"2024-07-14T09:53:18.805692Z","shell.execute_reply.started":"2024-07-14T09:53:18.771085Z","shell.execute_reply":"2024-07-14T09:53:18.804312Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"Pipeline(memory=FastMemory(location=/tmp/joblib),\n         steps=[('numerical_imputer',\n                 TransformerWrapper(exclude=None,\n                                    include=['Gender', 'Age', 'Driving_License',\n                                             'Region_Code',\n                                             'Previously_Insured',\n                                             'Vehicle_Age', 'Vehicle_Damage',\n                                             'Annual_Premium',\n                                             'Policy_Sales_Channel',\n                                             'Vintage'],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty...\n                ('categorical_imputer',\n                 TransformerWrapper(exclude=None, include=[],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty_features=False,\n                                                              missing_values=nan,\n                                                              strategy='most_frequent'))),\n                ('normalize',\n                 TransformerWrapper(exclude=None, include=None,\n                                    transformer=StandardScaler(copy=True,\n                                                               with_mean=True,\n                                                               with_std=True)))],\n         verbose=False)","text/html":"<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(memory=FastMemory(location=/tmp/joblib),\n         steps=[(&#x27;numerical_imputer&#x27;,\n                 TransformerWrapper(exclude=None,\n                                    include=[&#x27;Gender&#x27;, &#x27;Age&#x27;, &#x27;Driving_License&#x27;,\n                                             &#x27;Region_Code&#x27;,\n                                             &#x27;Previously_Insured&#x27;,\n                                             &#x27;Vehicle_Age&#x27;, &#x27;Vehicle_Damage&#x27;,\n                                             &#x27;Annual_Premium&#x27;,\n                                             &#x27;Policy_Sales_Channel&#x27;,\n                                             &#x27;Vintage&#x27;],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty...\n                (&#x27;categorical_imputer&#x27;,\n                 TransformerWrapper(exclude=None, include=[],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty_features=False,\n                                                              missing_values=nan,\n                                                              strategy=&#x27;most_frequent&#x27;))),\n                (&#x27;normalize&#x27;,\n                 TransformerWrapper(exclude=None, include=None,\n                                    transformer=StandardScaler(copy=True,\n                                                               with_mean=True,\n                                                               with_std=True)))],\n         verbose=False)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;Pipeline<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(memory=FastMemory(location=/tmp/joblib),\n         steps=[(&#x27;numerical_imputer&#x27;,\n                 TransformerWrapper(exclude=None,\n                                    include=[&#x27;Gender&#x27;, &#x27;Age&#x27;, &#x27;Driving_License&#x27;,\n                                             &#x27;Region_Code&#x27;,\n                                             &#x27;Previously_Insured&#x27;,\n                                             &#x27;Vehicle_Age&#x27;, &#x27;Vehicle_Damage&#x27;,\n                                             &#x27;Annual_Premium&#x27;,\n                                             &#x27;Policy_Sales_Channel&#x27;,\n                                             &#x27;Vintage&#x27;],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty...\n                (&#x27;categorical_imputer&#x27;,\n                 TransformerWrapper(exclude=None, include=[],\n                                    transformer=SimpleImputer(add_indicator=False,\n                                                              copy=True,\n                                                              fill_value=None,\n                                                              keep_empty_features=False,\n                                                              missing_values=nan,\n                                                              strategy=&#x27;most_frequent&#x27;))),\n                (&#x27;normalize&#x27;,\n                 TransformerWrapper(exclude=None, include=None,\n                                    transformer=StandardScaler(copy=True,\n                                                               with_mean=True,\n                                                               with_std=True)))],\n         verbose=False)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">numerical_imputer: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None,\n                   include=[&#x27;Gender&#x27;, &#x27;Age&#x27;, &#x27;Driving_License&#x27;, &#x27;Region_Code&#x27;,\n                            &#x27;Previously_Insured&#x27;, &#x27;Vehicle_Age&#x27;,\n                            &#x27;Vehicle_Damage&#x27;, &#x27;Annual_Premium&#x27;,\n                            &#x27;Policy_Sales_Channel&#x27;, &#x27;Vintage&#x27;],\n                   transformer=SimpleImputer(add_indicator=False, copy=True,\n                                             fill_value=None,\n                                             keep_empty_features=False,\n                                             missing_values=nan,\n                                             strategy=&#x27;mean&#x27;))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: SimpleImputer</label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">categorical_imputer: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None, include=[],\n                   transformer=SimpleImputer(add_indicator=False, copy=True,\n                                             fill_value=None,\n                                             keep_empty_features=False,\n                                             missing_values=nan,\n                                             strategy=&#x27;most_frequent&#x27;))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: SimpleImputer</label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">normalize: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None, include=None,\n                   transformer=StandardScaler(copy=True, with_mean=True,\n                                              with_std=True))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: StandardScaler</label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"# check the original data going into Pycaret\nX_tr = get_config('X_train')\nX_tr.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:21.745488Z","iopub.execute_input":"2024-07-14T09:53:21.745940Z","iopub.status.idle":"2024-07-14T09:53:21.812082Z","shell.execute_reply.started":"2024-07-14T09:53:21.745903Z","shell.execute_reply":"2024-07-14T09:53:21.810705Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"         Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                       \n9723354       0   35                1         28.0                   0   \n3326589       0   34                1          9.0                   1   \n8270403       0   45                1         13.0                   0   \n3765543       0   46                1         28.0                   1   \n6943734       0   53                1         28.0                   0   \n\n         Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                           \n9723354            1               0               0                 124.0   \n3326589            1               0               0                  26.0   \n8270403            1               0               1                 152.0   \n3765543            1               0               1                 122.0   \n6943734            1               1               0                  26.0   \n\n         Vintage  \nid                \n9723354       79  \n3326589      133  \n8270403       44  \n3765543      137  \n6943734       62  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9723354</th>\n      <td>0</td>\n      <td>35</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>124.0</td>\n      <td>79</td>\n    </tr>\n    <tr>\n      <th>3326589</th>\n      <td>0</td>\n      <td>34</td>\n      <td>1</td>\n      <td>9.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>133</td>\n    </tr>\n    <tr>\n      <th>8270403</th>\n      <td>0</td>\n      <td>45</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>152.0</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>3765543</th>\n      <td>0</td>\n      <td>46</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>122.0</td>\n      <td>137</td>\n    </tr>\n    <tr>\n      <th>6943734</th>\n      <td>0</td>\n      <td>53</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>26.0</td>\n      <td>62</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# check how pycaret transforms the data\nX_tr2 = get_config('X_train_transformed')\nX_tr2.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:23.037001Z","iopub.execute_input":"2024-07-14T09:53:23.037458Z","iopub.status.idle":"2024-07-14T09:53:23.216601Z","shell.execute_reply.started":"2024-07-14T09:53:23.037424Z","shell.execute_reply":"2024-07-14T09:53:23.215181Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"           Gender       Age  Driving_License  Region_Code  Previously_Insured  \\\nid                                                                              \n9723354 -1.086916 -0.225551         0.045585     0.122233           -0.930425   \n3326589 -1.086916 -0.292198         0.045585    -1.341110            1.074777   \n8270403 -1.086916  0.440924         0.045585    -1.033038           -0.930425   \n3765543 -1.086916  0.507572         0.045585     0.122233            1.074777   \n6943734 -1.086916  0.974104         0.045585     0.122233           -0.930425   \n\n         Vehicle_Age  Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\nid                                                                           \n9723354      0.69979       -1.005834       -0.993286              0.215811   \n3326589      0.69979       -1.005834       -0.993286             -1.595474   \n8270403      0.69979       -1.005834        1.006759              0.733321   \n3765543      0.69979       -1.005834        1.006759              0.178846   \n6943734      0.69979        0.994199       -0.993286             -1.595474   \n\n          Vintage  \nid                 \n9723354 -1.062993  \n3326589 -0.387489  \n8270403 -1.500820  \n3765543 -0.337451  \n6943734 -1.275652  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9723354</th>\n      <td>-1.086916</td>\n      <td>-0.225551</td>\n      <td>0.045585</td>\n      <td>0.122233</td>\n      <td>-0.930425</td>\n      <td>0.69979</td>\n      <td>-1.005834</td>\n      <td>-0.993286</td>\n      <td>0.215811</td>\n      <td>-1.062993</td>\n    </tr>\n    <tr>\n      <th>3326589</th>\n      <td>-1.086916</td>\n      <td>-0.292198</td>\n      <td>0.045585</td>\n      <td>-1.341110</td>\n      <td>1.074777</td>\n      <td>0.69979</td>\n      <td>-1.005834</td>\n      <td>-0.993286</td>\n      <td>-1.595474</td>\n      <td>-0.387489</td>\n    </tr>\n    <tr>\n      <th>8270403</th>\n      <td>-1.086916</td>\n      <td>0.440924</td>\n      <td>0.045585</td>\n      <td>-1.033038</td>\n      <td>-0.930425</td>\n      <td>0.69979</td>\n      <td>-1.005834</td>\n      <td>1.006759</td>\n      <td>0.733321</td>\n      <td>-1.500820</td>\n    </tr>\n    <tr>\n      <th>3765543</th>\n      <td>-1.086916</td>\n      <td>0.507572</td>\n      <td>0.045585</td>\n      <td>0.122233</td>\n      <td>1.074777</td>\n      <td>0.69979</td>\n      <td>-1.005834</td>\n      <td>1.006759</td>\n      <td>0.178846</td>\n      <td>-0.337451</td>\n    </tr>\n    <tr>\n      <th>6943734</th>\n      <td>-1.086916</td>\n      <td>0.974104</td>\n      <td>0.045585</td>\n      <td>0.122233</td>\n      <td>-0.930425</td>\n      <td>0.69979</td>\n      <td>0.994199</td>\n      <td>-0.993286</td>\n      <td>-1.595474</td>\n      <td>-1.275652</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_tr2.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:24.726573Z","iopub.execute_input":"2024-07-14T09:53:24.727060Z","iopub.status.idle":"2024-07-14T09:53:24.735131Z","shell.execute_reply.started":"2024-07-14T09:53:24.727022Z","shell.execute_reply":"2024-07-14T09:53:24.733871Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Index(['Gender', 'Age', 'Driving_License', 'Region_Code', 'Previously_Insured',\n       'Vehicle_Age', 'Vehicle_Damage', 'Annual_Premium',\n       'Policy_Sales_Channel', 'Vintage'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"## Train and Compare Models","metadata":{}},{"cell_type":"code","source":"best_models = compare_models(fold=5,\n                             sort='F1',\n                             n_select=3)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T09:53:26.705342Z","iopub.execute_input":"2024-07-14T09:53:26.705792Z","iopub.status.idle":"2024-07-14T10:00:01.737479Z","shell.execute_reply.started":"2024-07-14T09:53:26.705758Z","shell.execute_reply":"2024-07-14T10:00:01.736158Z"},"trusted":true},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7de5d26e7700>","text/html":"<style type=\"text/css\">\n#T_fe3c8 th {\n  text-align: left;\n}\n#T_fe3c8_row0_col0, #T_fe3c8_row0_col1, #T_fe3c8_row0_col2, #T_fe3c8_row0_col3, #T_fe3c8_row0_col4, #T_fe3c8_row1_col0, #T_fe3c8_row1_col1, #T_fe3c8_row1_col2, #T_fe3c8_row1_col4, #T_fe3c8_row1_col5, #T_fe3c8_row1_col6, #T_fe3c8_row1_col7, #T_fe3c8_row2_col0, #T_fe3c8_row2_col1, #T_fe3c8_row2_col2, #T_fe3c8_row2_col3, #T_fe3c8_row2_col4, #T_fe3c8_row2_col5, #T_fe3c8_row2_col6, #T_fe3c8_row2_col7, #T_fe3c8_row3_col0, #T_fe3c8_row3_col1, #T_fe3c8_row3_col2, #T_fe3c8_row3_col3, #T_fe3c8_row3_col4, #T_fe3c8_row3_col5, #T_fe3c8_row3_col6, #T_fe3c8_row3_col7, #T_fe3c8_row4_col0, #T_fe3c8_row4_col1, #T_fe3c8_row4_col2, #T_fe3c8_row4_col3, #T_fe3c8_row4_col4, #T_fe3c8_row4_col5, #T_fe3c8_row4_col6, #T_fe3c8_row4_col7, #T_fe3c8_row5_col0, #T_fe3c8_row5_col1, #T_fe3c8_row5_col2, #T_fe3c8_row5_col3, #T_fe3c8_row5_col4, #T_fe3c8_row5_col5, #T_fe3c8_row5_col6, #T_fe3c8_row5_col7, #T_fe3c8_row6_col0, #T_fe3c8_row6_col1, #T_fe3c8_row6_col2, #T_fe3c8_row6_col3, #T_fe3c8_row6_col4, #T_fe3c8_row6_col5, #T_fe3c8_row6_col6, #T_fe3c8_row6_col7, #T_fe3c8_row7_col0, #T_fe3c8_row7_col3, #T_fe3c8_row7_col4, #T_fe3c8_row7_col5, #T_fe3c8_row7_col6, #T_fe3c8_row7_col7, #T_fe3c8_row8_col0, #T_fe3c8_row8_col1, #T_fe3c8_row8_col2, #T_fe3c8_row8_col3, #T_fe3c8_row8_col4, #T_fe3c8_row8_col5, #T_fe3c8_row8_col6, #T_fe3c8_row8_col7, #T_fe3c8_row9_col0, #T_fe3c8_row9_col1, #T_fe3c8_row9_col2, #T_fe3c8_row9_col3, #T_fe3c8_row9_col5, #T_fe3c8_row9_col6, #T_fe3c8_row9_col7, #T_fe3c8_row10_col0, #T_fe3c8_row10_col1, #T_fe3c8_row10_col2, #T_fe3c8_row10_col3, #T_fe3c8_row10_col4, #T_fe3c8_row10_col5, #T_fe3c8_row10_col6, #T_fe3c8_row10_col7, #T_fe3c8_row11_col0, #T_fe3c8_row11_col1, #T_fe3c8_row11_col2, #T_fe3c8_row11_col3, #T_fe3c8_row11_col4, #T_fe3c8_row11_col5, #T_fe3c8_row11_col6, #T_fe3c8_row11_col7, #T_fe3c8_row12_col0, #T_fe3c8_row12_col1, #T_fe3c8_row12_col2, #T_fe3c8_row12_col3, #T_fe3c8_row12_col4, #T_fe3c8_row12_col5, #T_fe3c8_row12_col6, #T_fe3c8_row12_col7, #T_fe3c8_row13_col0, #T_fe3c8_row13_col1, #T_fe3c8_row13_col2, #T_fe3c8_row13_col3, #T_fe3c8_row13_col4, #T_fe3c8_row13_col5, #T_fe3c8_row13_col6, #T_fe3c8_row13_col7, #T_fe3c8_row14_col0, #T_fe3c8_row14_col1, #T_fe3c8_row14_col2, #T_fe3c8_row14_col3, #T_fe3c8_row14_col4, #T_fe3c8_row14_col5, #T_fe3c8_row14_col6, #T_fe3c8_row14_col7, #T_fe3c8_row15_col0, #T_fe3c8_row15_col1, #T_fe3c8_row15_col2, #T_fe3c8_row15_col3, #T_fe3c8_row15_col4, #T_fe3c8_row15_col5, #T_fe3c8_row15_col6, #T_fe3c8_row15_col7 {\n  text-align: left;\n}\n#T_fe3c8_row0_col5, #T_fe3c8_row0_col6, #T_fe3c8_row0_col7, #T_fe3c8_row1_col3, #T_fe3c8_row7_col1, #T_fe3c8_row7_col2, #T_fe3c8_row9_col4 {\n  text-align: left;\n  background-color: yellow;\n}\n#T_fe3c8_row0_col8, #T_fe3c8_row1_col8, #T_fe3c8_row2_col8, #T_fe3c8_row3_col8, #T_fe3c8_row4_col8, #T_fe3c8_row5_col8, #T_fe3c8_row6_col8, #T_fe3c8_row7_col8, #T_fe3c8_row8_col8, #T_fe3c8_row9_col8, #T_fe3c8_row10_col8, #T_fe3c8_row11_col8, #T_fe3c8_row12_col8, #T_fe3c8_row13_col8, #T_fe3c8_row15_col8 {\n  text-align: left;\n  background-color: lightgrey;\n}\n#T_fe3c8_row14_col8 {\n  text-align: left;\n  background-color: yellow;\n  background-color: lightgrey;\n}\n</style>\n<table id=\"T_fe3c8\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_fe3c8_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n      <th id=\"T_fe3c8_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n      <th id=\"T_fe3c8_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n      <th id=\"T_fe3c8_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n      <th id=\"T_fe3c8_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n      <th id=\"T_fe3c8_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n      <th id=\"T_fe3c8_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n      <th id=\"T_fe3c8_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n      <th id=\"T_fe3c8_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_fe3c8_level0_row0\" class=\"row_heading level0 row0\" >nb</th>\n      <td id=\"T_fe3c8_row0_col0\" class=\"data row0 col0\" >Naive Bayes</td>\n      <td id=\"T_fe3c8_row0_col1\" class=\"data row0 col1\" >0.6504</td>\n      <td id=\"T_fe3c8_row0_col2\" class=\"data row0 col2\" >0.8275</td>\n      <td id=\"T_fe3c8_row0_col3\" class=\"data row0 col3\" >0.9746</td>\n      <td id=\"T_fe3c8_row0_col4\" class=\"data row0 col4\" >0.2562</td>\n      <td id=\"T_fe3c8_row0_col5\" class=\"data row0 col5\" >0.4057</td>\n      <td id=\"T_fe3c8_row0_col6\" class=\"data row0 col6\" >0.2627</td>\n      <td id=\"T_fe3c8_row0_col7\" class=\"data row0 col7\" >0.3810</td>\n      <td id=\"T_fe3c8_row0_col8\" class=\"data row0 col8\" >0.1600</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row1\" class=\"row_heading level0 row1\" >qda</th>\n      <td id=\"T_fe3c8_row1_col0\" class=\"data row1 col0\" >Quadratic Discriminant Analysis</td>\n      <td id=\"T_fe3c8_row1_col1\" class=\"data row1 col1\" >0.6419</td>\n      <td id=\"T_fe3c8_row1_col2\" class=\"data row1 col2\" >0.8409</td>\n      <td id=\"T_fe3c8_row1_col3\" class=\"data row1 col3\" >0.9797</td>\n      <td id=\"T_fe3c8_row1_col4\" class=\"data row1 col4\" >0.2522</td>\n      <td id=\"T_fe3c8_row1_col5\" class=\"data row1 col5\" >0.4012</td>\n      <td id=\"T_fe3c8_row1_col6\" class=\"data row1 col6\" >0.2564</td>\n      <td id=\"T_fe3c8_row1_col7\" class=\"data row1 col7\" >0.3771</td>\n      <td id=\"T_fe3c8_row1_col8\" class=\"data row1 col8\" >0.1820</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row2\" class=\"row_heading level0 row2\" >dt</th>\n      <td id=\"T_fe3c8_row2_col0\" class=\"data row2 col0\" >Decision Tree Classifier</td>\n      <td id=\"T_fe3c8_row2_col1\" class=\"data row2 col1\" >0.8281</td>\n      <td id=\"T_fe3c8_row2_col2\" class=\"data row2 col2\" >0.6184</td>\n      <td id=\"T_fe3c8_row2_col3\" class=\"data row2 col3\" >0.3165</td>\n      <td id=\"T_fe3c8_row2_col4\" class=\"data row2 col4\" >0.3051</td>\n      <td id=\"T_fe3c8_row2_col5\" class=\"data row2 col5\" >0.3107</td>\n      <td id=\"T_fe3c8_row2_col6\" class=\"data row2 col6\" >0.2125</td>\n      <td id=\"T_fe3c8_row2_col7\" class=\"data row2 col7\" >0.2126</td>\n      <td id=\"T_fe3c8_row2_col8\" class=\"data row2 col8\" >0.4280</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row3\" class=\"row_heading level0 row3\" >et</th>\n      <td id=\"T_fe3c8_row3_col0\" class=\"data row3 col0\" >Extra Trees Classifier</td>\n      <td id=\"T_fe3c8_row3_col1\" class=\"data row3 col1\" >0.8544</td>\n      <td id=\"T_fe3c8_row3_col2\" class=\"data row3 col2\" >0.7948</td>\n      <td id=\"T_fe3c8_row3_col3\" class=\"data row3 col3\" >0.2120</td>\n      <td id=\"T_fe3c8_row3_col4\" class=\"data row3 col4\" >0.3456</td>\n      <td id=\"T_fe3c8_row3_col5\" class=\"data row3 col5\" >0.2627</td>\n      <td id=\"T_fe3c8_row3_col6\" class=\"data row3 col6\" >0.1871</td>\n      <td id=\"T_fe3c8_row3_col7\" class=\"data row3 col7\" >0.1940</td>\n      <td id=\"T_fe3c8_row3_col8\" class=\"data row3 col8\" >8.0060</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row4\" class=\"row_heading level0 row4\" >rf</th>\n      <td id=\"T_fe3c8_row4_col0\" class=\"data row4 col0\" >Random Forest Classifier</td>\n      <td id=\"T_fe3c8_row4_col1\" class=\"data row4 col1\" >0.8612</td>\n      <td id=\"T_fe3c8_row4_col2\" class=\"data row4 col2\" >0.8306</td>\n      <td id=\"T_fe3c8_row4_col3\" class=\"data row4 col3\" >0.1931</td>\n      <td id=\"T_fe3c8_row4_col4\" class=\"data row4 col4\" >0.3716</td>\n      <td id=\"T_fe3c8_row4_col5\" class=\"data row4 col5\" >0.2541</td>\n      <td id=\"T_fe3c8_row4_col6\" class=\"data row4 col6\" >0.1860</td>\n      <td id=\"T_fe3c8_row4_col7\" class=\"data row4 col7\" >0.1981</td>\n      <td id=\"T_fe3c8_row4_col8\" class=\"data row4 col8\" >8.2280</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row5\" class=\"row_heading level0 row5\" >knn</th>\n      <td id=\"T_fe3c8_row5_col0\" class=\"data row5 col0\" >K Neighbors Classifier</td>\n      <td id=\"T_fe3c8_row5_col1\" class=\"data row5 col1\" >0.8578</td>\n      <td id=\"T_fe3c8_row5_col2\" class=\"data row5 col2\" >0.7630</td>\n      <td id=\"T_fe3c8_row5_col3\" class=\"data row5 col3\" >0.1905</td>\n      <td id=\"T_fe3c8_row5_col4\" class=\"data row5 col4\" >0.3511</td>\n      <td id=\"T_fe3c8_row5_col5\" class=\"data row5 col5\" >0.2469</td>\n      <td id=\"T_fe3c8_row5_col6\" class=\"data row5 col6\" >0.1760</td>\n      <td id=\"T_fe3c8_row5_col7\" class=\"data row5 col7\" >0.1861</td>\n      <td id=\"T_fe3c8_row5_col8\" class=\"data row5 col8\" >15.2360</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row6\" class=\"row_heading level0 row6\" >xgboost</th>\n      <td id=\"T_fe3c8_row6_col0\" class=\"data row6 col0\" >Extreme Gradient Boosting</td>\n      <td id=\"T_fe3c8_row6_col1\" class=\"data row6 col1\" >0.8778</td>\n      <td id=\"T_fe3c8_row6_col2\" class=\"data row6 col2\" >0.8676</td>\n      <td id=\"T_fe3c8_row6_col3\" class=\"data row6 col3\" >0.0871</td>\n      <td id=\"T_fe3c8_row6_col4\" class=\"data row6 col4\" >0.5069</td>\n      <td id=\"T_fe3c8_row6_col5\" class=\"data row6 col5\" >0.1486</td>\n      <td id=\"T_fe3c8_row6_col6\" class=\"data row6 col6\" >0.1169</td>\n      <td id=\"T_fe3c8_row6_col7\" class=\"data row6 col7\" >0.1718</td>\n      <td id=\"T_fe3c8_row6_col8\" class=\"data row6 col8\" >2.8340</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row7\" class=\"row_heading level0 row7\" >catboost</th>\n      <td id=\"T_fe3c8_row7_col0\" class=\"data row7 col0\" >CatBoost Classifier</td>\n      <td id=\"T_fe3c8_row7_col1\" class=\"data row7 col1\" >0.8786</td>\n      <td id=\"T_fe3c8_row7_col2\" class=\"data row7 col2\" >0.8691</td>\n      <td id=\"T_fe3c8_row7_col3\" class=\"data row7 col3\" >0.0822</td>\n      <td id=\"T_fe3c8_row7_col4\" class=\"data row7 col4\" >0.5277</td>\n      <td id=\"T_fe3c8_row7_col5\" class=\"data row7 col5\" >0.1421</td>\n      <td id=\"T_fe3c8_row7_col6\" class=\"data row7 col6\" >0.1129</td>\n      <td id=\"T_fe3c8_row7_col7\" class=\"data row7 col7\" >0.1722</td>\n      <td id=\"T_fe3c8_row7_col8\" class=\"data row7 col8\" >23.9560</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row8\" class=\"row_heading level0 row8\" >lda</th>\n      <td id=\"T_fe3c8_row8_col0\" class=\"data row8 col0\" >Linear Discriminant Analysis</td>\n      <td id=\"T_fe3c8_row8_col1\" class=\"data row8 col1\" >0.8761</td>\n      <td id=\"T_fe3c8_row8_col2\" class=\"data row8 col2\" >0.8349</td>\n      <td id=\"T_fe3c8_row8_col3\" class=\"data row8 col3\" >0.0385</td>\n      <td id=\"T_fe3c8_row8_col4\" class=\"data row8 col4\" >0.4339</td>\n      <td id=\"T_fe3c8_row8_col5\" class=\"data row8 col5\" >0.0707</td>\n      <td id=\"T_fe3c8_row8_col6\" class=\"data row8 col6\" >0.0518</td>\n      <td id=\"T_fe3c8_row8_col7\" class=\"data row8 col7\" >0.0995</td>\n      <td id=\"T_fe3c8_row8_col8\" class=\"data row8 col8\" >0.1820</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row9\" class=\"row_heading level0 row9\" >lightgbm</th>\n      <td id=\"T_fe3c8_row9_col0\" class=\"data row9 col0\" >Light Gradient Boosting Machine</td>\n      <td id=\"T_fe3c8_row9_col1\" class=\"data row9 col1\" >0.8784</td>\n      <td id=\"T_fe3c8_row9_col2\" class=\"data row9 col2\" >0.8683</td>\n      <td id=\"T_fe3c8_row9_col3\" class=\"data row9 col3\" >0.0361</td>\n      <td id=\"T_fe3c8_row9_col4\" class=\"data row9 col4\" >0.5537</td>\n      <td id=\"T_fe3c8_row9_col5\" class=\"data row9 col5\" >0.0677</td>\n      <td id=\"T_fe3c8_row9_col6\" class=\"data row9 col6\" >0.0535</td>\n      <td id=\"T_fe3c8_row9_col7\" class=\"data row9 col7\" >0.1179</td>\n      <td id=\"T_fe3c8_row9_col8\" class=\"data row9 col8\" >2.3080</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row10\" class=\"row_heading level0 row10\" >lr</th>\n      <td id=\"T_fe3c8_row10_col0\" class=\"data row10 col0\" >Logistic Regression</td>\n      <td id=\"T_fe3c8_row10_col1\" class=\"data row10 col1\" >0.8773</td>\n      <td id=\"T_fe3c8_row10_col2\" class=\"data row10 col2\" >0.8358</td>\n      <td id=\"T_fe3c8_row10_col3\" class=\"data row10 col3\" >0.0056</td>\n      <td id=\"T_fe3c8_row10_col4\" class=\"data row10 col4\" >0.4338</td>\n      <td id=\"T_fe3c8_row10_col5\" class=\"data row10 col5\" >0.0110</td>\n      <td id=\"T_fe3c8_row10_col6\" class=\"data row10 col6\" >0.0079</td>\n      <td id=\"T_fe3c8_row10_col7\" class=\"data row10 col7\" >0.0374</td>\n      <td id=\"T_fe3c8_row10_col8\" class=\"data row10 col8\" >1.4220</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row11\" class=\"row_heading level0 row11\" >ada</th>\n      <td id=\"T_fe3c8_row11_col0\" class=\"data row11 col0\" >Ada Boost Classifier</td>\n      <td id=\"T_fe3c8_row11_col1\" class=\"data row11 col1\" >0.8775</td>\n      <td id=\"T_fe3c8_row11_col2\" class=\"data row11 col2\" >0.8574</td>\n      <td id=\"T_fe3c8_row11_col3\" class=\"data row11 col3\" >0.0025</td>\n      <td id=\"T_fe3c8_row11_col4\" class=\"data row11 col4\" >0.5434</td>\n      <td id=\"T_fe3c8_row11_col5\" class=\"data row11 col5\" >0.0050</td>\n      <td id=\"T_fe3c8_row11_col6\" class=\"data row11 col6\" >0.0037</td>\n      <td id=\"T_fe3c8_row11_col7\" class=\"data row11 col7\" >0.0276</td>\n      <td id=\"T_fe3c8_row11_col8\" class=\"data row11 col8\" >2.3300</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row12\" class=\"row_heading level0 row12\" >gbc</th>\n      <td id=\"T_fe3c8_row12_col0\" class=\"data row12 col0\" >Gradient Boosting Classifier</td>\n      <td id=\"T_fe3c8_row12_col1\" class=\"data row12 col1\" >0.8775</td>\n      <td id=\"T_fe3c8_row12_col2\" class=\"data row12 col2\" >0.8629</td>\n      <td id=\"T_fe3c8_row12_col3\" class=\"data row12 col3\" >0.0009</td>\n      <td id=\"T_fe3c8_row12_col4\" class=\"data row12 col4\" >0.2405</td>\n      <td id=\"T_fe3c8_row12_col5\" class=\"data row12 col5\" >0.0018</td>\n      <td id=\"T_fe3c8_row12_col6\" class=\"data row12 col6\" >0.0012</td>\n      <td id=\"T_fe3c8_row12_col7\" class=\"data row12 col7\" >0.0091</td>\n      <td id=\"T_fe3c8_row12_col8\" class=\"data row12 col8\" >6.5780</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row13\" class=\"row_heading level0 row13\" >svm</th>\n      <td id=\"T_fe3c8_row13_col0\" class=\"data row13 col0\" >SVM - Linear Kernel</td>\n      <td id=\"T_fe3c8_row13_col1\" class=\"data row13 col1\" >0.8768</td>\n      <td id=\"T_fe3c8_row13_col2\" class=\"data row13 col2\" >0.7771</td>\n      <td id=\"T_fe3c8_row13_col3\" class=\"data row13 col3\" >0.0005</td>\n      <td id=\"T_fe3c8_row13_col4\" class=\"data row13 col4\" >0.0292</td>\n      <td id=\"T_fe3c8_row13_col5\" class=\"data row13 col5\" >0.0010</td>\n      <td id=\"T_fe3c8_row13_col6\" class=\"data row13 col6\" >-0.0007</td>\n      <td id=\"T_fe3c8_row13_col7\" class=\"data row13 col7\" >-0.0029</td>\n      <td id=\"T_fe3c8_row13_col8\" class=\"data row13 col8\" >0.2960</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row14\" class=\"row_heading level0 row14\" >ridge</th>\n      <td id=\"T_fe3c8_row14_col0\" class=\"data row14 col0\" >Ridge Classifier</td>\n      <td id=\"T_fe3c8_row14_col1\" class=\"data row14 col1\" >0.8776</td>\n      <td id=\"T_fe3c8_row14_col2\" class=\"data row14 col2\" >0.8349</td>\n      <td id=\"T_fe3c8_row14_col3\" class=\"data row14 col3\" >0.0000</td>\n      <td id=\"T_fe3c8_row14_col4\" class=\"data row14 col4\" >0.0000</td>\n      <td id=\"T_fe3c8_row14_col5\" class=\"data row14 col5\" >0.0000</td>\n      <td id=\"T_fe3c8_row14_col6\" class=\"data row14 col6\" >0.0000</td>\n      <td id=\"T_fe3c8_row14_col7\" class=\"data row14 col7\" >0.0000</td>\n      <td id=\"T_fe3c8_row14_col8\" class=\"data row14 col8\" >0.1480</td>\n    </tr>\n    <tr>\n      <th id=\"T_fe3c8_level0_row15\" class=\"row_heading level0 row15\" >dummy</th>\n      <td id=\"T_fe3c8_row15_col0\" class=\"data row15 col0\" >Dummy Classifier</td>\n      <td id=\"T_fe3c8_row15_col1\" class=\"data row15 col1\" >0.8776</td>\n      <td id=\"T_fe3c8_row15_col2\" class=\"data row15 col2\" >0.5000</td>\n      <td id=\"T_fe3c8_row15_col3\" class=\"data row15 col3\" >0.0000</td>\n      <td id=\"T_fe3c8_row15_col4\" class=\"data row15 col4\" >0.0000</td>\n      <td id=\"T_fe3c8_row15_col5\" class=\"data row15 col5\" >0.0000</td>\n      <td id=\"T_fe3c8_row15_col6\" class=\"data row15 col6\" >0.0000</td>\n      <td id=\"T_fe3c8_row15_col7\" class=\"data row15 col7\" >0.0000</td>\n      <td id=\"T_fe3c8_row15_col8\" class=\"data row15 col8\" >1.0500</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing:   0%|          | 0/71 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}}]},{"cell_type":"code","source":"best_models","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:00:08.973185Z","iopub.execute_input":"2024-07-14T10:00:08.973628Z","iopub.status.idle":"2024-07-14T10:00:08.982603Z","shell.execute_reply.started":"2024-07-14T10:00:08.973594Z","shell.execute_reply":"2024-07-14T10:00:08.981339Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"[GaussianNB(priors=None, var_smoothing=1e-09),\n QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,\n                               store_covariance=False, tol=0.0001),\n DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                        max_depth=None, max_features=None, max_leaf_nodes=None,\n                        min_impurity_decrease=0.0, min_samples_leaf=1,\n                        min_samples_split=2, min_weight_fraction_leaf=0.0,\n                        monotonic_cst=None, random_state=13, splitter='best')]"},"metadata":{}}]},{"cell_type":"code","source":"best_model = best_models[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:00:38.283349Z","iopub.execute_input":"2024-07-14T10:00:38.283833Z","iopub.status.idle":"2024-07-14T10:00:38.289482Z","shell.execute_reply.started":"2024-07-14T10:00:38.283795Z","shell.execute_reply":"2024-07-14T10:00:38.288157Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"markdown","source":"## create modell","metadata":{}},{"cell_type":"code","source":"catboost = create_model('catboost', fold=5)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:07:06.545514Z","iopub.execute_input":"2024-07-14T10:07:06.546028Z","iopub.status.idle":"2024-07-14T10:10:13.392413Z","shell.execute_reply.started":"2024-07-14T10:07:06.545989Z","shell.execute_reply":"2024-07-14T10:10:13.391167Z"},"trusted":true},"execution_count":65,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7de5d2658130>","text/html":"<style type=\"text/css\">\n#T_603b6_row5_col0, #T_603b6_row5_col1, #T_603b6_row5_col2, #T_603b6_row5_col3, #T_603b6_row5_col4, #T_603b6_row5_col5, #T_603b6_row5_col6 {\n  background: yellow;\n}\n</style>\n<table id=\"T_603b6\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_603b6_level0_col0\" class=\"col_heading level0 col0\" >Accuracy</th>\n      <th id=\"T_603b6_level0_col1\" class=\"col_heading level0 col1\" >AUC</th>\n      <th id=\"T_603b6_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n      <th id=\"T_603b6_level0_col3\" class=\"col_heading level0 col3\" >Prec.</th>\n      <th id=\"T_603b6_level0_col4\" class=\"col_heading level0 col4\" >F1</th>\n      <th id=\"T_603b6_level0_col5\" class=\"col_heading level0 col5\" >Kappa</th>\n      <th id=\"T_603b6_level0_col6\" class=\"col_heading level0 col6\" >MCC</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Fold</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n      <th class=\"blank col3\" >&nbsp;</th>\n      <th class=\"blank col4\" >&nbsp;</th>\n      <th class=\"blank col5\" >&nbsp;</th>\n      <th class=\"blank col6\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_603b6_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_603b6_row0_col0\" class=\"data row0 col0\" >0.8787</td>\n      <td id=\"T_603b6_row0_col1\" class=\"data row0 col1\" >0.8703</td>\n      <td id=\"T_603b6_row0_col2\" class=\"data row0 col2\" >0.0816</td>\n      <td id=\"T_603b6_row0_col3\" class=\"data row0 col3\" >0.5305</td>\n      <td id=\"T_603b6_row0_col4\" class=\"data row0 col4\" >0.1415</td>\n      <td id=\"T_603b6_row0_col5\" class=\"data row0 col5\" >0.1125</td>\n      <td id=\"T_603b6_row0_col6\" class=\"data row0 col6\" >0.1725</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_603b6_row1_col0\" class=\"data row1 col0\" >0.8776</td>\n      <td id=\"T_603b6_row1_col1\" class=\"data row1 col1\" >0.8693</td>\n      <td id=\"T_603b6_row1_col2\" class=\"data row1 col2\" >0.0733</td>\n      <td id=\"T_603b6_row1_col3\" class=\"data row1 col3\" >0.5000</td>\n      <td id=\"T_603b6_row1_col4\" class=\"data row1 col4\" >0.1278</td>\n      <td id=\"T_603b6_row1_col5\" class=\"data row1 col5\" >0.0996</td>\n      <td id=\"T_603b6_row1_col6\" class=\"data row1 col6\" >0.1557</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_603b6_row2_col0\" class=\"data row2 col0\" >0.8787</td>\n      <td id=\"T_603b6_row2_col1\" class=\"data row2 col1\" >0.8681</td>\n      <td id=\"T_603b6_row2_col2\" class=\"data row2 col2\" >0.0926</td>\n      <td id=\"T_603b6_row2_col3\" class=\"data row2 col3\" >0.5267</td>\n      <td id=\"T_603b6_row2_col4\" class=\"data row2 col4\" >0.1575</td>\n      <td id=\"T_603b6_row2_col5\" class=\"data row2 col5\" >0.1255</td>\n      <td id=\"T_603b6_row2_col6\" class=\"data row2 col6\" >0.1829</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_603b6_row3_col0\" class=\"data row3 col0\" >0.8788</td>\n      <td id=\"T_603b6_row3_col1\" class=\"data row3 col1\" >0.8675</td>\n      <td id=\"T_603b6_row3_col2\" class=\"data row3 col2\" >0.0751</td>\n      <td id=\"T_603b6_row3_col3\" class=\"data row3 col3\" >0.5353</td>\n      <td id=\"T_603b6_row3_col4\" class=\"data row3 col4\" >0.1316</td>\n      <td id=\"T_603b6_row3_col5\" class=\"data row3 col5\" >0.1047</td>\n      <td id=\"T_603b6_row3_col6\" class=\"data row3 col6\" >0.1664</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_603b6_row4_col0\" class=\"data row4 col0\" >0.8794</td>\n      <td id=\"T_603b6_row4_col1\" class=\"data row4 col1\" >0.8702</td>\n      <td id=\"T_603b6_row4_col2\" class=\"data row4 col2\" >0.0882</td>\n      <td id=\"T_603b6_row4_col3\" class=\"data row4 col3\" >0.5463</td>\n      <td id=\"T_603b6_row4_col4\" class=\"data row4 col4\" >0.1519</td>\n      <td id=\"T_603b6_row4_col5\" class=\"data row4 col5\" >0.1220</td>\n      <td id=\"T_603b6_row4_col6\" class=\"data row4 col6\" >0.1837</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row5\" class=\"row_heading level0 row5\" >Mean</th>\n      <td id=\"T_603b6_row5_col0\" class=\"data row5 col0\" >0.8786</td>\n      <td id=\"T_603b6_row5_col1\" class=\"data row5 col1\" >0.8691</td>\n      <td id=\"T_603b6_row5_col2\" class=\"data row5 col2\" >0.0822</td>\n      <td id=\"T_603b6_row5_col3\" class=\"data row5 col3\" >0.5277</td>\n      <td id=\"T_603b6_row5_col4\" class=\"data row5 col4\" >0.1421</td>\n      <td id=\"T_603b6_row5_col5\" class=\"data row5 col5\" >0.1129</td>\n      <td id=\"T_603b6_row5_col6\" class=\"data row5 col6\" >0.1722</td>\n    </tr>\n    <tr>\n      <th id=\"T_603b6_level0_row6\" class=\"row_heading level0 row6\" >Std</th>\n      <td id=\"T_603b6_row6_col0\" class=\"data row6 col0\" >0.0006</td>\n      <td id=\"T_603b6_row6_col1\" class=\"data row6 col1\" >0.0011</td>\n      <td id=\"T_603b6_row6_col2\" class=\"data row6 col2\" >0.0074</td>\n      <td id=\"T_603b6_row6_col3\" class=\"data row6 col3\" >0.0154</td>\n      <td id=\"T_603b6_row6_col4\" class=\"data row6 col4\" >0.0114</td>\n      <td id=\"T_603b6_row6_col5\" class=\"data row6 col5\" >0.0098</td>\n      <td id=\"T_603b6_row6_col6\" class=\"data row6 col6\" >0.0105</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing:   0%|          | 0/4 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}}]},{"cell_type":"markdown","source":"## Tune Model Hyperparameters","metadata":{}},{"cell_type":"code","source":"tuned_catboost = tune_model(catboost, \n                            n_iter=10,\n                            custom_grid={\n                                'n_estimators': [100, 200, 300, 400, 500],\n                                'max_depth': [10, 15, 20, None],\n                                # Removed 'max_features' as it is not a valid parameter for CatBoost\n                            },\n                            optimize='f1',\n                            fold=5)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:33:44.789628Z","iopub.execute_input":"2024-07-14T10:33:44.790609Z","iopub.status.idle":"2024-07-14T10:58:34.099557Z","shell.execute_reply.started":"2024-07-14T10:33:44.790567Z","shell.execute_reply":"2024-07-14T10:58:34.098276Z"},"trusted":true},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x7de5c67b2230>","text/html":"<style type=\"text/css\">\n#T_e9986_row5_col0, #T_e9986_row5_col1, #T_e9986_row5_col2, #T_e9986_row5_col3, #T_e9986_row5_col4, #T_e9986_row5_col5, #T_e9986_row5_col6 {\n  background: yellow;\n}\n</style>\n<table id=\"T_e9986\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_e9986_level0_col0\" class=\"col_heading level0 col0\" >Accuracy</th>\n      <th id=\"T_e9986_level0_col1\" class=\"col_heading level0 col1\" >AUC</th>\n      <th id=\"T_e9986_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n      <th id=\"T_e9986_level0_col3\" class=\"col_heading level0 col3\" >Prec.</th>\n      <th id=\"T_e9986_level0_col4\" class=\"col_heading level0 col4\" >F1</th>\n      <th id=\"T_e9986_level0_col5\" class=\"col_heading level0 col5\" >Kappa</th>\n      <th id=\"T_e9986_level0_col6\" class=\"col_heading level0 col6\" >MCC</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >Fold</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n      <th class=\"blank col3\" >&nbsp;</th>\n      <th class=\"blank col4\" >&nbsp;</th>\n      <th class=\"blank col5\" >&nbsp;</th>\n      <th class=\"blank col6\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e9986_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_e9986_row0_col0\" class=\"data row0 col0\" >0.8665</td>\n      <td id=\"T_e9986_row0_col1\" class=\"data row0 col1\" >0.8484</td>\n      <td id=\"T_e9986_row0_col2\" class=\"data row0 col2\" >0.1978</td>\n      <td id=\"T_e9986_row0_col3\" class=\"data row0 col3\" >0.4071</td>\n      <td id=\"T_e9986_row0_col4\" class=\"data row0 col4\" >0.2662</td>\n      <td id=\"T_e9986_row0_col5\" class=\"data row0 col5\" >0.2024</td>\n      <td id=\"T_e9986_row0_col6\" class=\"data row0 col6\" >0.2184</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_e9986_row1_col0\" class=\"data row1 col0\" >0.8643</td>\n      <td id=\"T_e9986_row1_col1\" class=\"data row1 col1\" >0.8442</td>\n      <td id=\"T_e9986_row1_col2\" class=\"data row1 col2\" >0.1859</td>\n      <td id=\"T_e9986_row1_col3\" class=\"data row1 col3\" >0.3870</td>\n      <td id=\"T_e9986_row1_col4\" class=\"data row1 col4\" >0.2511</td>\n      <td id=\"T_e9986_row1_col5\" class=\"data row1 col5\" >0.1865</td>\n      <td id=\"T_e9986_row1_col6\" class=\"data row1 col6\" >0.2017</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_e9986_row2_col0\" class=\"data row2 col0\" >0.8661</td>\n      <td id=\"T_e9986_row2_col1\" class=\"data row2 col1\" >0.8437</td>\n      <td id=\"T_e9986_row2_col2\" class=\"data row2 col2\" >0.2082</td>\n      <td id=\"T_e9986_row2_col3\" class=\"data row2 col3\" >0.4081</td>\n      <td id=\"T_e9986_row2_col4\" class=\"data row2 col4\" >0.2757</td>\n      <td id=\"T_e9986_row2_col5\" class=\"data row2 col5\" >0.2104</td>\n      <td id=\"T_e9986_row2_col6\" class=\"data row2 col6\" >0.2250</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_e9986_row3_col0\" class=\"data row3 col0\" >0.8653</td>\n      <td id=\"T_e9986_row3_col1\" class=\"data row3 col1\" >0.8458</td>\n      <td id=\"T_e9986_row3_col2\" class=\"data row3 col2\" >0.1985</td>\n      <td id=\"T_e9986_row3_col3\" class=\"data row3 col3\" >0.3995</td>\n      <td id=\"T_e9986_row3_col4\" class=\"data row3 col4\" >0.2652</td>\n      <td id=\"T_e9986_row3_col5\" class=\"data row3 col5\" >0.2002</td>\n      <td id=\"T_e9986_row3_col6\" class=\"data row3 col6\" >0.2151</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_e9986_row4_col0\" class=\"data row4 col0\" >0.8663</td>\n      <td id=\"T_e9986_row4_col1\" class=\"data row4 col1\" >0.8465</td>\n      <td id=\"T_e9986_row4_col2\" class=\"data row4 col2\" >0.1983</td>\n      <td id=\"T_e9986_row4_col3\" class=\"data row4 col3\" >0.4058</td>\n      <td id=\"T_e9986_row4_col4\" class=\"data row4 col4\" >0.2664</td>\n      <td id=\"T_e9986_row4_col5\" class=\"data row4 col5\" >0.2023</td>\n      <td id=\"T_e9986_row4_col6\" class=\"data row4 col6\" >0.2181</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row5\" class=\"row_heading level0 row5\" >Mean</th>\n      <td id=\"T_e9986_row5_col0\" class=\"data row5 col0\" >0.8657</td>\n      <td id=\"T_e9986_row5_col1\" class=\"data row5 col1\" >0.8457</td>\n      <td id=\"T_e9986_row5_col2\" class=\"data row5 col2\" >0.1977</td>\n      <td id=\"T_e9986_row5_col3\" class=\"data row5 col3\" >0.4015</td>\n      <td id=\"T_e9986_row5_col4\" class=\"data row5 col4\" >0.2649</td>\n      <td id=\"T_e9986_row5_col5\" class=\"data row5 col5\" >0.2004</td>\n      <td id=\"T_e9986_row5_col6\" class=\"data row5 col6\" >0.2157</td>\n    </tr>\n    <tr>\n      <th id=\"T_e9986_level0_row6\" class=\"row_heading level0 row6\" >Std</th>\n      <td id=\"T_e9986_row6_col0\" class=\"data row6 col0\" >0.0008</td>\n      <td id=\"T_e9986_row6_col1\" class=\"data row6 col1\" >0.0017</td>\n      <td id=\"T_e9986_row6_col2\" class=\"data row6 col2\" >0.0071</td>\n      <td id=\"T_e9986_row6_col3\" class=\"data row6 col3\" >0.0078</td>\n      <td id=\"T_e9986_row6_col4\" class=\"data row6 col4\" >0.0079</td>\n      <td id=\"T_e9986_row6_col5\" class=\"data row6 col5\" >0.0078</td>\n      <td id=\"T_e9986_row6_col6\" class=\"data row6 col6\" >0.0077</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Processing:   0%|          | 0/7 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","output_type":"stream"}]},{"cell_type":"code","source":"plot_model(tuned_catboost)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:59:50.550461Z","iopub.execute_input":"2024-07-14T10:59:50.550956Z","iopub.status.idle":"2024-07-14T10:59:52.571322Z","shell.execute_reply.started":"2024-07-14T10:59:50.550913Z","shell.execute_reply":"2024-07-14T10:59:52.570178Z"},"trusted":true},"execution_count":75,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plot_model(tuned_catboost, plot='error')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T10:59:53.787590Z","iopub.execute_input":"2024-07-14T10:59:53.788052Z","iopub.status.idle":"2024-07-14T10:59:55.776067Z","shell.execute_reply.started":"2024-07-14T10:59:53.788018Z","shell.execute_reply":"2024-07-14T10:59:55.774540Z"},"trusted":true},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plot_model(tuned_catboost, plot='confusion_matrix')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T11:00:00.173219Z","iopub.execute_input":"2024-07-14T11:00:00.173747Z","iopub.status.idle":"2024-07-14T11:00:02.000026Z","shell.execute_reply.started":"2024-07-14T11:00:00.173707Z","shell.execute_reply":"2024-07-14T11:00:01.998404Z"},"trusted":true},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plot_model(tuned_catboost, plot='feature')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T11:00:14.720901Z","iopub.execute_input":"2024-07-14T11:00:14.721338Z","iopub.status.idle":"2024-07-14T11:00:16.078468Z","shell.execute_reply.started":"2024-07-14T11:00:14.721305Z","shell.execute_reply":"2024-07-14T11:00:16.077356Z"},"trusted":true},"execution_count":78,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
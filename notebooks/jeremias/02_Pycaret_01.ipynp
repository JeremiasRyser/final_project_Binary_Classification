{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4217c773",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-14T07:12:15.404475Z",
     "iopub.status.busy": "2024-07-14T07:12:15.404068Z",
     "iopub.status.idle": "2024-07-14T07:12:16.448782Z",
     "shell.execute_reply": "2024-07-14T07:12:16.447125Z"
    },
    "papermill": {
     "duration": 1.058607,
     "end_time": "2024-07-14T07:12:16.451463",
     "exception": false,
     "start_time": "2024-07-14T07:12:15.392856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e7/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e7/train.csv\n",
      "/kaggle/input/playground-series-s4e7/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7d36377",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:12:16.470794Z",
     "iopub.status.busy": "2024-07-14T07:12:16.470253Z",
     "iopub.status.idle": "2024-07-14T07:13:08.457048Z",
     "shell.execute_reply": "2024-07-14T07:13:08.455182Z"
    },
    "papermill": {
     "duration": 51.999386,
     "end_time": "2024-07-14T07:13:08.459933",
     "exception": false,
     "start_time": "2024-07-14T07:12:16.460547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pycaret\r\n",
      "  Downloading pycaret-3.3.2-py3-none-any.whl.metadata (17 kB)\r\n",
      "Requirement already satisfied: ipython>=5.5.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (8.20.0)\r\n",
      "Requirement already satisfied: ipywidgets>=7.6.5 in /opt/conda/lib/python3.10/site-packages (from pycaret) (7.7.1)\r\n",
      "Requirement already satisfied: tqdm>=4.62.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (4.66.4)\r\n",
      "Requirement already satisfied: numpy<1.27,>=1.21 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.26.4)\r\n",
      "Collecting pandas<2.2.0 (from pycaret)\r\n",
      "  Downloading pandas-2.1.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: jinja2>=3 in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.1.2)\r\n",
      "Requirement already satisfied: scipy<=1.11.4,>=1.6.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.11.4)\r\n",
      "Collecting joblib<1.4,>=1.2.0 (from pycaret)\r\n",
      "  Downloading joblib-1.3.2-py3-none-any.whl.metadata (5.4 kB)\r\n",
      "Collecting scikit-learn>1.4.0 (from pycaret)\r\n",
      "  Downloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "Collecting pyod>=1.1.3 (from pycaret)\r\n",
      "  Downloading pyod-2.0.1.tar.gz (163 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m163.8/163.8 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: imbalanced-learn>=0.12.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.12.3)\r\n",
      "Requirement already satisfied: category-encoders>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.6.3)\r\n",
      "Requirement already satisfied: lightgbm>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (4.2.0)\r\n",
      "Requirement already satisfied: numba>=0.55.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.58.1)\r\n",
      "Requirement already satisfied: requests>=2.27.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.32.3)\r\n",
      "Requirement already satisfied: psutil>=5.9.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.9.3)\r\n",
      "Requirement already satisfied: markupsafe>=2.0.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.1.3)\r\n",
      "Requirement already satisfied: importlib-metadata>=4.12.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (6.11.0)\r\n",
      "Requirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.9.2)\r\n",
      "Requirement already satisfied: cloudpickle in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.2.1)\r\n",
      "Requirement already satisfied: deprecation>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (2.1.0)\r\n",
      "Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.4.1)\r\n",
      "Requirement already satisfied: matplotlib<3.8.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (3.7.5)\r\n",
      "Requirement already satisfied: scikit-plot>=0.3.7 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.3.7)\r\n",
      "Requirement already satisfied: yellowbrick>=1.4 in /opt/conda/lib/python3.10/site-packages (from pycaret) (1.5)\r\n",
      "Requirement already satisfied: plotly>=5.14.0 in /opt/conda/lib/python3.10/site-packages (from pycaret) (5.18.0)\r\n",
      "Collecting kaleido>=0.2.1 (from pycaret)\r\n",
      "  Downloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl.metadata (15 kB)\r\n",
      "Collecting schemdraw==0.15 (from pycaret)\r\n",
      "  Downloading schemdraw-0.15-py3-none-any.whl.metadata (2.2 kB)\r\n",
      "Collecting plotly-resampler>=0.8.3.1 (from pycaret)\r\n",
      "  Downloading plotly_resampler-0.10.0-py3-none-any.whl.metadata (13 kB)\r\n",
      "Requirement already satisfied: statsmodels>=0.12.1 in /opt/conda/lib/python3.10/site-packages (from pycaret) (0.14.1)\r\n",
      "Collecting sktime==0.26.0 (from pycaret)\r\n",
      "  Downloading sktime-0.26.0-py3-none-any.whl.metadata (29 kB)\r\n",
      "Collecting tbats>=1.1.3 (from pycaret)\r\n",
      "  Downloading tbats-1.1.3-py3-none-any.whl.metadata (3.8 kB)\r\n",
      "Collecting pmdarima>=2.0.4 (from pycaret)\r\n",
      "  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (7.8 kB)\r\n",
      "Collecting wurlitzer (from pycaret)\r\n",
      "  Downloading wurlitzer-3.1.1-py3-none-any.whl.metadata (2.5 kB)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from sktime==0.26.0->pycaret) (21.3)\r\n",
      "Collecting scikit-base<0.8.0 (from sktime==0.26.0->pycaret)\r\n",
      "  Downloading scikit_base-0.7.8-py3-none-any.whl.metadata (8.8 kB)\r\n",
      "Collecting scikit-learn>1.4.0 (from pycaret)\r\n",
      "  Downloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: patsy>=0.5.1 in /opt/conda/lib/python3.10/site-packages (from category-encoders>=2.4.0->pycaret) (0.5.6)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from imbalanced-learn>=0.12.0->pycaret) (3.2.0)\r\n",
      "Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata>=4.12.0->pycaret) (3.17.0)\r\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (5.1.1)\r\n",
      "Requirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.19.1)\r\n",
      "Requirement already satisfied: matplotlib-inline in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.1.6)\r\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (3.0.42)\r\n",
      "Requirement already satisfied: pygments>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (2.17.2)\r\n",
      "Requirement already satisfied: stack-data in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (0.6.2)\r\n",
      "Requirement already satisfied: traitlets>=5 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (5.9.0)\r\n",
      "Requirement already satisfied: exceptiongroup in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (1.2.0)\r\n",
      "Requirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.10/site-packages (from ipython>=5.5.0->pycaret) (4.8.0)\r\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (6.28.0)\r\n",
      "Requirement already satisfied: ipython-genutils~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (0.2.0)\r\n",
      "Requirement already satisfied: widgetsnbextension~=3.6.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (3.6.7)\r\n",
      "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from ipywidgets>=7.6.5->pycaret) (3.0.9)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (1.4.5)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib<3.8.0->pycaret) (2.9.0.post0)\r\n",
      "Requirement already satisfied: fastjsonschema in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (2.19.1)\r\n",
      "Requirement already satisfied: jsonschema>=2.6 in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (4.20.0)\r\n",
      "Requirement already satisfied: jupyter-core in /opt/conda/lib/python3.10/site-packages (from nbformat>=4.2.0->pycaret) (5.7.1)\r\n",
      "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.55.0->pycaret) (0.41.1)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas<2.2.0->pycaret) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas<2.2.0->pycaret) (2023.4)\r\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly>=5.14.0->pycaret) (8.2.3)\r\n",
      "Collecting dash>=2.9.0 (from plotly-resampler>=0.8.3.1->pycaret)\r\n",
      "  Downloading dash-2.17.1-py3-none-any.whl.metadata (10 kB)\r\n",
      "Requirement already satisfied: orjson<4.0.0,>=3.8.0 in /opt/conda/lib/python3.10/site-packages (from plotly-resampler>=0.8.3.1->pycaret) (3.9.10)\r\n",
      "Collecting tsdownsample>=0.1.3 (from plotly-resampler>=0.8.3.1->pycaret)\r\n",
      "  Downloading tsdownsample-0.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.9 kB)\r\n",
      "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (3.0.8)\r\n",
      "Requirement already satisfied: urllib3 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (1.26.18)\r\n",
      "Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /opt/conda/lib/python3.10/site-packages (from pmdarima>=2.0.4->pycaret) (69.0.3)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (3.6)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.27.1->pycaret) (2024.7.4)\r\n",
      "Requirement already satisfied: Flask<3.1,>=1.0.4 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.3)\r\n",
      "Requirement already satisfied: Werkzeug<3.1 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.3)\r\n",
      "Collecting dash-html-components==2.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\r\n",
      "  Downloading dash_html_components-2.0.0-py3-none-any.whl.metadata (3.8 kB)\r\n",
      "Collecting dash-core-components==2.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\r\n",
      "  Downloading dash_core_components-2.0.0-py3-none-any.whl.metadata (2.9 kB)\r\n",
      "Collecting dash-table==5.0.0 (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret)\r\n",
      "  Downloading dash_table-5.0.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: typing-extensions>=4.1.1 in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (4.9.0)\r\n",
      "Requirement already satisfied: retrying in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.3.3)\r\n",
      "Requirement already satisfied: nest-asyncio in /opt/conda/lib/python3.10/site-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.5.8)\r\n",
      "Requirement already satisfied: comm>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (0.2.1)\r\n",
      "Requirement already satisfied: debugpy>=1.6.5 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (1.8.0)\r\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (7.4.9)\r\n",
      "Requirement already satisfied: pyzmq>=24 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (24.0.1)\r\n",
      "Requirement already satisfied: tornado>=6.1 in /opt/conda/lib/python3.10/site-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.3.3)\r\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /opt/conda/lib/python3.10/site-packages (from jedi>=0.16->ipython>=5.5.0->pycaret) (0.8.3)\r\n",
      "Requirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (23.2.0)\r\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (2023.12.1)\r\n",
      "Requirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.32.1)\r\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.10/site-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.16.2)\r\n",
      "Requirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.10/site-packages (from jupyter-core->nbformat>=4.2.0->pycaret) (3.11.0)\r\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from patsy>=0.5.1->category-encoders>=2.4.0->pycaret) (1.16.0)\r\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.10/site-packages (from pexpect>4.3->ipython>=5.5.0->pycaret) (0.7.0)\r\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=5.5.0->pycaret) (0.2.13)\r\n",
      "Requirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.10/site-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.4)\r\n",
      "Requirement already satisfied: executing>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (2.0.1)\r\n",
      "Requirement already satisfied: asttokens>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (2.4.1)\r\n",
      "Requirement already satisfied: pure-eval in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=5.5.0->pycaret) (0.2.2)\r\n",
      "Requirement already satisfied: itsdangerous>=2.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.0)\r\n",
      "Requirement already satisfied: click>=8.1.3 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (8.1.7)\r\n",
      "Requirement already satisfied: blinker>=1.6.2 in /opt/conda/lib/python3.10/site-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.8.2)\r\n",
      "Requirement already satisfied: entrypoints in /opt/conda/lib/python3.10/site-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (0.4)\r\n",
      "Requirement already satisfied: argon2-cffi in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.1.0)\r\n",
      "Requirement already satisfied: nbconvert>=5 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.4.5)\r\n",
      "Requirement already satisfied: Send2Trash>=1.8.0 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.2)\r\n",
      "Requirement already satisfied: terminado>=0.8.3 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.18.0)\r\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.19.0)\r\n",
      "Requirement already satisfied: nbclassic>=0.4.7 in /opt/conda/lib/python3.10/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.0.0)\r\n",
      "Requirement already satisfied: jupyter-server>=1.8 in /opt/conda/lib/python3.10/site-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.12.5)\r\n",
      "Requirement already satisfied: notebook-shim>=0.2.3 in /opt/conda/lib/python3.10/site-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.3)\r\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.4)\r\n",
      "Requirement already satisfied: jupyterlab-pygments in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.3.0)\r\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.1.0)\r\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.0)\r\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.6.0)\r\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.7.1)\r\n",
      "Requirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.12.2)\r\n",
      "Requirement already satisfied: nbclient<0.6.0,>=0.5.0 in /opt/conda/lib/python3.10/site-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.13)\r\n",
      "Requirement already satisfied: argon2-cffi-bindings in /opt/conda/lib/python3.10/site-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.2.0)\r\n",
      "Requirement already satisfied: anyio>=3.1.0 in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.2.0)\r\n",
      "Requirement already satisfied: jupyter-events>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.9.0)\r\n",
      "Requirement already satisfied: jupyter-server-terminals in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\r\n",
      "Requirement already satisfied: overrides in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (7.4.0)\r\n",
      "Requirement already satisfied: websocket-client in /opt/conda/lib/python3.10/site-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.7.0)\r\n",
      "Requirement already satisfied: cffi>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.16.0)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.5)\r\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\r\n",
      "Requirement already satisfied: sniffio>=1.1 in /opt/conda/lib/python3.10/site-packages (from anyio>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\r\n",
      "Requirement already satisfied: pycparser in /opt/conda/lib/python3.10/site-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.21)\r\n",
      "Requirement already satisfied: python-json-logger>=2.0.4 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.0.7)\r\n",
      "Requirement already satisfied: pyyaml>=5.3 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.0.1)\r\n",
      "Requirement already satisfied: rfc3339-validator in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.1.4)\r\n",
      "Requirement already satisfied: rfc3986-validator>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.1.1)\r\n",
      "Requirement already satisfied: fqdn in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.1)\r\n",
      "Requirement already satisfied: isoduration in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (20.11.0)\r\n",
      "Requirement already satisfied: jsonpointer>1.13 in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.4)\r\n",
      "Requirement already satisfied: uri-template in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\r\n",
      "Requirement already satisfied: webcolors>=1.11 in /opt/conda/lib/python3.10/site-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.13)\r\n",
      "Requirement already satisfied: arrow>=0.15.0 in /opt/conda/lib/python3.10/site-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\r\n",
      "Requirement already satisfied: types-python-dateutil>=2.8.10 in /opt/conda/lib/python3.10/site-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.9.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.8.19.20240106)\r\n",
      "Downloading pycaret-3.3.2-py3-none-any.whl (486 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m486.1/486.1 kB\u001b[0m \u001b[31m18.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading schemdraw-0.15-py3-none-any.whl (106 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m106.8/106.8 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading sktime-0.26.0-py3-none-any.whl (21.8 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.8/21.8 MB\u001b[0m \u001b[31m51.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading joblib-1.3.2-py3-none-any.whl (302 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.2/302.2 kB\u001b[0m \u001b[31m16.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading kaleido-0.2.1-py2.py3-none-manylinux1_x86_64.whl (79.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.9/79.9 MB\u001b[0m \u001b[31m17.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pandas-2.1.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m78.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading plotly_resampler-0.10.0-py3-none-any.whl (80 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.7/80.7 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m55.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.1/12.1 MB\u001b[0m \u001b[31m69.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tbats-1.1.3-py3-none-any.whl (44 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.0/44.0 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading wurlitzer-3.1.1-py3-none-any.whl (8.6 kB)\r\n",
      "Downloading dash-2.17.1-py3-none-any.whl (7.5 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.5/7.5 MB\u001b[0m \u001b[31m58.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\r\n",
      "Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\r\n",
      "Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\r\n",
      "Downloading scikit_base-0.7.8-py3-none-any.whl (130 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.1/130.1 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tsdownsample-0.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m52.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: pyod\r\n",
      "  Building wheel for pyod (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \bdone\r\n",
      "\u001b[?25h  Created wheel for pyod: filename=pyod-2.0.1-py3-none-any.whl size=193267 sha256=ba6179a8500d64380b90136682148a4675f31d8f1c02e267118b574132c1b8d8\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/94/75/88/b853cf33b0053b0a001dca55b74d515048b7656e736364eb57\r\n",
      "Successfully built pyod\r\n",
      "Installing collected packages: kaleido, dash-table, dash-html-components, dash-core-components, wurlitzer, tsdownsample, scikit-base, schemdraw, joblib, scikit-learn, pandas, sktime, pyod, dash, pmdarima, plotly-resampler, tbats, pycaret\r\n",
      "  Attempting uninstall: joblib\r\n",
      "    Found existing installation: joblib 1.4.2\r\n",
      "    Uninstalling joblib-1.4.2:\r\n",
      "      Successfully uninstalled joblib-1.4.2\r\n",
      "  Attempting uninstall: scikit-learn\r\n",
      "    Found existing installation: scikit-learn 1.2.2\r\n",
      "    Uninstalling scikit-learn-1.2.2:\r\n",
      "      Successfully uninstalled scikit-learn-1.2.2\r\n",
      "  Attempting uninstall: pandas\r\n",
      "    Found existing installation: pandas 2.2.2\r\n",
      "    Uninstalling pandas-2.2.2:\r\n",
      "      Successfully uninstalled pandas-2.2.2\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "beatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.2.3 which is incompatible.\r\n",
      "libpysal 4.9.2 requires packaging>=22, but you have packaging 21.3 which is incompatible.\r\n",
      "libpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "momepy 0.7.2 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "osmnx 1.9.3 requires shapely>=2.0, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "pointpats 2.5.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "spaghetti 1.7.6 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "spopt 0.6.1 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "xarray 2024.6.0 requires packaging>=23.1, but you have packaging 21.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed dash-2.17.1 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 joblib-1.3.2 kaleido-0.2.1 pandas-2.1.4 plotly-resampler-0.10.0 pmdarima-2.0.4 pycaret-3.3.2 pyod-2.0.1 schemdraw-0.15 scikit-base-0.7.8 scikit-learn-1.4.2 sktime-0.26.0 tbats-1.1.3 tsdownsample-0.1.3 wurlitzer-3.1.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install pycaret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2ea12613",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:13:08.508761Z",
     "iopub.status.busy": "2024-07-14T07:13:08.508195Z",
     "iopub.status.idle": "2024-07-14T07:13:08.515014Z",
     "shell.execute_reply": "2024-07-14T07:13:08.513654Z"
    },
    "papermill": {
     "duration": 0.03478,
     "end_time": "2024-07-14T07:13:08.517546",
     "exception": false,
     "start_time": "2024-07-14T07:13:08.482766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6462914d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:13:08.563681Z",
     "iopub.status.busy": "2024-07-14T07:13:08.563249Z",
     "iopub.status.idle": "2024-07-14T07:13:08.569388Z",
     "shell.execute_reply": "2024-07-14T07:13:08.567812Z"
    },
    "papermill": {
     "duration": 0.032573,
     "end_time": "2024-07-14T07:13:08.572624",
     "exception": false,
     "start_time": "2024-07-14T07:13:08.540051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ffea861",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:13:08.620796Z",
     "iopub.status.busy": "2024-07-14T07:13:08.620325Z",
     "iopub.status.idle": "2024-07-14T07:13:49.069123Z",
     "shell.execute_reply": "2024-07-14T07:13:49.067418Z"
    },
    "papermill": {
     "duration": 40.477738,
     "end_time": "2024-07-14T07:13:49.072909",
     "exception": false,
     "start_time": "2024-07-14T07:13:08.595171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv',index_col='id')\n",
    "df_test_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv',index_col='id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2a672cf7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:13:49.123259Z",
     "iopub.status.busy": "2024-07-14T07:13:49.122656Z",
     "iopub.status.idle": "2024-07-14T07:13:51.119213Z",
     "shell.execute_reply": "2024-07-14T07:13:51.117922Z"
    },
    "papermill": {
     "duration": 2.025445,
     "end_time": "2024-07-14T07:13:51.121969",
     "exception": false,
     "start_time": "2024-07-14T07:13:49.096524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>Response</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2899125</th>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29590.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3854901</th>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>42910.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>245</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7377384</th>\n",
       "      <td>Male</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>30375.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10901782</th>\n",
       "      <td>Female</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>217</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8099641</th>\n",
       "      <td>Male</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>45224.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "id                                                                        \n",
       "2899125   Female   41                1         28.0                   0   \n",
       "3854901   Female   40                1         28.0                   0   \n",
       "7377384     Male   31                1         18.0                   0   \n",
       "10901782  Female   24                1         37.0                   1   \n",
       "8099641     Male   33                1         28.0                   1   \n",
       "\n",
       "         Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\n",
       "id                                                                          \n",
       "2899125     1-2 Year            Yes         29590.0                 157.0   \n",
       "3854901     1-2 Year            Yes         42910.0                  13.0   \n",
       "7377384     < 1 Year            Yes         30375.0                 152.0   \n",
       "10901782    < 1 Year             No          2630.0                 152.0   \n",
       "8099641     1-2 Year             No         45224.0                 124.0   \n",
       "\n",
       "          Vintage  Response  \n",
       "id                           \n",
       "2899125        46         0  \n",
       "3854901       245         0  \n",
       "7377384        31         0  \n",
       "10901782      217         0  \n",
       "8099641       286         0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train_pycaret = df_train_raw.copy()\n",
    "df_train_pycaret = df_train_pycaret.sample(frac=0.1, random_state=42)\n",
    "df_train_pycaret.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "881a81fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:13:51.166444Z",
     "iopub.status.busy": "2024-07-14T07:13:51.166001Z",
     "iopub.status.idle": "2024-07-14T07:14:14.676405Z",
     "shell.execute_reply": "2024-07-14T07:14:14.675191Z"
    },
    "papermill": {
     "duration": 23.535882,
     "end_time": "2024-07-14T07:14:14.679380",
     "exception": false,
     "start_time": "2024-07-14T07:13:51.143498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_a8251_row9_col1 {\n",
       "  background-color: lightgreen;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_a8251\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_a8251_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
       "      <th id=\"T_a8251_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_a8251_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
       "      <td id=\"T_a8251_row0_col1\" class=\"data row0 col1\" >123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_a8251_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
       "      <td id=\"T_a8251_row1_col1\" class=\"data row1 col1\" >Response</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_a8251_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
       "      <td id=\"T_a8251_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_a8251_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
       "      <td id=\"T_a8251_row3_col1\" class=\"data row3 col1\" >(1150480, 11)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_a8251_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
       "      <td id=\"T_a8251_row4_col1\" class=\"data row4 col1\" >(1150480, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_a8251_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
       "      <td id=\"T_a8251_row5_col1\" class=\"data row5 col1\" >(805336, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_a8251_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
       "      <td id=\"T_a8251_row6_col1\" class=\"data row6 col1\" >(345144, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_a8251_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
       "      <td id=\"T_a8251_row7_col1\" class=\"data row7 col1\" >7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_a8251_row8_col0\" class=\"data row8 col0\" >Categorical features</td>\n",
       "      <td id=\"T_a8251_row8_col1\" class=\"data row8 col1\" >3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_a8251_row9_col0\" class=\"data row9 col0\" >Preprocess</td>\n",
       "      <td id=\"T_a8251_row9_col1\" class=\"data row9 col1\" >True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
       "      <td id=\"T_a8251_row10_col0\" class=\"data row10 col0\" >Imputation type</td>\n",
       "      <td id=\"T_a8251_row10_col1\" class=\"data row10 col1\" >simple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
       "      <td id=\"T_a8251_row11_col0\" class=\"data row11 col0\" >Numeric imputation</td>\n",
       "      <td id=\"T_a8251_row11_col1\" class=\"data row11 col1\" >mean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
       "      <td id=\"T_a8251_row12_col0\" class=\"data row12 col0\" >Categorical imputation</td>\n",
       "      <td id=\"T_a8251_row12_col1\" class=\"data row12 col1\" >mode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
       "      <td id=\"T_a8251_row13_col0\" class=\"data row13 col0\" >Maximum one-hot encoding</td>\n",
       "      <td id=\"T_a8251_row13_col1\" class=\"data row13 col1\" >25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
       "      <td id=\"T_a8251_row14_col0\" class=\"data row14 col0\" >Encoding method</td>\n",
       "      <td id=\"T_a8251_row14_col1\" class=\"data row14 col1\" >None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
       "      <td id=\"T_a8251_row15_col0\" class=\"data row15 col0\" >Fold Generator</td>\n",
       "      <td id=\"T_a8251_row15_col1\" class=\"data row15 col1\" >StratifiedKFold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
       "      <td id=\"T_a8251_row16_col0\" class=\"data row16 col0\" >Fold Number</td>\n",
       "      <td id=\"T_a8251_row16_col1\" class=\"data row16 col1\" >10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
       "      <td id=\"T_a8251_row17_col0\" class=\"data row17 col0\" >CPU Jobs</td>\n",
       "      <td id=\"T_a8251_row17_col1\" class=\"data row17 col1\" >-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
       "      <td id=\"T_a8251_row18_col0\" class=\"data row18 col0\" >Use GPU</td>\n",
       "      <td id=\"T_a8251_row18_col1\" class=\"data row18 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
       "      <td id=\"T_a8251_row19_col0\" class=\"data row19 col0\" >Log Experiment</td>\n",
       "      <td id=\"T_a8251_row19_col1\" class=\"data row19 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
       "      <td id=\"T_a8251_row20_col0\" class=\"data row20 col0\" >Experiment Name</td>\n",
       "      <td id=\"T_a8251_row20_col1\" class=\"data row20 col1\" >clf-default-name</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_a8251_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
       "      <td id=\"T_a8251_row21_col0\" class=\"data row21 col0\" >USI</td>\n",
       "      <td id=\"T_a8251_row21_col1\" class=\"data row21 col1\" >20d0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x78869e68e9b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pycaret.classification import *\n",
    "s = setup(df_train_pycaret, target = 'Response', session_id = 123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef2ea11c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T07:14:14.725177Z",
     "iopub.status.busy": "2024-07-14T07:14:14.724796Z",
     "iopub.status.idle": "2024-07-14T08:30:43.438301Z",
     "shell.execute_reply": "2024-07-14T08:30:43.437020Z"
    },
    "papermill": {
     "duration": 4588.739415,
     "end_time": "2024-07-14T08:30:43.441161",
     "exception": false,
     "start_time": "2024-07-14T07:14:14.701746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_be82c th {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_be82c_row0_col0, #T_be82c_row0_col3, #T_be82c_row0_col4, #T_be82c_row0_col5, #T_be82c_row0_col6, #T_be82c_row0_col7, #T_be82c_row1_col0, #T_be82c_row1_col1, #T_be82c_row1_col2, #T_be82c_row1_col3, #T_be82c_row1_col5, #T_be82c_row1_col6, #T_be82c_row1_col7, #T_be82c_row2_col0, #T_be82c_row2_col1, #T_be82c_row2_col2, #T_be82c_row2_col3, #T_be82c_row2_col4, #T_be82c_row2_col5, #T_be82c_row2_col6, #T_be82c_row2_col7, #T_be82c_row3_col0, #T_be82c_row3_col1, #T_be82c_row3_col2, #T_be82c_row3_col3, #T_be82c_row3_col4, #T_be82c_row3_col5, #T_be82c_row3_col6, #T_be82c_row3_col7, #T_be82c_row4_col0, #T_be82c_row4_col1, #T_be82c_row4_col2, #T_be82c_row4_col3, #T_be82c_row4_col4, #T_be82c_row4_col5, #T_be82c_row4_col6, #T_be82c_row4_col7, #T_be82c_row5_col0, #T_be82c_row5_col1, #T_be82c_row5_col2, #T_be82c_row5_col3, #T_be82c_row5_col4, #T_be82c_row5_col5, #T_be82c_row5_col6, #T_be82c_row5_col7, #T_be82c_row6_col0, #T_be82c_row6_col1, #T_be82c_row6_col2, #T_be82c_row6_col3, #T_be82c_row6_col4, #T_be82c_row6_col5, #T_be82c_row6_col6, #T_be82c_row6_col7, #T_be82c_row7_col0, #T_be82c_row7_col1, #T_be82c_row7_col2, #T_be82c_row7_col3, #T_be82c_row7_col4, #T_be82c_row7_col5, #T_be82c_row7_col6, #T_be82c_row7_col7, #T_be82c_row8_col0, #T_be82c_row8_col1, #T_be82c_row8_col2, #T_be82c_row8_col3, #T_be82c_row8_col4, #T_be82c_row8_col5, #T_be82c_row8_col6, #T_be82c_row8_col7, #T_be82c_row9_col0, #T_be82c_row9_col1, #T_be82c_row9_col2, #T_be82c_row9_col3, #T_be82c_row9_col4, #T_be82c_row9_col5, #T_be82c_row9_col6, #T_be82c_row9_col7, #T_be82c_row10_col0, #T_be82c_row10_col1, #T_be82c_row10_col2, #T_be82c_row10_col3, #T_be82c_row10_col4, #T_be82c_row10_col5, #T_be82c_row10_col6, #T_be82c_row10_col7, #T_be82c_row11_col0, #T_be82c_row11_col1, #T_be82c_row11_col2, #T_be82c_row11_col3, #T_be82c_row11_col4, #T_be82c_row11_col5, #T_be82c_row11_col6, #T_be82c_row11_col7, #T_be82c_row12_col0, #T_be82c_row12_col1, #T_be82c_row12_col2, #T_be82c_row12_col3, #T_be82c_row12_col4, #T_be82c_row12_col5, #T_be82c_row12_col6, #T_be82c_row12_col7, #T_be82c_row13_col0, #T_be82c_row13_col1, #T_be82c_row13_col2, #T_be82c_row13_col3, #T_be82c_row13_col4, #T_be82c_row13_col5, #T_be82c_row13_col6, #T_be82c_row13_col7, #T_be82c_row14_col0, #T_be82c_row14_col1, #T_be82c_row14_col2, #T_be82c_row14_col4 {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_be82c_row0_col1, #T_be82c_row0_col2, #T_be82c_row1_col4, #T_be82c_row14_col3, #T_be82c_row14_col5, #T_be82c_row14_col6, #T_be82c_row14_col7 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "}\n",
       "#T_be82c_row0_col8, #T_be82c_row1_col8, #T_be82c_row3_col8, #T_be82c_row4_col8, #T_be82c_row5_col8, #T_be82c_row6_col8, #T_be82c_row7_col8, #T_be82c_row8_col8, #T_be82c_row9_col8, #T_be82c_row10_col8, #T_be82c_row11_col8, #T_be82c_row12_col8, #T_be82c_row13_col8, #T_be82c_row14_col8 {\n",
       "  text-align: left;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "#T_be82c_row2_col8 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_be82c\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_be82c_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_be82c_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_be82c_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
       "      <th id=\"T_be82c_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_be82c_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
       "      <th id=\"T_be82c_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
       "      <th id=\"T_be82c_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
       "      <th id=\"T_be82c_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
       "      <th id=\"T_be82c_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row0\" class=\"row_heading level0 row0\" >catboost</th>\n",
       "      <td id=\"T_be82c_row0_col0\" class=\"data row0 col0\" >CatBoost Classifier</td>\n",
       "      <td id=\"T_be82c_row0_col1\" class=\"data row0 col1\" >0.8801</td>\n",
       "      <td id=\"T_be82c_row0_col2\" class=\"data row0 col2\" >0.8775</td>\n",
       "      <td id=\"T_be82c_row0_col3\" class=\"data row0 col3\" >0.1182</td>\n",
       "      <td id=\"T_be82c_row0_col4\" class=\"data row0 col4\" >0.5630</td>\n",
       "      <td id=\"T_be82c_row0_col5\" class=\"data row0 col5\" >0.1954</td>\n",
       "      <td id=\"T_be82c_row0_col6\" class=\"data row0 col6\" >0.1595</td>\n",
       "      <td id=\"T_be82c_row0_col7\" class=\"data row0 col7\" >0.2181</td>\n",
       "      <td id=\"T_be82c_row0_col8\" class=\"data row0 col8\" >106.8290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row1\" class=\"row_heading level0 row1\" >lightgbm</th>\n",
       "      <td id=\"T_be82c_row1_col0\" class=\"data row1 col0\" >Light Gradient Boosting Machine</td>\n",
       "      <td id=\"T_be82c_row1_col1\" class=\"data row1 col1\" >0.8787</td>\n",
       "      <td id=\"T_be82c_row1_col2\" class=\"data row1 col2\" >0.8731</td>\n",
       "      <td id=\"T_be82c_row1_col3\" class=\"data row1 col3\" >0.0529</td>\n",
       "      <td id=\"T_be82c_row1_col4\" class=\"data row1 col4\" >0.5832</td>\n",
       "      <td id=\"T_be82c_row1_col5\" class=\"data row1 col5\" >0.0970</td>\n",
       "      <td id=\"T_be82c_row1_col6\" class=\"data row1 col6\" >0.0781</td>\n",
       "      <td id=\"T_be82c_row1_col7\" class=\"data row1 col7\" >0.1487</td>\n",
       "      <td id=\"T_be82c_row1_col8\" class=\"data row1 col8\" >13.0300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row2\" class=\"row_heading level0 row2\" >ridge</th>\n",
       "      <td id=\"T_be82c_row2_col0\" class=\"data row2 col0\" >Ridge Classifier</td>\n",
       "      <td id=\"T_be82c_row2_col1\" class=\"data row2 col1\" >0.8769</td>\n",
       "      <td id=\"T_be82c_row2_col2\" class=\"data row2 col2\" >0.8374</td>\n",
       "      <td id=\"T_be82c_row2_col3\" class=\"data row2 col3\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row2_col4\" class=\"data row2 col4\" >0.0867</td>\n",
       "      <td id=\"T_be82c_row2_col5\" class=\"data row2 col5\" >0.0001</td>\n",
       "      <td id=\"T_be82c_row2_col6\" class=\"data row2 col6\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row2_col7\" class=\"data row2 col7\" >0.0006</td>\n",
       "      <td id=\"T_be82c_row2_col8\" class=\"data row2 col8\" >1.7050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row3\" class=\"row_heading level0 row3\" >gbc</th>\n",
       "      <td id=\"T_be82c_row3_col0\" class=\"data row3 col0\" >Gradient Boosting Classifier</td>\n",
       "      <td id=\"T_be82c_row3_col1\" class=\"data row3 col1\" >0.8769</td>\n",
       "      <td id=\"T_be82c_row3_col2\" class=\"data row3 col2\" >0.8644</td>\n",
       "      <td id=\"T_be82c_row3_col3\" class=\"data row3 col3\" >0.0006</td>\n",
       "      <td id=\"T_be82c_row3_col4\" class=\"data row3 col4\" >0.5331</td>\n",
       "      <td id=\"T_be82c_row3_col5\" class=\"data row3 col5\" >0.0013</td>\n",
       "      <td id=\"T_be82c_row3_col6\" class=\"data row3 col6\" >0.0010</td>\n",
       "      <td id=\"T_be82c_row3_col7\" class=\"data row3 col7\" >0.0142</td>\n",
       "      <td id=\"T_be82c_row3_col8\" class=\"data row3 col8\" >53.7250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row4\" class=\"row_heading level0 row4\" >dummy</th>\n",
       "      <td id=\"T_be82c_row4_col0\" class=\"data row4 col0\" >Dummy Classifier</td>\n",
       "      <td id=\"T_be82c_row4_col1\" class=\"data row4 col1\" >0.8769</td>\n",
       "      <td id=\"T_be82c_row4_col2\" class=\"data row4 col2\" >0.5000</td>\n",
       "      <td id=\"T_be82c_row4_col3\" class=\"data row4 col3\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row4_col4\" class=\"data row4 col4\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row4_col5\" class=\"data row4 col5\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row4_col6\" class=\"data row4 col6\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row4_col7\" class=\"data row4 col7\" >0.0000</td>\n",
       "      <td id=\"T_be82c_row4_col8\" class=\"data row4 col8\" >1.7390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row5\" class=\"row_heading level0 row5\" >ada</th>\n",
       "      <td id=\"T_be82c_row5_col0\" class=\"data row5 col0\" >Ada Boost Classifier</td>\n",
       "      <td id=\"T_be82c_row5_col1\" class=\"data row5 col1\" >0.8768</td>\n",
       "      <td id=\"T_be82c_row5_col2\" class=\"data row5 col2\" >0.8596</td>\n",
       "      <td id=\"T_be82c_row5_col3\" class=\"data row5 col3\" >0.0024</td>\n",
       "      <td id=\"T_be82c_row5_col4\" class=\"data row5 col4\" >0.4618</td>\n",
       "      <td id=\"T_be82c_row5_col5\" class=\"data row5 col5\" >0.0048</td>\n",
       "      <td id=\"T_be82c_row5_col6\" class=\"data row5 col6\" >0.0035</td>\n",
       "      <td id=\"T_be82c_row5_col7\" class=\"data row5 col7\" >0.0255</td>\n",
       "      <td id=\"T_be82c_row5_col8\" class=\"data row5 col8\" >19.8240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row6\" class=\"row_heading level0 row6\" >lr</th>\n",
       "      <td id=\"T_be82c_row6_col0\" class=\"data row6 col0\" >Logistic Regression</td>\n",
       "      <td id=\"T_be82c_row6_col1\" class=\"data row6 col1\" >0.8765</td>\n",
       "      <td id=\"T_be82c_row6_col2\" class=\"data row6 col2\" >0.8399</td>\n",
       "      <td id=\"T_be82c_row6_col3\" class=\"data row6 col3\" >0.0012</td>\n",
       "      <td id=\"T_be82c_row6_col4\" class=\"data row6 col4\" >0.2105</td>\n",
       "      <td id=\"T_be82c_row6_col5\" class=\"data row6 col5\" >0.0024</td>\n",
       "      <td id=\"T_be82c_row6_col6\" class=\"data row6 col6\" >0.0011</td>\n",
       "      <td id=\"T_be82c_row6_col7\" class=\"data row6 col7\" >0.0072</td>\n",
       "      <td id=\"T_be82c_row6_col8\" class=\"data row6 col8\" >24.8990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row7\" class=\"row_heading level0 row7\" >lda</th>\n",
       "      <td id=\"T_be82c_row7_col0\" class=\"data row7 col0\" >Linear Discriminant Analysis</td>\n",
       "      <td id=\"T_be82c_row7_col1\" class=\"data row7 col1\" >0.8763</td>\n",
       "      <td id=\"T_be82c_row7_col2\" class=\"data row7 col2\" >0.8374</td>\n",
       "      <td id=\"T_be82c_row7_col3\" class=\"data row7 col3\" >0.0074</td>\n",
       "      <td id=\"T_be82c_row7_col4\" class=\"data row7 col4\" >0.3804</td>\n",
       "      <td id=\"T_be82c_row7_col5\" class=\"data row7 col5\" >0.0144</td>\n",
       "      <td id=\"T_be82c_row7_col6\" class=\"data row7 col6\" >0.0098</td>\n",
       "      <td id=\"T_be82c_row7_col7\" class=\"data row7 col7\" >0.0382</td>\n",
       "      <td id=\"T_be82c_row7_col8\" class=\"data row7 col8\" >1.8740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row8\" class=\"row_heading level0 row8\" >rf</th>\n",
       "      <td id=\"T_be82c_row8_col0\" class=\"data row8 col0\" >Random Forest Classifier</td>\n",
       "      <td id=\"T_be82c_row8_col1\" class=\"data row8 col1\" >0.8672</td>\n",
       "      <td id=\"T_be82c_row8_col2\" class=\"data row8 col2\" >0.8461</td>\n",
       "      <td id=\"T_be82c_row8_col3\" class=\"data row8 col3\" >0.1606</td>\n",
       "      <td id=\"T_be82c_row8_col4\" class=\"data row8 col4\" >0.4022</td>\n",
       "      <td id=\"T_be82c_row8_col5\" class=\"data row8 col5\" >0.2295</td>\n",
       "      <td id=\"T_be82c_row8_col6\" class=\"data row8 col6\" >0.1713</td>\n",
       "      <td id=\"T_be82c_row8_col7\" class=\"data row8 col7\" >0.1931</td>\n",
       "      <td id=\"T_be82c_row8_col8\" class=\"data row8 col8\" >83.8390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row9\" class=\"row_heading level0 row9\" >et</th>\n",
       "      <td id=\"T_be82c_row9_col0\" class=\"data row9 col0\" >Extra Trees Classifier</td>\n",
       "      <td id=\"T_be82c_row9_col1\" class=\"data row9 col1\" >0.8611</td>\n",
       "      <td id=\"T_be82c_row9_col2\" class=\"data row9 col2\" >0.8344</td>\n",
       "      <td id=\"T_be82c_row9_col3\" class=\"data row9 col3\" >0.1830</td>\n",
       "      <td id=\"T_be82c_row9_col4\" class=\"data row9 col4\" >0.3705</td>\n",
       "      <td id=\"T_be82c_row9_col5\" class=\"data row9 col5\" >0.2450</td>\n",
       "      <td id=\"T_be82c_row9_col6\" class=\"data row9 col6\" >0.1781</td>\n",
       "      <td id=\"T_be82c_row9_col7\" class=\"data row9 col7\" >0.1916</td>\n",
       "      <td id=\"T_be82c_row9_col8\" class=\"data row9 col8\" >73.5200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row10\" class=\"row_heading level0 row10\" >knn</th>\n",
       "      <td id=\"T_be82c_row10_col0\" class=\"data row10 col0\" >K Neighbors Classifier</td>\n",
       "      <td id=\"T_be82c_row10_col1\" class=\"data row10 col1\" >0.8578</td>\n",
       "      <td id=\"T_be82c_row10_col2\" class=\"data row10 col2\" >0.6453</td>\n",
       "      <td id=\"T_be82c_row10_col3\" class=\"data row10 col3\" >0.0929</td>\n",
       "      <td id=\"T_be82c_row10_col4\" class=\"data row10 col4\" >0.2727</td>\n",
       "      <td id=\"T_be82c_row10_col5\" class=\"data row10 col5\" >0.1385</td>\n",
       "      <td id=\"T_be82c_row10_col6\" class=\"data row10 col6\" >0.0811</td>\n",
       "      <td id=\"T_be82c_row10_col7\" class=\"data row10 col7\" >0.0952</td>\n",
       "      <td id=\"T_be82c_row10_col8\" class=\"data row10 col8\" >8.3580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row11\" class=\"row_heading level0 row11\" >svm</th>\n",
       "      <td id=\"T_be82c_row11_col0\" class=\"data row11 col0\" >SVM - Linear Kernel</td>\n",
       "      <td id=\"T_be82c_row11_col1\" class=\"data row11 col1\" >0.8382</td>\n",
       "      <td id=\"T_be82c_row11_col2\" class=\"data row11 col2\" >0.5927</td>\n",
       "      <td id=\"T_be82c_row11_col3\" class=\"data row11 col3\" >0.1033</td>\n",
       "      <td id=\"T_be82c_row11_col4\" class=\"data row11 col4\" >0.1645</td>\n",
       "      <td id=\"T_be82c_row11_col5\" class=\"data row11 col5\" >0.0785</td>\n",
       "      <td id=\"T_be82c_row11_col6\" class=\"data row11 col6\" >0.0323</td>\n",
       "      <td id=\"T_be82c_row11_col7\" class=\"data row11 col7\" >0.0440</td>\n",
       "      <td id=\"T_be82c_row11_col8\" class=\"data row11 col8\" >45.5150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row12\" class=\"row_heading level0 row12\" >dt</th>\n",
       "      <td id=\"T_be82c_row12_col0\" class=\"data row12 col0\" >Decision Tree Classifier</td>\n",
       "      <td id=\"T_be82c_row12_col1\" class=\"data row12 col1\" >0.8293</td>\n",
       "      <td id=\"T_be82c_row12_col2\" class=\"data row12 col2\" >0.6171</td>\n",
       "      <td id=\"T_be82c_row12_col3\" class=\"data row12 col3\" >0.3357</td>\n",
       "      <td id=\"T_be82c_row12_col4\" class=\"data row12 col4\" >0.3173</td>\n",
       "      <td id=\"T_be82c_row12_col5\" class=\"data row12 col5\" >0.3262</td>\n",
       "      <td id=\"T_be82c_row12_col6\" class=\"data row12 col6\" >0.2286</td>\n",
       "      <td id=\"T_be82c_row12_col7\" class=\"data row12 col7\" >0.2287</td>\n",
       "      <td id=\"T_be82c_row12_col8\" class=\"data row12 col8\" >5.0750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row13\" class=\"row_heading level0 row13\" >nb</th>\n",
       "      <td id=\"T_be82c_row13_col0\" class=\"data row13 col0\" >Naive Bayes</td>\n",
       "      <td id=\"T_be82c_row13_col1\" class=\"data row13 col1\" >0.7990</td>\n",
       "      <td id=\"T_be82c_row13_col2\" class=\"data row13 col2\" >0.8191</td>\n",
       "      <td id=\"T_be82c_row13_col3\" class=\"data row13 col3\" >0.4664</td>\n",
       "      <td id=\"T_be82c_row13_col4\" class=\"data row13 col4\" >0.2980</td>\n",
       "      <td id=\"T_be82c_row13_col5\" class=\"data row13 col5\" >0.3637</td>\n",
       "      <td id=\"T_be82c_row13_col6\" class=\"data row13 col6\" >0.2511</td>\n",
       "      <td id=\"T_be82c_row13_col7\" class=\"data row13 col7\" >0.2600</td>\n",
       "      <td id=\"T_be82c_row13_col8\" class=\"data row13 col8\" >2.1360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_be82c_level0_row14\" class=\"row_heading level0 row14\" >qda</th>\n",
       "      <td id=\"T_be82c_row14_col0\" class=\"data row14 col0\" >Quadratic Discriminant Analysis</td>\n",
       "      <td id=\"T_be82c_row14_col1\" class=\"data row14 col1\" >0.7528</td>\n",
       "      <td id=\"T_be82c_row14_col2\" class=\"data row14 col2\" >0.8000</td>\n",
       "      <td id=\"T_be82c_row14_col3\" class=\"data row14 col3\" >0.6160</td>\n",
       "      <td id=\"T_be82c_row14_col4\" class=\"data row14 col4\" >0.2795</td>\n",
       "      <td id=\"T_be82c_row14_col5\" class=\"data row14 col5\" >0.3767</td>\n",
       "      <td id=\"T_be82c_row14_col6\" class=\"data row14 col6\" >0.2522</td>\n",
       "      <td id=\"T_be82c_row14_col7\" class=\"data row14 col7\" >0.2894</td>\n",
       "      <td id=\"T_be82c_row14_col8\" class=\"data row14 col8\" >1.8610</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7886bd7b25f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "07728cd5cf0742129ae9b222cabbb98e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Processing:   0%|          | 0/69 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# compare baseline models\n",
    "best = compare_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7aee9ffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T08:30:43.489637Z",
     "iopub.status.busy": "2024-07-14T08:30:43.489122Z",
     "iopub.status.idle": "2024-07-14T08:30:43.495250Z",
     "shell.execute_reply": "2024-07-14T08:30:43.494023Z"
    },
    "papermill": {
     "duration": 0.03385,
     "end_time": "2024-07-14T08:30:43.497898",
     "exception": false,
     "start_time": "2024-07-14T08:30:43.464048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pycaret.classification import ClassificationExperiment\n",
    "exp = ClassificationExperiment()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "944c2ded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T08:30:43.546147Z",
     "iopub.status.busy": "2024-07-14T08:30:43.545419Z",
     "iopub.status.idle": "2024-07-14T08:30:43.552679Z",
     "shell.execute_reply": "2024-07-14T08:30:43.551482Z"
    },
    "papermill": {
     "duration": 0.033975,
     "end_time": "2024-07-14T08:30:43.555208",
     "exception": false,
     "start_time": "2024-07-14T08:30:43.521233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pycaret.classification.oop.ClassificationExperiment"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the type of exp\n",
    "type(exp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c50acd3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T08:30:43.602744Z",
     "iopub.status.busy": "2024-07-14T08:30:43.602312Z",
     "iopub.status.idle": "2024-07-14T08:30:54.880201Z",
     "shell.execute_reply": "2024-07-14T08:30:54.878970Z"
    },
    "papermill": {
     "duration": 11.305847,
     "end_time": "2024-07-14T08:30:54.883846",
     "exception": false,
     "start_time": "2024-07-14T08:30:43.577999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_2db21_row9_col1 {\n",
       "  background-color: lightgreen;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_2db21\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_2db21_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
       "      <th id=\"T_2db21_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_2db21_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
       "      <td id=\"T_2db21_row0_col1\" class=\"data row0 col1\" >123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_2db21_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
       "      <td id=\"T_2db21_row1_col1\" class=\"data row1 col1\" >Response</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_2db21_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
       "      <td id=\"T_2db21_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_2db21_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
       "      <td id=\"T_2db21_row3_col1\" class=\"data row3 col1\" >(1150480, 11)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_2db21_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
       "      <td id=\"T_2db21_row4_col1\" class=\"data row4 col1\" >(1150480, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_2db21_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
       "      <td id=\"T_2db21_row5_col1\" class=\"data row5 col1\" >(805336, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_2db21_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
       "      <td id=\"T_2db21_row6_col1\" class=\"data row6 col1\" >(345144, 13)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_2db21_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
       "      <td id=\"T_2db21_row7_col1\" class=\"data row7 col1\" >7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_2db21_row8_col0\" class=\"data row8 col0\" >Categorical features</td>\n",
       "      <td id=\"T_2db21_row8_col1\" class=\"data row8 col1\" >3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_2db21_row9_col0\" class=\"data row9 col0\" >Preprocess</td>\n",
       "      <td id=\"T_2db21_row9_col1\" class=\"data row9 col1\" >True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
       "      <td id=\"T_2db21_row10_col0\" class=\"data row10 col0\" >Imputation type</td>\n",
       "      <td id=\"T_2db21_row10_col1\" class=\"data row10 col1\" >simple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
       "      <td id=\"T_2db21_row11_col0\" class=\"data row11 col0\" >Numeric imputation</td>\n",
       "      <td id=\"T_2db21_row11_col1\" class=\"data row11 col1\" >mean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
       "      <td id=\"T_2db21_row12_col0\" class=\"data row12 col0\" >Categorical imputation</td>\n",
       "      <td id=\"T_2db21_row12_col1\" class=\"data row12 col1\" >mode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
       "      <td id=\"T_2db21_row13_col0\" class=\"data row13 col0\" >Maximum one-hot encoding</td>\n",
       "      <td id=\"T_2db21_row13_col1\" class=\"data row13 col1\" >25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
       "      <td id=\"T_2db21_row14_col0\" class=\"data row14 col0\" >Encoding method</td>\n",
       "      <td id=\"T_2db21_row14_col1\" class=\"data row14 col1\" >None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
       "      <td id=\"T_2db21_row15_col0\" class=\"data row15 col0\" >Fold Generator</td>\n",
       "      <td id=\"T_2db21_row15_col1\" class=\"data row15 col1\" >StratifiedKFold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
       "      <td id=\"T_2db21_row16_col0\" class=\"data row16 col0\" >Fold Number</td>\n",
       "      <td id=\"T_2db21_row16_col1\" class=\"data row16 col1\" >10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
       "      <td id=\"T_2db21_row17_col0\" class=\"data row17 col0\" >CPU Jobs</td>\n",
       "      <td id=\"T_2db21_row17_col1\" class=\"data row17 col1\" >-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
       "      <td id=\"T_2db21_row18_col0\" class=\"data row18 col0\" >Use GPU</td>\n",
       "      <td id=\"T_2db21_row18_col1\" class=\"data row18 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
       "      <td id=\"T_2db21_row19_col0\" class=\"data row19 col0\" >Log Experiment</td>\n",
       "      <td id=\"T_2db21_row19_col1\" class=\"data row19 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
       "      <td id=\"T_2db21_row20_col0\" class=\"data row20 col0\" >Experiment Name</td>\n",
       "      <td id=\"T_2db21_row20_col1\" class=\"data row20 col1\" >clf-default-name</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_2db21_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
       "      <td id=\"T_2db21_row21_col0\" class=\"data row21 col0\" >USI</td>\n",
       "      <td id=\"T_2db21_row21_col1\" class=\"data row21 col1\" >8c9c</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x78869e416e90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<pycaret.classification.oop.ClassificationExperiment at 0x78869e637b50>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# init setup on exp\n",
    "exp.setup(df_train_pycaret, target = 'Response', session_id = 123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c4309420",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T08:30:54.932752Z",
     "iopub.status.busy": "2024-07-14T08:30:54.932171Z",
     "iopub.status.idle": "2024-07-14T09:47:43.686697Z",
     "shell.execute_reply": "2024-07-14T09:47:43.685270Z"
    },
    "papermill": {
     "duration": 4608.785106,
     "end_time": "2024-07-14T09:47:43.692506",
     "exception": false,
     "start_time": "2024-07-14T08:30:54.907400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_285a7 th {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_285a7_row0_col0, #T_285a7_row0_col3, #T_285a7_row0_col4, #T_285a7_row0_col5, #T_285a7_row0_col6, #T_285a7_row0_col7, #T_285a7_row1_col0, #T_285a7_row1_col1, #T_285a7_row1_col2, #T_285a7_row1_col3, #T_285a7_row1_col5, #T_285a7_row1_col6, #T_285a7_row1_col7, #T_285a7_row2_col0, #T_285a7_row2_col1, #T_285a7_row2_col2, #T_285a7_row2_col3, #T_285a7_row2_col4, #T_285a7_row2_col5, #T_285a7_row2_col6, #T_285a7_row2_col7, #T_285a7_row3_col0, #T_285a7_row3_col1, #T_285a7_row3_col2, #T_285a7_row3_col3, #T_285a7_row3_col4, #T_285a7_row3_col5, #T_285a7_row3_col6, #T_285a7_row3_col7, #T_285a7_row4_col0, #T_285a7_row4_col1, #T_285a7_row4_col2, #T_285a7_row4_col3, #T_285a7_row4_col4, #T_285a7_row4_col5, #T_285a7_row4_col6, #T_285a7_row4_col7, #T_285a7_row5_col0, #T_285a7_row5_col1, #T_285a7_row5_col2, #T_285a7_row5_col3, #T_285a7_row5_col4, #T_285a7_row5_col5, #T_285a7_row5_col6, #T_285a7_row5_col7, #T_285a7_row6_col0, #T_285a7_row6_col1, #T_285a7_row6_col2, #T_285a7_row6_col3, #T_285a7_row6_col4, #T_285a7_row6_col5, #T_285a7_row6_col6, #T_285a7_row6_col7, #T_285a7_row7_col0, #T_285a7_row7_col1, #T_285a7_row7_col2, #T_285a7_row7_col3, #T_285a7_row7_col4, #T_285a7_row7_col5, #T_285a7_row7_col6, #T_285a7_row7_col7, #T_285a7_row8_col0, #T_285a7_row8_col1, #T_285a7_row8_col2, #T_285a7_row8_col3, #T_285a7_row8_col4, #T_285a7_row8_col5, #T_285a7_row8_col6, #T_285a7_row8_col7, #T_285a7_row9_col0, #T_285a7_row9_col1, #T_285a7_row9_col2, #T_285a7_row9_col3, #T_285a7_row9_col4, #T_285a7_row9_col5, #T_285a7_row9_col6, #T_285a7_row9_col7, #T_285a7_row10_col0, #T_285a7_row10_col1, #T_285a7_row10_col2, #T_285a7_row10_col3, #T_285a7_row10_col4, #T_285a7_row10_col5, #T_285a7_row10_col6, #T_285a7_row10_col7, #T_285a7_row11_col0, #T_285a7_row11_col1, #T_285a7_row11_col2, #T_285a7_row11_col3, #T_285a7_row11_col4, #T_285a7_row11_col5, #T_285a7_row11_col6, #T_285a7_row11_col7, #T_285a7_row12_col0, #T_285a7_row12_col1, #T_285a7_row12_col2, #T_285a7_row12_col3, #T_285a7_row12_col4, #T_285a7_row12_col5, #T_285a7_row12_col6, #T_285a7_row12_col7, #T_285a7_row13_col0, #T_285a7_row13_col1, #T_285a7_row13_col2, #T_285a7_row13_col3, #T_285a7_row13_col4, #T_285a7_row13_col5, #T_285a7_row13_col6, #T_285a7_row13_col7, #T_285a7_row14_col0, #T_285a7_row14_col1, #T_285a7_row14_col2, #T_285a7_row14_col4 {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_285a7_row0_col1, #T_285a7_row0_col2, #T_285a7_row1_col4, #T_285a7_row14_col3, #T_285a7_row14_col5, #T_285a7_row14_col6, #T_285a7_row14_col7 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "}\n",
       "#T_285a7_row0_col8, #T_285a7_row1_col8, #T_285a7_row3_col8, #T_285a7_row4_col8, #T_285a7_row5_col8, #T_285a7_row6_col8, #T_285a7_row7_col8, #T_285a7_row8_col8, #T_285a7_row9_col8, #T_285a7_row10_col8, #T_285a7_row11_col8, #T_285a7_row12_col8, #T_285a7_row14_col8 {\n",
       "  text-align: left;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "#T_285a7_row2_col8, #T_285a7_row13_col8 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_285a7\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_285a7_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_285a7_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_285a7_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
       "      <th id=\"T_285a7_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_285a7_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
       "      <th id=\"T_285a7_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
       "      <th id=\"T_285a7_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
       "      <th id=\"T_285a7_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
       "      <th id=\"T_285a7_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row0\" class=\"row_heading level0 row0\" >catboost</th>\n",
       "      <td id=\"T_285a7_row0_col0\" class=\"data row0 col0\" >CatBoost Classifier</td>\n",
       "      <td id=\"T_285a7_row0_col1\" class=\"data row0 col1\" >0.8801</td>\n",
       "      <td id=\"T_285a7_row0_col2\" class=\"data row0 col2\" >0.8775</td>\n",
       "      <td id=\"T_285a7_row0_col3\" class=\"data row0 col3\" >0.1182</td>\n",
       "      <td id=\"T_285a7_row0_col4\" class=\"data row0 col4\" >0.5630</td>\n",
       "      <td id=\"T_285a7_row0_col5\" class=\"data row0 col5\" >0.1954</td>\n",
       "      <td id=\"T_285a7_row0_col6\" class=\"data row0 col6\" >0.1595</td>\n",
       "      <td id=\"T_285a7_row0_col7\" class=\"data row0 col7\" >0.2181</td>\n",
       "      <td id=\"T_285a7_row0_col8\" class=\"data row0 col8\" >106.3900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row1\" class=\"row_heading level0 row1\" >lightgbm</th>\n",
       "      <td id=\"T_285a7_row1_col0\" class=\"data row1 col0\" >Light Gradient Boosting Machine</td>\n",
       "      <td id=\"T_285a7_row1_col1\" class=\"data row1 col1\" >0.8787</td>\n",
       "      <td id=\"T_285a7_row1_col2\" class=\"data row1 col2\" >0.8731</td>\n",
       "      <td id=\"T_285a7_row1_col3\" class=\"data row1 col3\" >0.0529</td>\n",
       "      <td id=\"T_285a7_row1_col4\" class=\"data row1 col4\" >0.5832</td>\n",
       "      <td id=\"T_285a7_row1_col5\" class=\"data row1 col5\" >0.0970</td>\n",
       "      <td id=\"T_285a7_row1_col6\" class=\"data row1 col6\" >0.0781</td>\n",
       "      <td id=\"T_285a7_row1_col7\" class=\"data row1 col7\" >0.1487</td>\n",
       "      <td id=\"T_285a7_row1_col8\" class=\"data row1 col8\" >14.2030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row2\" class=\"row_heading level0 row2\" >ridge</th>\n",
       "      <td id=\"T_285a7_row2_col0\" class=\"data row2 col0\" >Ridge Classifier</td>\n",
       "      <td id=\"T_285a7_row2_col1\" class=\"data row2 col1\" >0.8769</td>\n",
       "      <td id=\"T_285a7_row2_col2\" class=\"data row2 col2\" >0.8374</td>\n",
       "      <td id=\"T_285a7_row2_col3\" class=\"data row2 col3\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row2_col4\" class=\"data row2 col4\" >0.0867</td>\n",
       "      <td id=\"T_285a7_row2_col5\" class=\"data row2 col5\" >0.0001</td>\n",
       "      <td id=\"T_285a7_row2_col6\" class=\"data row2 col6\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row2_col7\" class=\"data row2 col7\" >0.0006</td>\n",
       "      <td id=\"T_285a7_row2_col8\" class=\"data row2 col8\" >1.7240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row3\" class=\"row_heading level0 row3\" >gbc</th>\n",
       "      <td id=\"T_285a7_row3_col0\" class=\"data row3 col0\" >Gradient Boosting Classifier</td>\n",
       "      <td id=\"T_285a7_row3_col1\" class=\"data row3 col1\" >0.8769</td>\n",
       "      <td id=\"T_285a7_row3_col2\" class=\"data row3 col2\" >0.8644</td>\n",
       "      <td id=\"T_285a7_row3_col3\" class=\"data row3 col3\" >0.0006</td>\n",
       "      <td id=\"T_285a7_row3_col4\" class=\"data row3 col4\" >0.5331</td>\n",
       "      <td id=\"T_285a7_row3_col5\" class=\"data row3 col5\" >0.0013</td>\n",
       "      <td id=\"T_285a7_row3_col6\" class=\"data row3 col6\" >0.0010</td>\n",
       "      <td id=\"T_285a7_row3_col7\" class=\"data row3 col7\" >0.0142</td>\n",
       "      <td id=\"T_285a7_row3_col8\" class=\"data row3 col8\" >57.2940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row4\" class=\"row_heading level0 row4\" >dummy</th>\n",
       "      <td id=\"T_285a7_row4_col0\" class=\"data row4 col0\" >Dummy Classifier</td>\n",
       "      <td id=\"T_285a7_row4_col1\" class=\"data row4 col1\" >0.8769</td>\n",
       "      <td id=\"T_285a7_row4_col2\" class=\"data row4 col2\" >0.5000</td>\n",
       "      <td id=\"T_285a7_row4_col3\" class=\"data row4 col3\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row4_col4\" class=\"data row4 col4\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row4_col5\" class=\"data row4 col5\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row4_col6\" class=\"data row4 col6\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row4_col7\" class=\"data row4 col7\" >0.0000</td>\n",
       "      <td id=\"T_285a7_row4_col8\" class=\"data row4 col8\" >1.8810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row5\" class=\"row_heading level0 row5\" >ada</th>\n",
       "      <td id=\"T_285a7_row5_col0\" class=\"data row5 col0\" >Ada Boost Classifier</td>\n",
       "      <td id=\"T_285a7_row5_col1\" class=\"data row5 col1\" >0.8768</td>\n",
       "      <td id=\"T_285a7_row5_col2\" class=\"data row5 col2\" >0.8596</td>\n",
       "      <td id=\"T_285a7_row5_col3\" class=\"data row5 col3\" >0.0024</td>\n",
       "      <td id=\"T_285a7_row5_col4\" class=\"data row5 col4\" >0.4618</td>\n",
       "      <td id=\"T_285a7_row5_col5\" class=\"data row5 col5\" >0.0048</td>\n",
       "      <td id=\"T_285a7_row5_col6\" class=\"data row5 col6\" >0.0035</td>\n",
       "      <td id=\"T_285a7_row5_col7\" class=\"data row5 col7\" >0.0255</td>\n",
       "      <td id=\"T_285a7_row5_col8\" class=\"data row5 col8\" >19.9040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row6\" class=\"row_heading level0 row6\" >lr</th>\n",
       "      <td id=\"T_285a7_row6_col0\" class=\"data row6 col0\" >Logistic Regression</td>\n",
       "      <td id=\"T_285a7_row6_col1\" class=\"data row6 col1\" >0.8765</td>\n",
       "      <td id=\"T_285a7_row6_col2\" class=\"data row6 col2\" >0.8399</td>\n",
       "      <td id=\"T_285a7_row6_col3\" class=\"data row6 col3\" >0.0012</td>\n",
       "      <td id=\"T_285a7_row6_col4\" class=\"data row6 col4\" >0.2105</td>\n",
       "      <td id=\"T_285a7_row6_col5\" class=\"data row6 col5\" >0.0024</td>\n",
       "      <td id=\"T_285a7_row6_col6\" class=\"data row6 col6\" >0.0011</td>\n",
       "      <td id=\"T_285a7_row6_col7\" class=\"data row6 col7\" >0.0072</td>\n",
       "      <td id=\"T_285a7_row6_col8\" class=\"data row6 col8\" >24.1720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row7\" class=\"row_heading level0 row7\" >lda</th>\n",
       "      <td id=\"T_285a7_row7_col0\" class=\"data row7 col0\" >Linear Discriminant Analysis</td>\n",
       "      <td id=\"T_285a7_row7_col1\" class=\"data row7 col1\" >0.8763</td>\n",
       "      <td id=\"T_285a7_row7_col2\" class=\"data row7 col2\" >0.8374</td>\n",
       "      <td id=\"T_285a7_row7_col3\" class=\"data row7 col3\" >0.0074</td>\n",
       "      <td id=\"T_285a7_row7_col4\" class=\"data row7 col4\" >0.3804</td>\n",
       "      <td id=\"T_285a7_row7_col5\" class=\"data row7 col5\" >0.0144</td>\n",
       "      <td id=\"T_285a7_row7_col6\" class=\"data row7 col6\" >0.0098</td>\n",
       "      <td id=\"T_285a7_row7_col7\" class=\"data row7 col7\" >0.0382</td>\n",
       "      <td id=\"T_285a7_row7_col8\" class=\"data row7 col8\" >1.8660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row8\" class=\"row_heading level0 row8\" >rf</th>\n",
       "      <td id=\"T_285a7_row8_col0\" class=\"data row8 col0\" >Random Forest Classifier</td>\n",
       "      <td id=\"T_285a7_row8_col1\" class=\"data row8 col1\" >0.8672</td>\n",
       "      <td id=\"T_285a7_row8_col2\" class=\"data row8 col2\" >0.8461</td>\n",
       "      <td id=\"T_285a7_row8_col3\" class=\"data row8 col3\" >0.1606</td>\n",
       "      <td id=\"T_285a7_row8_col4\" class=\"data row8 col4\" >0.4022</td>\n",
       "      <td id=\"T_285a7_row8_col5\" class=\"data row8 col5\" >0.2295</td>\n",
       "      <td id=\"T_285a7_row8_col6\" class=\"data row8 col6\" >0.1713</td>\n",
       "      <td id=\"T_285a7_row8_col7\" class=\"data row8 col7\" >0.1931</td>\n",
       "      <td id=\"T_285a7_row8_col8\" class=\"data row8 col8\" >83.6310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row9\" class=\"row_heading level0 row9\" >et</th>\n",
       "      <td id=\"T_285a7_row9_col0\" class=\"data row9 col0\" >Extra Trees Classifier</td>\n",
       "      <td id=\"T_285a7_row9_col1\" class=\"data row9 col1\" >0.8611</td>\n",
       "      <td id=\"T_285a7_row9_col2\" class=\"data row9 col2\" >0.8344</td>\n",
       "      <td id=\"T_285a7_row9_col3\" class=\"data row9 col3\" >0.1830</td>\n",
       "      <td id=\"T_285a7_row9_col4\" class=\"data row9 col4\" >0.3705</td>\n",
       "      <td id=\"T_285a7_row9_col5\" class=\"data row9 col5\" >0.2450</td>\n",
       "      <td id=\"T_285a7_row9_col6\" class=\"data row9 col6\" >0.1781</td>\n",
       "      <td id=\"T_285a7_row9_col7\" class=\"data row9 col7\" >0.1916</td>\n",
       "      <td id=\"T_285a7_row9_col8\" class=\"data row9 col8\" >74.9870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row10\" class=\"row_heading level0 row10\" >knn</th>\n",
       "      <td id=\"T_285a7_row10_col0\" class=\"data row10 col0\" >K Neighbors Classifier</td>\n",
       "      <td id=\"T_285a7_row10_col1\" class=\"data row10 col1\" >0.8578</td>\n",
       "      <td id=\"T_285a7_row10_col2\" class=\"data row10 col2\" >0.6453</td>\n",
       "      <td id=\"T_285a7_row10_col3\" class=\"data row10 col3\" >0.0929</td>\n",
       "      <td id=\"T_285a7_row10_col4\" class=\"data row10 col4\" >0.2727</td>\n",
       "      <td id=\"T_285a7_row10_col5\" class=\"data row10 col5\" >0.1385</td>\n",
       "      <td id=\"T_285a7_row10_col6\" class=\"data row10 col6\" >0.0811</td>\n",
       "      <td id=\"T_285a7_row10_col7\" class=\"data row10 col7\" >0.0952</td>\n",
       "      <td id=\"T_285a7_row10_col8\" class=\"data row10 col8\" >8.5930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row11\" class=\"row_heading level0 row11\" >svm</th>\n",
       "      <td id=\"T_285a7_row11_col0\" class=\"data row11 col0\" >SVM - Linear Kernel</td>\n",
       "      <td id=\"T_285a7_row11_col1\" class=\"data row11 col1\" >0.8382</td>\n",
       "      <td id=\"T_285a7_row11_col2\" class=\"data row11 col2\" >0.5927</td>\n",
       "      <td id=\"T_285a7_row11_col3\" class=\"data row11 col3\" >0.1033</td>\n",
       "      <td id=\"T_285a7_row11_col4\" class=\"data row11 col4\" >0.1645</td>\n",
       "      <td id=\"T_285a7_row11_col5\" class=\"data row11 col5\" >0.0785</td>\n",
       "      <td id=\"T_285a7_row11_col6\" class=\"data row11 col6\" >0.0323</td>\n",
       "      <td id=\"T_285a7_row11_col7\" class=\"data row11 col7\" >0.0440</td>\n",
       "      <td id=\"T_285a7_row11_col8\" class=\"data row11 col8\" >42.7630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row12\" class=\"row_heading level0 row12\" >dt</th>\n",
       "      <td id=\"T_285a7_row12_col0\" class=\"data row12 col0\" >Decision Tree Classifier</td>\n",
       "      <td id=\"T_285a7_row12_col1\" class=\"data row12 col1\" >0.8293</td>\n",
       "      <td id=\"T_285a7_row12_col2\" class=\"data row12 col2\" >0.6171</td>\n",
       "      <td id=\"T_285a7_row12_col3\" class=\"data row12 col3\" >0.3357</td>\n",
       "      <td id=\"T_285a7_row12_col4\" class=\"data row12 col4\" >0.3173</td>\n",
       "      <td id=\"T_285a7_row12_col5\" class=\"data row12 col5\" >0.3262</td>\n",
       "      <td id=\"T_285a7_row12_col6\" class=\"data row12 col6\" >0.2286</td>\n",
       "      <td id=\"T_285a7_row12_col7\" class=\"data row12 col7\" >0.2287</td>\n",
       "      <td id=\"T_285a7_row12_col8\" class=\"data row12 col8\" >4.9350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row13\" class=\"row_heading level0 row13\" >nb</th>\n",
       "      <td id=\"T_285a7_row13_col0\" class=\"data row13 col0\" >Naive Bayes</td>\n",
       "      <td id=\"T_285a7_row13_col1\" class=\"data row13 col1\" >0.7990</td>\n",
       "      <td id=\"T_285a7_row13_col2\" class=\"data row13 col2\" >0.8191</td>\n",
       "      <td id=\"T_285a7_row13_col3\" class=\"data row13 col3\" >0.4664</td>\n",
       "      <td id=\"T_285a7_row13_col4\" class=\"data row13 col4\" >0.2980</td>\n",
       "      <td id=\"T_285a7_row13_col5\" class=\"data row13 col5\" >0.3637</td>\n",
       "      <td id=\"T_285a7_row13_col6\" class=\"data row13 col6\" >0.2511</td>\n",
       "      <td id=\"T_285a7_row13_col7\" class=\"data row13 col7\" >0.2600</td>\n",
       "      <td id=\"T_285a7_row13_col8\" class=\"data row13 col8\" >1.7240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_285a7_level0_row14\" class=\"row_heading level0 row14\" >qda</th>\n",
       "      <td id=\"T_285a7_row14_col0\" class=\"data row14 col0\" >Quadratic Discriminant Analysis</td>\n",
       "      <td id=\"T_285a7_row14_col1\" class=\"data row14 col1\" >0.7528</td>\n",
       "      <td id=\"T_285a7_row14_col2\" class=\"data row14 col2\" >0.8000</td>\n",
       "      <td id=\"T_285a7_row14_col3\" class=\"data row14 col3\" >0.6160</td>\n",
       "      <td id=\"T_285a7_row14_col4\" class=\"data row14 col4\" >0.2795</td>\n",
       "      <td id=\"T_285a7_row14_col5\" class=\"data row14 col5\" >0.3767</td>\n",
       "      <td id=\"T_285a7_row14_col6\" class=\"data row14 col6\" >0.2522</td>\n",
       "      <td id=\"T_285a7_row14_col7\" class=\"data row14 col7\" >0.2894</td>\n",
       "      <td id=\"T_285a7_row14_col8\" class=\"data row14 col8\" >1.8120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x78869e4c59f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "de3cc7c22219425d954c9053a48a3686",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Processing:   0%|          | 0/69 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x78869e4c7970>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compare models using OOP\n",
    "exp.compare_models()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bacadb2a",
   "metadata": {
    "papermill": {
     "duration": 0.027804,
     "end_time": "2024-07-14T09:47:43.746782",
     "exception": false,
     "start_time": "2024-07-14T09:47:43.718978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Analyze Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ac927cf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:43.800945Z",
     "iopub.status.busy": "2024-07-14T09:47:43.800420Z",
     "iopub.status.idle": "2024-07-14T09:47:47.375954Z",
     "shell.execute_reply": "2024-07-14T09:47:47.374625Z"
    },
    "papermill": {
     "duration": 3.607149,
     "end_time": "2024-07-14T09:47:47.379049",
     "exception": false,
     "start_time": "2024-07-14T09:47:43.771900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x550 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot confusion matrix\n",
    "plot_model(best, plot = 'confusion_matrix')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e7e6f182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:47.432677Z",
     "iopub.status.busy": "2024-07-14T09:47:47.431785Z",
     "iopub.status.idle": "2024-07-14T09:47:50.906967Z",
     "shell.execute_reply": "2024-07-14T09:47:50.905474Z"
    },
    "papermill": {
     "duration": 3.50522,
     "end_time": "2024-07-14T09:47:50.909771",
     "exception": false,
     "start_time": "2024-07-14T09:47:47.404551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x550 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot AUC\n",
    "plot_model(best, plot = 'auc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "60ec468c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:50.967688Z",
     "iopub.status.busy": "2024-07-14T09:47:50.966387Z",
     "iopub.status.idle": "2024-07-14T09:47:52.213953Z",
     "shell.execute_reply": "2024-07-14T09:47:52.212536Z"
    },
    "papermill": {
     "duration": 1.279825,
     "end_time": "2024-07-14T09:47:52.216888",
     "exception": false,
     "start_time": "2024-07-14T09:47:50.937063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot feature importance\n",
    "plot_model(best, plot = 'feature')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d626c8b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:52.276610Z",
     "iopub.status.busy": "2024-07-14T09:47:52.276167Z",
     "iopub.status.idle": "2024-07-14T09:47:53.123971Z",
     "shell.execute_reply": "2024-07-14T09:47:53.122671Z"
    },
    "papermill": {
     "duration": 0.882821,
     "end_time": "2024-07-14T09:47:53.127352",
     "exception": false,
     "start_time": "2024-07-14T09:47:52.244531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6590ddd3ac9042d7a444dd20a2b7bf01",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(ToggleButtons(description='Plot Type:', icons=('',), options=(('Pipeline Plot', 'pipelin…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "evaluate_model(best)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d64359b8",
   "metadata": {
    "papermill": {
     "duration": 0.029118,
     "end_time": "2024-07-14T09:47:53.186450",
     "exception": false,
     "start_time": "2024-07-14T09:47:53.157332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4f37016a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:53.246884Z",
     "iopub.status.busy": "2024-07-14T09:47:53.246368Z",
     "iopub.status.idle": "2024-07-14T09:47:56.223512Z",
     "shell.execute_reply": "2024-07-14T09:47:56.222193Z"
    },
    "papermill": {
     "duration": 3.010449,
     "end_time": "2024-07-14T09:47:56.226356",
     "exception": false,
     "start_time": "2024-07-14T09:47:53.215907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_a0483\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_a0483_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_a0483_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
       "      <th id=\"T_a0483_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
       "      <th id=\"T_a0483_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
       "      <th id=\"T_a0483_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
       "      <th id=\"T_a0483_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
       "      <th id=\"T_a0483_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
       "      <th id=\"T_a0483_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_a0483_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_a0483_row0_col0\" class=\"data row0 col0\" >CatBoost Classifier</td>\n",
       "      <td id=\"T_a0483_row0_col1\" class=\"data row0 col1\" >0.8768</td>\n",
       "      <td id=\"T_a0483_row0_col2\" class=\"data row0 col2\" >0.5012</td>\n",
       "      <td id=\"T_a0483_row0_col3\" class=\"data row0 col3\" >0.0000</td>\n",
       "      <td id=\"T_a0483_row0_col4\" class=\"data row0 col4\" >0.1667</td>\n",
       "      <td id=\"T_a0483_row0_col5\" class=\"data row0 col5\" >0.0001</td>\n",
       "      <td id=\"T_a0483_row0_col6\" class=\"data row0 col6\" >0.0000</td>\n",
       "      <td id=\"T_a0483_row0_col7\" class=\"data row0 col7\" >0.0008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7886dcee2e00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# predict on test set\n",
    "holdout_pred = predict_model(best)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9da8d49e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:56.285840Z",
     "iopub.status.busy": "2024-07-14T09:47:56.285404Z",
     "iopub.status.idle": "2024-07-14T09:47:56.504674Z",
     "shell.execute_reply": "2024-07-14T09:47:56.503468Z"
    },
    "papermill": {
     "duration": 0.25215,
     "end_time": "2024-07-14T09:47:56.507430",
     "exception": false,
     "start_time": "2024-07-14T09:47:56.255280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2899125</th>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29590.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3854901</th>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>42910.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7377384</th>\n",
       "      <td>Male</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>30375.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10901782</th>\n",
       "      <td>Female</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8099641</th>\n",
       "      <td>Male</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>45224.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "id                                                                        \n",
       "2899125   Female   41                1         28.0                   0   \n",
       "3854901   Female   40                1         28.0                   0   \n",
       "7377384     Male   31                1         18.0                   0   \n",
       "10901782  Female   24                1         37.0                   1   \n",
       "8099641     Male   33                1         28.0                   1   \n",
       "\n",
       "         Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\n",
       "id                                                                          \n",
       "2899125     1-2 Year            Yes         29590.0                 157.0   \n",
       "3854901     1-2 Year            Yes         42910.0                  13.0   \n",
       "7377384     < 1 Year            Yes         30375.0                 152.0   \n",
       "10901782    < 1 Year             No          2630.0                 152.0   \n",
       "8099641     1-2 Year             No         45224.0                 124.0   \n",
       "\n",
       "          Vintage  \n",
       "id                 \n",
       "2899125        46  \n",
       "3854901       245  \n",
       "7377384        31  \n",
       "10901782      217  \n",
       "8099641       286  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# copy data and drop Class variable\n",
    "\n",
    "df_train_pycaret_2 = df_train_pycaret.copy()\n",
    "df_train_pycaret_2.drop('Response', axis=1, inplace=True)\n",
    "df_train_pycaret_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4117f8a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:47:56.569069Z",
     "iopub.status.busy": "2024-07-14T09:47:56.568601Z",
     "iopub.status.idle": "2024-07-14T09:48:05.766182Z",
     "shell.execute_reply": "2024-07-14T09:48:05.764818Z"
    },
    "papermill": {
     "duration": 9.232554,
     "end_time": "2024-07-14T09:48:05.768963",
     "exception": false,
     "start_time": "2024-07-14T09:47:56.536409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Driving_License</th>\n",
       "      <th>Region_Code</th>\n",
       "      <th>Previously_Insured</th>\n",
       "      <th>Vehicle_Age</th>\n",
       "      <th>Vehicle_Damage</th>\n",
       "      <th>Annual_Premium</th>\n",
       "      <th>Policy_Sales_Channel</th>\n",
       "      <th>Vintage</th>\n",
       "      <th>prediction_label</th>\n",
       "      <th>prediction_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2899125</th>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>29590.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3854901</th>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>42910.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>245</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7377384</th>\n",
       "      <td>Male</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>30375.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10901782</th>\n",
       "      <td>Female</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>217</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8099641</th>\n",
       "      <td>Male</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1-2 Year</td>\n",
       "      <td>No</td>\n",
       "      <td>45224.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>0.8872</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
       "id                                                                        \n",
       "2899125   Female   41                1         28.0                   0   \n",
       "3854901   Female   40                1         28.0                   0   \n",
       "7377384     Male   31                1         18.0                   0   \n",
       "10901782  Female   24                1         37.0                   1   \n",
       "8099641     Male   33                1         28.0                   1   \n",
       "\n",
       "         Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  \\\n",
       "id                                                                          \n",
       "2899125     1-2 Year            Yes         29590.0                 157.0   \n",
       "3854901     1-2 Year            Yes         42910.0                  13.0   \n",
       "7377384     < 1 Year            Yes         30375.0                 152.0   \n",
       "10901782    < 1 Year             No          2630.0                 152.0   \n",
       "8099641     1-2 Year             No         45224.0                 124.0   \n",
       "\n",
       "          Vintage  prediction_label  prediction_score  \n",
       "id                                                     \n",
       "2899125        46                 0            0.8890  \n",
       "3854901       245                 0            0.8866  \n",
       "7377384        31                 0            0.8682  \n",
       "10901782      217                 0            0.8993  \n",
       "8099641       286                 0            0.8872  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict model on new_data\n",
    "predictions = predict_model(best, data = df_train_pycaret_2)\n",
    "predictions.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "352a6d71",
   "metadata": {
    "papermill": {
     "duration": 0.030169,
     "end_time": "2024-07-14T09:48:05.828533",
     "exception": false,
     "start_time": "2024-07-14T09:48:05.798364",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c2a0e633",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:48:05.888840Z",
     "iopub.status.busy": "2024-07-14T09:48:05.887741Z",
     "iopub.status.idle": "2024-07-14T09:48:06.217109Z",
     "shell.execute_reply": "2024-07-14T09:48:06.215866Z"
    },
    "papermill": {
     "duration": 0.36202,
     "end_time": "2024-07-14T09:48:06.219613",
     "exception": false,
     "start_time": "2024-07-14T09:48:05.857593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Saved\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(Pipeline(memory=Memory(location=None),\n",
       "          steps=[('numerical_imputer',\n",
       "                  TransformerWrapper(exclude=None,\n",
       "                                     include=['Age', 'Driving_License',\n",
       "                                              'Region_Code',\n",
       "                                              'Previously_Insured',\n",
       "                                              'Annual_Premium',\n",
       "                                              'Policy_Sales_Channel',\n",
       "                                              'Vintage'],\n",
       "                                     transformer=SimpleImputer(add_indicator=False,\n",
       "                                                               copy=True,\n",
       "                                                               fill_value=None,\n",
       "                                                               keep_empty_features=False,\n",
       "                                                               missing_values=nan,\n",
       "                                                               strategy='mean')...\n",
       "                                                                return_df=True,\n",
       "                                                                verbose=0))),\n",
       "                 ('onehot_encoding',\n",
       "                  TransformerWrapper(exclude=None, include=['Vehicle_Age'],\n",
       "                                     transformer=OneHotEncoder(cols=['Vehicle_Age'],\n",
       "                                                               drop_invariant=False,\n",
       "                                                               handle_missing='return_nan',\n",
       "                                                               handle_unknown='value',\n",
       "                                                               return_df=True,\n",
       "                                                               use_cat_names=True,\n",
       "                                                               verbose=0))),\n",
       "                 ('trained_model',\n",
       "                  <catboost.core.CatBoostClassifier object at 0x78869ea6db40>)],\n",
       "          verbose=False),\n",
       " 'my_first_pipeline.pkl')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# save pipeline\n",
    "save_model(best, 'my_first_pipeline')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "704df752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T09:48:06.282440Z",
     "iopub.status.busy": "2024-07-14T09:48:06.281244Z",
     "iopub.status.idle": "2024-07-14T09:48:06.419244Z",
     "shell.execute_reply": "2024-07-14T09:48:06.418091Z"
    },
    "papermill": {
     "duration": 0.172477,
     "end_time": "2024-07-14T09:48:06.421762",
     "exception": false,
     "start_time": "2024-07-14T09:48:06.249285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformation Pipeline and Model Successfully Loaded\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(memory=FastMemory(location=/tmp/joblib),\n",
       "         steps=[(&#x27;numerical_imputer&#x27;,\n",
       "                 TransformerWrapper(exclude=None,\n",
       "                                    include=[&#x27;Age&#x27;, &#x27;Driving_License&#x27;,\n",
       "                                             &#x27;Region_Code&#x27;,\n",
       "                                             &#x27;Previously_Insured&#x27;,\n",
       "                                             &#x27;Annual_Premium&#x27;,\n",
       "                                             &#x27;Policy_Sales_Channel&#x27;,\n",
       "                                             &#x27;Vintage&#x27;],\n",
       "                                    transformer=SimpleImputer(add_indicator=False,\n",
       "                                                              copy=True,\n",
       "                                                              fill_value=None,\n",
       "                                                              keep_empty_features=False,\n",
       "                                                              missing_values=nan,\n",
       "                                                              strat...\n",
       "                                                               return_df=True,\n",
       "                                                               verbose=0))),\n",
       "                (&#x27;onehot_encoding&#x27;,\n",
       "                 TransformerWrapper(exclude=None, include=[&#x27;Vehicle_Age&#x27;],\n",
       "                                    transformer=OneHotEncoder(cols=[&#x27;Vehicle_Age&#x27;],\n",
       "                                                              drop_invariant=False,\n",
       "                                                              handle_missing=&#x27;return_nan&#x27;,\n",
       "                                                              handle_unknown=&#x27;value&#x27;,\n",
       "                                                              return_df=True,\n",
       "                                                              use_cat_names=True,\n",
       "                                                              verbose=0))),\n",
       "                (&#x27;trained_model&#x27;,\n",
       "                 &lt;catboost.core.CatBoostClassifier object at 0x78869e82a5c0&gt;)],\n",
       "         verbose=False)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;Pipeline<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(memory=FastMemory(location=/tmp/joblib),\n",
       "         steps=[(&#x27;numerical_imputer&#x27;,\n",
       "                 TransformerWrapper(exclude=None,\n",
       "                                    include=[&#x27;Age&#x27;, &#x27;Driving_License&#x27;,\n",
       "                                             &#x27;Region_Code&#x27;,\n",
       "                                             &#x27;Previously_Insured&#x27;,\n",
       "                                             &#x27;Annual_Premium&#x27;,\n",
       "                                             &#x27;Policy_Sales_Channel&#x27;,\n",
       "                                             &#x27;Vintage&#x27;],\n",
       "                                    transformer=SimpleImputer(add_indicator=False,\n",
       "                                                              copy=True,\n",
       "                                                              fill_value=None,\n",
       "                                                              keep_empty_features=False,\n",
       "                                                              missing_values=nan,\n",
       "                                                              strat...\n",
       "                                                               return_df=True,\n",
       "                                                               verbose=0))),\n",
       "                (&#x27;onehot_encoding&#x27;,\n",
       "                 TransformerWrapper(exclude=None, include=[&#x27;Vehicle_Age&#x27;],\n",
       "                                    transformer=OneHotEncoder(cols=[&#x27;Vehicle_Age&#x27;],\n",
       "                                                              drop_invariant=False,\n",
       "                                                              handle_missing=&#x27;return_nan&#x27;,\n",
       "                                                              handle_unknown=&#x27;value&#x27;,\n",
       "                                                              return_df=True,\n",
       "                                                              use_cat_names=True,\n",
       "                                                              verbose=0))),\n",
       "                (&#x27;trained_model&#x27;,\n",
       "                 &lt;catboost.core.CatBoostClassifier object at 0x78869e82a5c0&gt;)],\n",
       "         verbose=False)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">numerical_imputer: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None,\n",
       "                   include=[&#x27;Age&#x27;, &#x27;Driving_License&#x27;, &#x27;Region_Code&#x27;,\n",
       "                            &#x27;Previously_Insured&#x27;, &#x27;Annual_Premium&#x27;,\n",
       "                            &#x27;Policy_Sales_Channel&#x27;, &#x27;Vintage&#x27;],\n",
       "                   transformer=SimpleImputer(add_indicator=False, copy=True,\n",
       "                                             fill_value=None,\n",
       "                                             keep_empty_features=False,\n",
       "                                             missing_values=nan,\n",
       "                                             strategy=&#x27;mean&#x27;))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: SimpleImputer</label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">categorical_imputer: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None,\n",
       "                   include=[&#x27;Gender&#x27;, &#x27;Vehicle_Age&#x27;, &#x27;Vehicle_Damage&#x27;],\n",
       "                   transformer=SimpleImputer(add_indicator=False, copy=True,\n",
       "                                             fill_value=None,\n",
       "                                             keep_empty_features=False,\n",
       "                                             missing_values=nan,\n",
       "                                             strategy=&#x27;most_frequent&#x27;))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: SimpleImputer</label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SimpleImputer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.impute.SimpleImputer.html\">?<span>Documentation for SimpleImputer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">ordinal_encoding: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None, include=[&#x27;Gender&#x27;, &#x27;Vehicle_Damage&#x27;],\n",
       "                   transformer=OrdinalEncoder(cols=[&#x27;Gender&#x27;, &#x27;Vehicle_Damage&#x27;],\n",
       "                                              drop_invariant=False,\n",
       "                                              handle_missing=&#x27;return_nan&#x27;,\n",
       "                                              handle_unknown=&#x27;value&#x27;,\n",
       "                                              mapping=[{&#x27;col&#x27;: &#x27;Gender&#x27;,\n",
       "                                                        &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                                                        &#x27;mapping&#x27;: Female    0\n",
       "Male      1\n",
       "NaN      -1\n",
       "dtype: int64},\n",
       "                                                       {&#x27;col&#x27;: &#x27;Vehicle_Damage&#x27;,\n",
       "                                                        &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                                                        &#x27;mapping&#x27;: No     0\n",
       "Yes    1\n",
       "NaN   -1\n",
       "dtype: int64}],\n",
       "                                              return_df=True, verbose=0))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: OrdinalEncoder</label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(cols=[&#x27;Gender&#x27;, &#x27;Vehicle_Damage&#x27;], handle_missing=&#x27;return_nan&#x27;,\n",
       "               mapping=[{&#x27;col&#x27;: &#x27;Gender&#x27;, &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                         &#x27;mapping&#x27;: Female    0\n",
       "Male      1\n",
       "NaN      -1\n",
       "dtype: int64},\n",
       "                        {&#x27;col&#x27;: &#x27;Vehicle_Damage&#x27;, &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                         &#x27;mapping&#x27;: No     0\n",
       "Yes    1\n",
       "NaN   -1\n",
       "dtype: int64}])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">OrdinalEncoder</label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(cols=[&#x27;Gender&#x27;, &#x27;Vehicle_Damage&#x27;], handle_missing=&#x27;return_nan&#x27;,\n",
       "               mapping=[{&#x27;col&#x27;: &#x27;Gender&#x27;, &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                         &#x27;mapping&#x27;: Female    0\n",
       "Male      1\n",
       "NaN      -1\n",
       "dtype: int64},\n",
       "                        {&#x27;col&#x27;: &#x27;Vehicle_Damage&#x27;, &#x27;data_type&#x27;: dtype(&#x27;O&#x27;),\n",
       "                         &#x27;mapping&#x27;: No     0\n",
       "Yes    1\n",
       "NaN   -1\n",
       "dtype: int64}])</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">onehot_encoding: TransformerWrapper</label><div class=\"sk-toggleable__content fitted\"><pre>TransformerWrapper(exclude=None, include=[&#x27;Vehicle_Age&#x27;],\n",
       "                   transformer=OneHotEncoder(cols=[&#x27;Vehicle_Age&#x27;],\n",
       "                                             drop_invariant=False,\n",
       "                                             handle_missing=&#x27;return_nan&#x27;,\n",
       "                                             handle_unknown=&#x27;value&#x27;,\n",
       "                                             return_df=True, use_cat_names=True,\n",
       "                                             verbose=0))</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">transformer: OneHotEncoder</label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(cols=[&#x27;Vehicle_Age&#x27;], handle_missing=&#x27;return_nan&#x27;,\n",
       "              use_cat_names=True)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">OneHotEncoder</label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(cols=[&#x27;Vehicle_Age&#x27;], handle_missing=&#x27;return_nan&#x27;,\n",
       "              use_cat_names=True)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">CatBoostClassifier</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;catboost.core.CatBoostClassifier object at 0x78869e82a5c0&gt;</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(memory=FastMemory(location=/tmp/joblib),\n",
       "         steps=[('numerical_imputer',\n",
       "                 TransformerWrapper(exclude=None,\n",
       "                                    include=['Age', 'Driving_License',\n",
       "                                             'Region_Code',\n",
       "                                             'Previously_Insured',\n",
       "                                             'Annual_Premium',\n",
       "                                             'Policy_Sales_Channel',\n",
       "                                             'Vintage'],\n",
       "                                    transformer=SimpleImputer(add_indicator=False,\n",
       "                                                              copy=True,\n",
       "                                                              fill_value=None,\n",
       "                                                              keep_empty_features=False,\n",
       "                                                              missing_values=nan,\n",
       "                                                              strat...\n",
       "                                                               return_df=True,\n",
       "                                                               verbose=0))),\n",
       "                ('onehot_encoding',\n",
       "                 TransformerWrapper(exclude=None, include=['Vehicle_Age'],\n",
       "                                    transformer=OneHotEncoder(cols=['Vehicle_Age'],\n",
       "                                                              drop_invariant=False,\n",
       "                                                              handle_missing='return_nan',\n",
       "                                                              handle_unknown='value',\n",
       "                                                              return_df=True,\n",
       "                                                              use_cat_names=True,\n",
       "                                                              verbose=0))),\n",
       "                ('trained_model',\n",
       "                 <catboost.core.CatBoostClassifier object at 0x78869e82a5c0>)],\n",
       "         verbose=False)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load pipeline\n",
    "loaded_best_pipeline = load_model('my_first_pipeline')\n",
    "loaded_best_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33069e55",
   "metadata": {
    "papermill": {
     "duration": 0.03438,
     "end_time": "2024-07-14T09:48:06.487515",
     "exception": false,
     "start_time": "2024-07-14T09:48:06.453135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8930475,
     "sourceId": 73291,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9357.146121,
   "end_time": "2024-07-14T09:48:09.283508",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-14T07:12:12.137387",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "07728cd5cf0742129ae9b222cabbb98e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8a43642fd5ad47bc9b1bc4f033cc526c",
        "IPY_MODEL_2abc8b163a6d46dbae5a2878f6442d12",
        "IPY_MODEL_916837e968c04837b0cc35766b5a30be"
       ],
       "layout": "IPY_MODEL_e5f84e13461f46dfa0a3f8b56663b35f"
      }
     },
     "151e3ba02f8840ba96aadef3f4c767bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "1def9b30550849f2b3fb2748bb5f3cca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5c2a8f13432f48608e6ca1d6c6d6ccf0",
       "placeholder": "​",
       "style": "IPY_MODEL_c1eba573e027459ea3245627ec1e1872",
       "value": " 69/69 [1:16:48&lt;00:00, 62.13s/it]"
      }
     },
     "2abc8b163a6d46dbae5a2878f6442d12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_affa18605fbd4255a2ace4383d43fbed",
       "max": 69.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d627980fd765474dae556de0e7b95aaf",
       "value": 69.0
      }
     },
     "41412c9808934b018fa2ea95e25e79f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "479b1fba5c2b4201a20dfbdbcee765b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4e786997c41e471d8c4671130d17ef12": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     },
     "4e99cb49229c4167b3271c908a08b16c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "502d35300357411f8d14722d92a8b529": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50e53cab871a43c588c0a36ed814d7df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ToggleButtonsStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ToggleButtonsStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "button_width": "",
       "description_width": "",
       "font_weight": ""
      }
     },
     "5aeb87c49c2c429da6eef2059287e3ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "5c2a8f13432f48608e6ca1d6c6d6ccf0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6590ddd3ac9042d7a444dd20a2b7bf01": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ad39ab7958af455e801edd85c051c3ef",
        "IPY_MODEL_718b4d71609f424695266b0db065efc3"
       ],
       "layout": "IPY_MODEL_cf5c399e38894999be074e8a3c34c296"
      }
     },
     "718b4d71609f424695266b0db065efc3": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_4e99cb49229c4167b3271c908a08b16c",
       "msg_id": "",
       "outputs": [
        {
         "data": {
          "image/png": "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4CLi4uJkt9slSfXr12e0ehfCNwwAyAZu3LihZ599Vr169TKbQ4oWLar58+dr7969GjBgAM0hgIt58MEH9dprr+nIkSN6//33zQNN//zzj1q2bKk333xT9AHfXkJCgvr376/u3bubzSFFihTR7NmztX//fg0ePJjmEMDFFC1aVK+88or++OMPTZkyRXnz5pUknT9/XuHh4RoxYgTZ+C8SExMVGRmpzp07m80hhQoV0syZM3Xw4EFFRkbSHAJkczly5FDLli311Vdf6ddff1XTpk3Nxz777DOFhYVx9Xc6/PLLL6patapTc0inTp108OBBzZ8/X/Xq1aM5BHAhXl5eatasmZYtW6bdu3c7XbSxePFi1ahRQ4cOHbKwwqwrNjbWnJaAUc4BwHWcPHnSvE1+uxa+ZQCAm4uPj1e7du308ccfm8ueffZZ7du3T507d2ZoWsDF+fj4aNCgQdq/f79at25tLn/ttdc0aNAgToTewo0bN9SxY0dNnTrVXNajRw/t27dP3bp1IxsBF+ft7a1+/fpp//79TtMdjBw5Us8995ySkpIsrC7rSkhIUNeuXTVx4kRzWdeuXbV//3716NFDXl5eFlYHICuqXLmyvv32Wy1YsEC5c+eWJO3bt0916tTR3r17La4u69q4caPq169vHlQvUqSI1qxZowULFig4ONji6gDcq4oVK2rVqlX6/PPPlSdPHknSoUOHVKdOHf32228WV5f1pDzBWKRIEQsrAQDcCfLbddEgAgBuLDExUZ07d9ZXX30lKflkyfz58zV9+nQFBARYXB2A+6lQoUJasWKFxo4day6bPHmyhg4damFVWVNSUpK6deumL7/8UlLyVbCzZs3SzJkzGQ4dcDMFChTQl19+qffee8+c933GjBmKjIykge4mhmGoZ8+eWrhwoSTJ09NTM2bM0Ny5cxkOHcBt2Ww2derUST///LNCQkIkSadOnVKjRo109OhRi6vLen766Se1bNnSHMGubt262rlzp5o0aWJxZQDuJ5vNpoiICP3yyy+qVKmSpOQRPxs3bsxIIjdJOW0uV6ADgOsgv10XDSIA4MaGDRtmngD18/PT6tWr1blzZ4urApBRbDabXnnlFc2ePds8EfrOO+9o5syZFleWtYwcOdI8Aerj46OVK1eqe/fu1hYFIMPYbDY9//zzWrBggTlU/wcffKBp06ZZXFnW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depUhYWF6fXXX1dAQIB+/fVXrVy5Us8884wk6Y8//lBYWJhu3Lih/v3764EHHtCyZcvUv39/HTlyROPHjze3t3jxYnXo0EEhISEaM2aM4uPjnb5Lp0SmApnjXvMzPRl3p69nKbnZOK2R8tJqKNmyZYsaNmyowMBARUZGKleuXFqwYIE6duyoM2fOaMCAAZKkefPmaeDAgSpUqJCGDRsmSQoICEi1fbKULM2uuALddSxbtkw+Pj7pPmn/999/a+7cuYqIiNAzzzyj69eva+nSpXrqqad048YN9ejRQ5LMZugff/zRKccLFChg3k5KSjJzMjExUceOHdOYMWPk7e2dqp6JEycqMjJSVatW1dixY3Xp0iVNnz5ddevWVVRUlGrUqGGuGxERoRUrVqht27YaMmSIDhw4oGnTpikqKko///yzOUpG37599dlnn6lPnz6qXLmyLl++rD179uiHH35Qv379VK9ePQ0dOlRvvfWWevfurf/+97+SpMqVK0tKft8rXrz4PY16HxUVpZ9++kkdOnRQsWLFdObMGX3yySd65JFH9Msvv5iNOfv27dOjjz6qkJAQvfLKK8qdO7eOHz+uNWvW6NixY3rwwQd19uxZNWrUSLlz59agQYNUsGBBnTp1Shs3btS+ffv08MMPp1nDvHnztHTpUi1btsx8D0ir4cVh69ataty4sYoWLarIyEjlyZNHGzZs0AsvvKA//vhDH374odP6x48fV7NmzdS5c2d17tyZc1lZHPntRgy4jKCgIEOSERQUlKW3mVE2bNhgSDImTpxo/PPPP8bp06eNrVu3Gk2aNDEkGZMmTXJa//Lly6m2ceDAAcPb29sYO3asuWzNmjWGJGPlypWGYRjG+fPnDQ8PD6Njx46Gl5eXERsbaxiGYSxZssSQZPzwww+3rXPatGlmnSlFRkYakoxu3bqZy5KSkowrV66k2kb37t2NgIAAIz4+3lw2bNgwQ5Jx9OjRVOunta9RUVGGJOOzzz67bb1ZRXb/+74fli5dakgyJBlvv/221eVkORs3bjS8vLwMSUZoaKjRv39/Y/78+cbp06ed1ps1a5YhydiwYYO5bPjw4YYko23btk7rhoeHGzabzahdu7aRkJBgLu/bt68hyThw4ECqbYSFhRnXr183l3/zzTeGJCMyMvK2NfTt29fIlSuXcfjwYacaVq5caUgypk+fnup3HTp0yLJ9cKx7s6NHjxqSjFmzZpnLPv7441T769CiRQvjwQcfNM6dO+e0fPLkyYYk49tvvzWX1a9f35BkjBw5MtV2kKxnz55mTuzevdvqcjLF119/be7zqFGjrC4nyyEbyUYYRr9+/cyc+Pnnn60uJ1OsW7fO3Odhw4ZZXY5LyZMnj1G5cuXbrnPu3DlDkvHEE0+Yy7p162ZIMp5++ulU69esWdPw9/c3jh07Zi67dOmSUaJEiVtmb8rvhY5t9+/f32m7gwYNMjw9PY2LFy+ay9L7PdkwjFTfXx3LbvUv5f46ci1nzpzGX3/9ZS4/deqU4e3tbbz44ovmsh9++MGQZERERBiJiYlOvy8pKcm8HRERYdhsNmPLli3mssTERKNFixaGzWYz9u3bZxiGYSQkJBhBQUFGsWLFnPb9xIkTht1uT/X8kamZIzo62vxbad++vdXlZJqqVasakgxPT0+rS7HcveZnejLuTl7Pju3+27+UatSoYfj5+TllyNWrV43Q0FAjZ86cxvnz583lQUFBRv369dPcT7KULHU4ffq0+f++TZs2VpeTaRzHySUZUVFRVpeD28ibN++/ZndK8fHxxo0bN5yWJSUlGQ0bNjTKli3rtLxz585pfj82jP/LiZv/BQYGGqtWrXJa99y5c4afn59RpUoV4+rVq+byI0eOGH5+fkZYWJi5zPE9vU+fPk7bWLRokSHJGDp0qLksMDDQ6Nu37233d+3atam+yxtG8mf5O31dp3XMI63P7v/8849RoEABo3fv3uay999/35BknDlz5pbbX758uSHJ2L59+23rcLw/ppTWd5C01k1KSjIqVqxoVK1a1bh27ZrTus8//7zT+4xhGEbx4sUNScacOXNuWxOyjk6dOpmvx5THxuB6mGIGLmfIkCEqUKCAChUqpLCwMP3vf//TiBEj1L9/f6f1cubMad6Oi4vTuXPnlDdvXpUrV04//fST+Vjt2rWVI0cO80rQTZs2SZLeeOMNJSQkaPPmzZKSuzX9/Pycuk3TsmLFCgUEBOi5555zWv7iiy+mWtdms8nPz0+SlJCQoAsXLpidnHFxceke5texr4Zh6NKlSzp79qwqVqyowMBAp32Fe4mPj1ffvn21evVqXbt2zepysrx69eppy5Ytat++vY4cOaIpU6aoS5cuCgoK0sCBA9Mcwvtmffr0cbpfp04dGYahnj17Ol1xVKtWLUnJV+bcbMCAAU7DIDZv3lzly5fXypUrb/l7DcPQokWL9Oijjyp37tw6e/as+S8sLEz+/v5at27dv9Zv5T7cjZiYGH377bdq166dedWA41/Tpk0lKc39dly1hewpKSlJffr00ddff51q5C6kRjZauw93g2zE3erbt69WrlypK1euWF2KS7t06dJth4GWZD5+8eLFVI8NHDjQ6f7p06e1bds2Pfnkk05Tztjtdj377LN3VNvN34nr16+vxMREp6mx0vs9+XYaNWqktWvXpvrnGHo6pTZt2ujBBx807xcqVEghISFOOeqYJmHs2LHy8HA+TOW42jwxMVFff/21HnnkEYWFhZmPe3h46OWXX5ZhGPrqq68kJU//cOLECT377LNO/6+KFCmiTp06OW2fTMX9tmjRIk2cODHdU+VlJ/ean/+WcXf7ev7uu+/SzLSbr/g+ffq0tm/frieffNJpuhhfX18NGTJEV65c0dq1a//9ifj/yFKyNDtZsmSJxo8fr4MHD0piihlXkp7sTsnb21teXskTF1y/fl3nz5/XuXPn1LhxYx08eNAcQS898ufPb2bjmjVrNGfOHFWpUkXt2rXTN998Y663du1aXb16VUOGDHEafSI4OFgdO3bU1q1bdebMGUkyM+7VV191+l0REREqWbKkVqxYYS4LDAzU1q1bU00zmx6O/byT5y4tKT+7X7lyRefOnZMk1ahRw+mzu2PUkyVLligxMTHNbTnWWb58+X2bdu1mu3fv1p49e9S1a1fFxsY6vR80b95chmFo/fr1Tj+TJ08edenSJUPqwf3HFDPugylmXMiJEyec/ptdRUZGqnnz5rp27Zp++OEHTZgwQYmJiamGiDx58qSGDh2qlStX6sKFC06PpRwK0d/fX9WqVTMbRKKiolS5cmWVL19e5cqVU1RUlJo1a6aoqCjVqlVL3t7et63v6NGjKlGiRKrhzAsXLmy+Cac0f/58jR8/Xrt370715h0TE/Mvz0aygwcPaujQoVq7dq3i4uLuahvuyHFi8OTJk04HW92FYRj6+++/NW3aNPn7+6tixYpWl5TlVatWTV988YWSkpJ06NAhff/99xo/frwmT56s/Pnz64033rjtzxcvXtzpvuM1nfJATcrlac2HHBISkmpZuXLltGrVqlv+3n/++Ufnz5/X4sWLtXjx4jTXcXzR+TdW7cPdOHjwoJKSkjRhwgRNmDAhzXVu3u+8efMqT54897UOd9WoUaM052x1dY5snDFjhnLmzKmHHnrI6pKyPLKRbMT/adGihVtmo5T8PXLatGny9fVVaGio1eW4rFy5cv3rge3bHRC+eTjmo0ePSko7QxzTS6VXyhOWkszXfcrMSu/35NspXLiwGjdufFc1OepKWdOhQ4fk7+9/26Gq//nnH12+fNkcRjslxzLHc3knzymZao1Vq1a55Xd0Sbp27ZrOnTunyMhIhYSEpHqdZWf3mp//lnF383qWpIYNG5onM1OaPXu2031HtqQnh9KDLCVLb7ZmzRq3zcZLly4pNjZWL7zwgsqWLevUsMwJxqwtV65cio2NTff6hmHogw8+0PTp03Xw4EEZhuH0eExMTLqbJnx8fFLlZKdOnVSlShU9++yzOnLkiHLkyJHufC5YsKCOHj2qgIAAFStWzGk9m82m8uXLOzUvTJw4UV27dlWJEiVUqVIlNWzYUO3atTOnkrkdxz7eyXOXlkuXLum1117T4sWLderUKafHgoODzdsdO3bUvHnz1LdvXw0dOlT16tVT8+bN1bFjR+XNm1dScmNlly5dNHbsWE2cOFG1a9dWs2bN9OSTTyooKOie6nRwXPA8ePBgDR48OM11bn4/CA4OTtXYiKzLMcVMQEBAqinx4FpoEIHLKV++vPnBoFWrVgoMDNSrr76qsLAwtWjRQlLy1cNNmzbV4cOHFRkZqf/85z+y2+3y8PDQ4MGDlZSU5LTNBg0a6J133tHFixe1ceNGNWjQwFweFRWlc+fOac+ePWrfvv193ZcvvvhCXbt2VZ06dTRt2jQFBQXJ29tbO3bs0Msvv5yqzrRcunRJ9erV040bNzR06FBVqFBBAQEBstls6tixY7q24a4cH8CSkpLcurHKx8dHPXv2VJ48ebR9+3ary3EJHh4eKleunMqVK6eIiAiVKlVKc+bM+deToGnNS3y75Td/Cbpbju2Eh4erX79+aa6TVgNaWjJrH25u2nO4VRf77X53nz599MQTT6S5zs0HEhyjMuHfpffEuavy9vbWM888o4IFC2rbtm1Wl+MSyMb0Lycb3Vd2ycagoCBt3brV6nJcUsWKFbV9+3ZdvXr1lq+tnTt3SpIqVaqU6rGMfD3+W2bd6ffkzKjJamSqNa5everW39FtNpuaNm2q1q1ba/r06Tp9+rTVJWUJ95qf/5Ynd/N6dhVkafZw7do1t85GKfmkef/+/c1GIrvdroCAAIurwu1UqFBBP/30k65du+Y0OsetvPvuu3r55ZfVsmVLDR06VIUKFVKOHDn0zTffaOLEiff8edPLy0uNGjXSBx98oEOHDqXZFHK/hIeH6+jRo1q1apWioqK0ePFiTZo0Sc8++6ymT59+25+12+0qWrSodu3adU81dOzYUd9995369eunOnXqKE+ePPLw8NC4ceOcRpHy8fHR2rVrtWXLFn377bfauHGjBgwYoOHDh+v77783L56aN2+eXnjhBX399dfauHGjhg0bppEjR2rZsmXpblq8Hcf7wfDhw1W3bt0010nZ2CLxfuBqHCOIuOpnKvwfGkTg8iIjIzV9+nS9+OKLatasmTw8PLR79279/vvvGjFiRKqhGS9cuJDqyqj69etr3LhxWrlypX799VfzZxo0aKCZM2fq66+/lmEYZuPI7QQHB2vz5s2Kj493GkXk1KlTqUbzWLhwoXx9fbVu3TqnD1hHjhxJtd1bnVDYsGGDTp8+rdmzZ6tbt27m8qtXr2b7K1XsdrvOnz8vDw8Pt3zDMgxDPj4+evvtt9W+fXstW7bM6pJcUr58+VSqVCnt2bMnU37f/v379Z///Mdp2YEDB1J9OE6pQIECyp07t65evXpfPqzfq/Tsg+NKoAsXLjhdFXQn+VaqVCnZbDYZhpEl9tvdFCxY0C2vkr85G1MOO4r0IxvvHNnoHtw1GyUpR44ceuedd9S+fftUw/oi/R577DFt3rxZ8+fPV69evdJcZ+bMmZKSDyr/G0dGpDW96L59++6+0DTc6ffkzFKmTBl9++23Onz4sEqXLp3mOgUKFJC/v7/27t2b6jHH81SyZElJd/ackqnW8PPzM69mdTc+Pj4aMWKEunbtKkmaNWuWxRVlHfc7P2+W0a9nR7akJ4ekW3+Wyyhkqevz9fVVvnz5rC4jQyQkJChXrlwaO3as2rVrZ07v4Y7Ha91NeHi4Nm/erM8++0w9evT41/UXLlyo4OBgrVy50ikHv//++1Tr3m1OOqbCdVwcmjKfq1at6rSuI68c6wQHB+u7777TsWPHUo0isn//fqccl5JH2Ovevbu6d++uhIQEde7cWTNmzNBLL72kkiVL3nYfwsPDNWXKFH3//fdq2LDhHe9nTEyMVq9ere7du2vSpElOj6V1IY/NZlPt2rVVu3ZtSdKuXbtUrVo1vfvuu5o7d6653sMPP6yHH35Yr776qqKjo/Xwww9r1KhR9yW/He8/vr6+vB+4obi4OHO0N6YHc300iLiQoKAgnThx4r4N9+QufHx8FBkZqcGDB2vJkiWKiIgwO+tv7kidP3++/v77b5UpU8ZpeZ06deTl5aU333xTklSvXj1JyQ0iCQkJGjdunHx9fVWzZs1/radNmzb69ttvNW3aNKdhtN59991U63p6espmszldNXrt2jVNnjw51br+/v6Skg/cpRxa8lb7On78+Gw9eoj0f92nDzzwgI4fP25xNbDaunXr9Mgjj6S68ubIkSPat2/fHQ/hfbcmT56s9u3bmyefVq9erX379mnIkCG3/BkPDw916NBBH3/8sTZs2KBHHnnE6fHExERdvHgx0w6ypmcfHDn7/fffm1cQOYaZvFnKfEspf/78atKkiebOnatBgwal+n8UHx+v+Pj4e57PM7tav359mlfmIXshG+8fstE9fPPNN6kOKgIp9e7dW5MmTdLQoUNVo0YNPfzww06Pz5s3TwsXLlS7du1UpUqVf91eoUKFVKNGDS1cuFDDhw83h5aPjY3VjBkz7mvtd/o9ObNERERo8uTJGjZsmBYuXOg0xLRhGLLZbPL09FSrVq30xRdfaPv27apRo4ak5H155513ZLPZ1Lp1a0nJU6cVKVJEM2bM0IABA8w8/Pvvv/XZZ585/W4y1RqO/5fIXu53ft4so1/PhQoVUs2aNbVo0SK98cYb5hSF8fHxev/995UzZ06nk2H+/v6ZeuEWWer6mjZtqhUrVlhdRoaLjY01p0jnBGPW17t3b02ZMkUvvviiQkNDU10UkZSUpKlTp6pRo0aqUKGC0+dNx+1z587p008/TbXtlN950zvl1LVr1/Ttt9/Kx8fHHD2kSZMm8vPz0/vvv6+IiAjzot2//vpLixYtUq1atVSwYEFJyc2K06dP19tvv60pU6aY2128eLH++OMPvfLKK5KSjyfExsY6jUrq5eWlhx56SF988YWZ77f63i5JL730kubPn6+ePXtq/fr1qS6AuX79ukaNGqWXXnopzXx0nDu6+bP7Dz/8oK1btzpNiXvu3LlUDWbly5eXj4+PWdv58+eVJ08ep6aWYsWKKX/+/Pft/apKlSoKCQnR+++/r6efflqFChVyejw2NlY5cuRI12g0yHoco4dI5Lc7oEEEbqFXr14aPXq0xowZo/bt2yskJETlypXTO++8o2vXrqlUqVL6+eef9eWXX6bqApWS58uqWrWqtm3bptDQUPMDSeHChVWuXDnt379fDRo0cBoR5FaeeeYZzZgxQ5GRkdq3b59CQ0O1adMmbd68OdUVWeHh4fryyy/VuHFjde3aVbGxsZozZ06aw2pVq1ZNkvTKK6+oU6dO8vb2VsOGDVWnTh0VKFBAzz//vKKjo1WoUCFFRUVpy5Ytbtt1DtyNwYMHKyYmRo899pgqVaokLy8vHTx4UHPmzNH169c1ZsyYTKnj2rVreuSRR9ShQwf9/fffmjRpkgoXLqyhQ4fe9ufGjRunTZs2qWnTpuratauqVq2qxMREHT58WEuXLtWIESPUs2fPLLMPTZo0UcmSJdWzZ0/t27dPuXPn1pdffuk0z6yD40TcuHHjFBMTIz8/P9WsWVPBwcGaNm2a6tSpo2rVqqlHjx6qVKmSLl++rAMHDmjJkiX6/PPP6UgH7gHZmLn7QDYCri9Xrlxavny5mjdvrpo1a+qpp55S9erVdf36dX377bdatWqVateurU8++STd2xw/frwaNmyoWrVqqU+fPvLx8dGsWbOUJ08e/fnnn/et9jv9nnwrR48e1fz589N8rF27dnd8wLdu3brq06ePpk+frmPHjik8PFx2u127d+/WyZMnzZES33zzTa1Zs0aNGzfWgAEDVLhwYa1YsULr169XZGSkQkJCJCUfTB8/fryefPJJhYWFqUePHrp+/bqmT5+u0qVLm1NYOJCpQObIiPy8WUa/nidOnGjm9XPPPSe73a4FCxZox44dmjRpktMJzmrVqumzzz7TyJEjVbZsWQUEBJjNFxJZiuyLE4yuxW6366uvvjKzu3379qpdu7b8/Px09OhRffnllzpw4IB+//13ScnnO15//XW1atVK4eHhOnPmjD766CMFBQWlmnKtWrVqmjFjhvr376/mzZvLy8tLrVu3Npsurly5YuakYRg6efKk5s+fryNHjmjEiBGy2+2SpLx58+rNN99UZGSk6tatq86dOys2NlYffvihDMPQ+++/b/7OZs2a6bHHHtPUqVN16tQpNWzYUAcPHtSHH36okiVL6qWXXpKU3MhQpEgRhYeHKzQ0VPny5dP+/fs1depUVaxYUaGhoZKSp0/z8/PTtGnTFBAQILvdrkqVKqlSpUoqVqyYli5dqrZt26pSpUrq1KmTqlatKi8vL+3fv19ffPGFTp48qZdffvmWz33Dhg01f/58BQQEKDQ0VPv27dPMmTNVsWJFcwQVSRo9erTWrVunVq1aKTg4WPHx8Vq0aJGuXLmiLl26SJLmzp2rDz74QG3btlXp0qVls9n01Vdf6fDhw3rrrbfu8S8lmYeHh+bMmaPGjRurQoUKeuaZZ1SmTBlduHBBv//+u5YuXapdu3bdcqQrZG0p85sRoNyAAZcRFBRkSDKCgoKy9DYzyoYNGwxJxscff5zm48OHDzckGUuXLjUMwzAOHz5stG7d2siTJ48REBBgNG7c2Ni5c6dRv359o379+ql+/uWXXzYkGYMHD3Za/uyzzxqSjBEjRqS71jNnzhhdu3Y1cufObQQEBBjNmzc3Dh48aBQvXtzo1q2b07qTJk0yypQpY/j4+BglSpQwRo4caaxdu9aQZGzYsMFp3ddee80ICgoyPDw8nB7/5ZdfjEceecSw2+1GYGCg0bZtW+PIkSNp/r6sKrv/fd8PS5cuNSQZkoy3337b6nKynG+//dbo3bu3UbFiRSMwMNDw8vIyihQpYjzxxBPGjz/+aK43a9asVK8/R74cOnTIaZsff/xxmq/VlStXGpKMefPmpdrGzp07jd69exv58uUz/Pz8jGbNmhkHDhxw+vm0ajAMw4iJiTFeeeUVo2zZsoaPj48RGBhoVK5c2XjxxReNP//887b1ZvY+GIZh7N6926hfv77h4+NjFChQwBg4cKCxZ88eQ5Ixa9Ysp3WnTJlilCxZ0vD09Ez1+N9//23079/fKFGihJEjRw4jX758RrVq1Yzhw4cb//zzj7le/fr1s83r/W717NnTzIndu3dbXU6m+Prrr819HjVqlNXlZDlkI9kIw+jXr5+ZEz///LPV5WSKdevWmfs8bNgwq8txSadPnzZefPFFIyQkxPD19TUCAgKMGjVqGJMmTTLi4+NTrd+tWzdDknHjxo00t7d+/XqjevXqho+Pj1GkSBHj1VdfNdasWXPL7D169Oi/btvxHTrlz9/J92RJqb5POv5ubvXv5MmThmEYxtGjR2/595XW70pKSjKmT59uVKlSxfD19TVy585tVK9e3fj000+d1jtw4IDRrl07I2/evIa3t7dRsWJFY/LkyUZSUlKq3/P5558bFStWNLy9vY3g4GBj/Pjxxqeffprq+TMMMjUzREdHm38n7du3t7qcTFO1alVDkuHp6Wl1KVnG/crPtDLOMNL/ev63XO7cubOR1qHz7du3G82aNTPsdrvh6+trVK1a1Vi4cGGq9aKjo43mzZsbdrvdkGQUL17cfIwsJUsdTp8+bf5/b9OmjdXlZArHa1eS8fzzz1tdDtLp/PnzxogRI4wqVaoYAQEBZib06NHD+Omnn8z1bty4YbzxxhtG8eLFDR8fHyMkJMSYPHmy+X0+ZW5cv37d6NOnj1GwYEHDZrM5PV6/fv1U2ejv72+EhYUZc+bMSbPGBQsWGFWrVjV8fHwMu91uNGvWLM3vd/Hx8caIESOMUqVKGTly5DAKFSpk9OjRw8xexzovv/yyUbVqVSNPnjyGj4+PUapUKWPIkCHGmTNnnLb3xRdfGBUqVDBy5MhhSDKGDx/u9PiJEyeMF154wShfvrzh5+dn+Pj4GOXKlTMGDBhg7N+/31wvrWMep0+fNrp06WIUKFDAyJkzp1GrVi1j3bp1Rrdu3ZzeV77//nujXbt2RrFixQwfHx8jf/78RoMGDYyvvvrKXGfnzp1G165djeDgYMPPz88IDAw0atasmer5dLw/ppTWd5BbrWsYhnHw4EGjW7duRpEiRcznuG7dusY777xjXLlyxVyvePHiRp06dVL9PLKmhQsXmq/H9957z+pycI9shmEY/9pFgiyhaNGi5hQz92u6jIzYJnA3+Pu+d8uWLdPjjz8uSXr77bfNjmdkDSNGjNDIkSN16NAhl+2Sdod9yO569eplXpG3e/fubDHFzDfffKOWLVtKkkaNGqXXX3/d4oqQkjvkijvsQ3bXv39/TZ06VZL0888/Z4spZtavX29exTts2LBMGy0IQPZ17Ngxcyj09u3bZ5spZqpVq6ZffvlFnp6eSkhIsLocAFnMmTNnzCkY2rRpky2mmFm4cKE6deokKXkUtcjISIsrAgCkx8SJE83MXrBggZnlcE0e/74KAAAAAAAAAAAAcPf+/vtv8zZTFACA60iZ30wR5vpoEAEAAAAAAAAAAECG4gQjALgm8tu90CACAAAAAAAAAACADHXy5EnzNicYAcB1pMxvRoByfTSIAACQCUaMGCHDMFS6dGmrS7lr7rAPALIWd8gVd9gHAAAAAMgMTDEDAK7Jkd8BAQGy2+0WV4N7RYMIAAAAAAAAAAAAMpTjCnS73a6AgACLqwEApJcjv2nucw80iAAAAAAAAAAAACBDOa5A5wQjALiOuLg4Xbp0SRLTg7kLGkQAAAAAAAAAAACQYWJjYxUXFyeJE4wA4Eoco4dI5Le7oEEEAAAAAAAAAAAAGYYTjADgmlLmNyNAuQcaRAAAAAAAAAAAAJBhHNPLSJxgBABXkjK/afBzDzSIAAAAAAAAAAAAIMMwgggAuCby2/3QIAIAAAAAAAAAAIAMwwgiAOCayG/3Q4MIAAAAAAAAAAAAMgxTFACAayK/3Q8NIgAAAAAAAAAAAMgwTFEAAK4pZX4zgoh7oEEEAAAAAAAAAAAAGYYpCgDANTnyOyAgQHa73eJqcD/QIAIAAAAAAAAAAIAM47gC3W63KyAgwOJqAADp5chvRn9yHzSIAAAAAAAAAAAAIMM4rkBn9BAAcB1xcXG6dOmSJPLbndAgAgAAAAAAAAAAgAwRGxuruLg4SVyBDgCuxDF6iER+uxMaRAAAAAAAAAAAAJAhOMEIAK4pZX4zgoj7oEEEAAAAAAAAAAAAGcIxvYzECUYAcCUp85sGP/dBgwgAAAAAAAAAAAAyBCOIAIBrIr/dEw0iAAAAAAAAAAAAyBCMIAIAron8dk80iAAAAAAAAAAAACBDcAU6ALgmpphxTzSIAAAAAAAAAAAAIENwghEAXFPKBj9GEHEfNIgAAAAAAAAAAAAgQzBFAQC4Jkd+BwQEyG63W1wN7hcaRADADRmGYXUJALKg7J4N2X3/AaQtu2dDdt9/AJkju2dNdt9/AGnLTtnguALdbrcrICDA4moAAOnlyG9Gf3IvNIgAgJvw8fExb1+7ds3CSgBkVSmzIWVmuDNvb2/zNtkIIC1kI9kIIOPFx8ebt1NmkLtzvK8kJSUpISHB4moAZDXZKRsdV6AzeggAuI64uDhdunRJEvntbmgQAQA3kTdvXvP2P//8Y2ElALKqs2fPmrdTZoY7y5cvn3k75f4DgAPZSDYCyHgpv6Nml6yV+J4O4PaySzbGxsYqLi5OElegA4ArcYweIpHf7oYGEQBwEw8++KB5+8iRIxZWAiCr+uOPPyRJOXPmdOuDTymlzEbH/gNASo5syJEjhwoVKmRxNZmjWLFi5m2yEUBmSJk1xYsXt7CSzMVnUQC3k12ykROMAOCaUuY3I4i4FxpEAMBNPPDAAwoMDJQk7dy5M1vNYwrg3126dMk8+FShQgXZbDaLK8oc+fLlU8GCBSVJu3btIhsBOLly5Yr2798vSQoJCZGnp6fFFWUOu91uNon89ttvSkxMtLgiAO5u586d5u0KFSpYWEnmSrmvu3btsq4QAFlSdslGx/QyEicYAcCVpMxvGvzcCw0iAOAmbDabatSoIUk6deqUDh06ZHFFALKSH374wWyOqFmzpsXVZC7H/p4/f16///67xdUAyEp+/PFHszkiu2ZjbGys08kJAMgImzZtMm9Xr17dwkoyV8r3lo0bN1pYCYCsKGU2Oo7puSNGEAEA10R+uy8aRADAjTRq1Mi8/dVXX1lYCYCsJmUmpMyK7IBsBHArZGMyshFARjp+/Lh++eUXSVJoaKjy589vcUWZp0qVKsqTJ48k6bvvvtO1a9csrghAVnH69Glt3bpVklS+fHm3PvHGCCIA4JrIb/dFgwgAuJHw8HDz9rx585hKAYAk6erVq1q8eLEkyc/PT02bNrW4osz12GOPmbfJRgAO169f16JFiyRJ3t7eat68ucUVZa42bdqY043Nnz9fSUlJFlcEwF3Nnz/fvN22bVsLK8l8np6eatOmjaTkEZtWrFhhcUUAsorPPvvM/Pzl7tnIFegA4JqYYsZ90SACAG6kbNmyCgsLk5Q8nzxD2AKQkg/KX7hwQZLUrl07+fv7W1xR5ipRooTq168vSTpw4IDWrFljcUUAsoJFixbpn3/+kZTcZJs7d26LK8pcRYoUUZMmTSRJR48e1apVqyyuCIA7unHjhj788ENJydOidunSxeKKMt9TTz1l3v7ggw9oVgaghIQETZkyxbzftWtXC6vJeJxgBADXlLLBjxFE3AsNIgDgZgYMGGDeHj58OAefgGwuPj5eY8eONe+nzIjsJOV+jxgxgmwEsrkbN25ozJgx5n2yURo5ciSjiAC47z799FMdO3ZMktSyZUuVLFnS4ooy3yOPPKKKFStKkrZs2aK1a9daXBEAq82fP19HjhyRJDVp0kQhISEWV5SxmKIAAFyTI78DAgJkt9strgb3Ew0iAOBmIiIiVKZMGUnSpk2btGTJEosrAmCl8ePH688//5QkPfroo6pevbq1BVkkPDzcPDC/detWLViwwOKKAFhp0qRJOnTokCSpQYMGqlu3rsUVWaNly5aqUqWKJGnHjh2aNWuWxRUBcCfnz5/X66+/bt5/7bXXLKzGOjabzWnfhwwZouvXr1tYEQArXbx4Ua+++qp5Pztko+MKdLvdroCAAIurAQCklyO/Gf3J/dAgAgBuxsvLS++88455v3///jp9+rSFFQGwyu7duzVq1ChJkoeHh1M2ZDeenp569913zfuDBg3SiRMnLKwIgFX2799vnrC02WxO2ZDd2Gw2vffee+b9559/XtHR0RZWBMBdGIahfv36mVN5RUREqGbNmhZXZZ2IiAjVqFFDkrR3716NHDnS4ooAWGXQoEHmCbfHHntM9erVs7iijOe4Ap3RQwDAdcTFxenSpUuSyG93RIMIALihxx57TI899pgk6cyZM+rYsaNu3LhhcVUAMlNMTIzatWun+Ph4SVJkZKQqV65scVXWat68uSIiIiQlX9HaoUMH8/kBkD1cunRJ7dq109WrVyUlN9JWq1bN4qqs1bBhQ3Pe+4sXL6p9+/bm8wMAd2vatGlatGiRJCkwMFATJ060uCJreXh4aMaMGfLy8pIkjRs3Tl9//bXFVQHIbDNnztScOXMkJY+m8cEHH1hcUcaLjY1VXFycJK5ABwBX4mhmlMhvd0SDCAC4IZvNpo8++sjs7IyKilKPHj2YVx7IJq5cuaLw8HAdPHhQkvTwww9r9OjRFleVNXz44YcqWrSoJOl///ufnnrqKSUmJlpcFYDMcO3aNT3xxBPas2ePJKlChQp66623LK4qa5g0aZJKlCghSdq+fbs6deqkhIQEa4sC4LJWrFihgQMHmvdnzJjBQWVJoaGhGjNmjKTkEVY6dOigbdu2WVwVgMyyevVq9enTx7w/depUFS9e3MKKMgcnGAHANZHf7o0GEQBwUwULFtSXX34pHx8fSdL8+fPVrVs35joG3NzFixfVsmVLbdy4UZKUP39+LVu2TL6+vhZXljXky5dPy5Ytk5+fnyTpiy++UOfOnRlJBHBzsbGxatOmjdatWydJypMnj5YvX66cOXNaXFnWEBgYqGXLlsnf31+StHz5ckVEROjatWsWVwbA1SxevFjt27c3G3BffPFFcwQ3JD8f7dq1kyRdvnxZTZs21Q8//GBxVQAy2vLly9W2bVuzAXfgwIHmCG7uzjG9jMQUBQDgSshv90aDCAC4sVq1amnRokXy9PSUlNwk0rRpU506dcriygBkhP3796t27dqKioqSlDxk7TfffKPg4GBrC8tiqlWrpsWLFytHjhySpM8//1yNGjXSiRMnLK4MQEY4dOiQ6tSpo7Vr10qS/P39tWrVKpUpU8biyrKW0NBQLVu2TN7e3pKkZcuWqX79+oqOjra4MgCuIDExUaNGjVJERIQ5vWmXLl0YqekmHh4emjdvnh555BFJyVOfNW7cWB9//LEMw7C4OgD3W1JSksaNG6fHH3/cvCghIiJCEyZMsLiyzMMV6ADgmshv90aDCAC4ufDwcC1ZssQcSWTjxo166KGHtHDhQg5AAW4iISFB77//vv7zn/9o7969kpJHyli3bp2qV69ucXVZU8uWLZ1GEvnf//6nypUra+7cuWQj4CYSExM1ZcoUValSRbt375aUPFLGd999p9q1a1tcXdbUpEkTrVy50hxJZPv27apcubI+/fRTpioEcEv79u1TgwYNNHz4cHPZ008/rdmzZ8vDg0OPN/P19dXKlSv16KOPSpKuX7+u3r176/HHH6dhGXAjBw8eVKNGjfTqq6+a3zG7dOmi+fPnmxdyZQdcgQ4Aron8dm98SwOAbCA8PFxRUVFmp+fZs2fVqVMn1a1bV2vXruVkKOCiEhIS9Pnnn6ty5coaMmSIrl69KkmqWLGitm7dqho1alhcYdbWsmVLbdq0ScWKFZMknT9/Xt26dVOtWrW0evVqshFwUYmJifryyy8VGhqqAQMG6PLly5KkkJAQbdmyRXXq1LG4wqytadOm2rx5s0qUKCEpeeqyZ555RjVq1NCqVatoFAFg+vPPP/Xcc8+pcuXK2rx5s6TkETLGjh2rmTNnZqsToHfK399fK1euVP/+/c1ly5cvV9myZfXqq6/qzJkzFlYH4F5ER0drwIABqlSpkjm6p81m08iRIzVnzhxzJMvsgivQAcA1pWwQIb/dDw0iAJBNhIWFadeuXXr88cfNZT/++KOaNm2qChUqaOzYsdq9ezcnRIEsLiEhQdu2bdMrr7yi4OBgdezYUfv27TMf79evn7Zv367SpUtbWKXrqFatmnbt2qUOHTqYy7Zt26YWLVooJCREo0eP1q+//soJUSCLS0xM1E8//aTXXntNJUuWVLt27fT777+bj/fu3Vs//fSTQkJCLKzSdYSGhmrnzp3q0qWLueyXX35R69atVbZsWY0cOVI7d+4kG4Fs6MyZM5o7d65atmypUqVKafr06UpISJAklSxZUlFRUXrllVdks9ksrjTry5EjhyZPnqwvv/xSBQoUkCRduXJF48aNU7FixdShQwd9+eWXiomJsbZQAP/qn3/+0YIFC9S6dWuVLFlSU6ZMMafbKl68uNatW6c33ngjW46qxAlGAHBNKRv8GEHE/dgMzgS6jKJFi+rEiRMKCgrS8ePHs+w2gbvB33fmWrVqlV566SWnk8oOefLkUWhoqIKDg1WgQAH5+PhwcA+wkGEYunr1qk6fPq0//vhDv/76q+Li4lKtV7t2bY0fP15hYWEWVOkevv32W7344otOJ5UdAgMDFRoaqpIlS5KNQBZgGIauXbtmZuOuXbvSzMaaNWtq/PjxjBpyD9atW6cXXnhBv/76a6rHcufOrYcfflilSpVSwYIFyUbADSUkJOjixYuKjo7Wnj179Mcff6RaJyAgQC+88IJefPFF5cyZ04IqXd/58+c1YsQITZ8+3Typ7GCz2RQSEqIKFSooKChIuXLlYnQWwGKJiYmKiYnRsWPHtGfPHh0+fDjVOjlz5lRkZKSGDh1qTt+XHTVo0EAbN26UJL300kvmNK8AgKxt2rRpOnPmjAICAhQbG2t1ObjPaBBxIY6T3R4eHvetW+vkyZNKSkq6r9sE7kZG/C06tkmDSNoSExO1dOlSTZkyRZs2bbK6HAB3wdPTUy1atNDAgQPVqFEjTsrdB0lJSVqxYoUmT56sDRs2WF0OgLvg4eGhZs2aaeDAgWratCnZeB8kJSVp1apVmjx5stavX8+IcwAkSQ8++KB69eql5557Tvny5bO6HLdw7NgxTZo0SbNnz9bZs2etLgfAXQgKClKvXr3Ut29fc3Sg7Kx8+fLav3+/1WUAAO5S2bJldeDAAavLwH1Gg4gL4cMUcHdCQkLSHCkD/+fPP//UihUrtH79em3fvl2nT5+2uiQAt/Dggw8qLCxMTZo0UZs2bVSwYEGrS3Jb0dHRZjZu27ZNp06dsrokALdQrFgx1axZ08zGwoULW12S2zp+/LhTNqYcNhyAe/Pz81NoaKjq1aunVq1aqXbt2tlyuoTMcOPGDX3//ff65ptvtHnzZu3evTvVyCIAsgZfX1+Fhobqv//9r1q1aqU6deowyk8KnTp10sKFC60uAwBwl4YMGaIJEyZYXQbuMxpEXMiSJUv0+uuv39ehfK5evarY2FjZ7XaGd4OlMupv0W63a/To0WrXrt1922Z2cP78eR07dkznz5/X9evXrS4HyPZ8fX2VL18+FS9eXHa73epysq0LFy4oOjqabASyCB8fHzMbc+XKZXU52VZMTIyio6N17tw5shFwQx4eHsqVK5ceeOABFS1alIYQiyQkJCg6OlqnT59WbGwsIzkBFnNkY+HChVW0aFEaQm4jPj5e27Zt09WrV60uBQBwhwIDA1WjRg1GZnVDNIgAAAAAAAAAAAAAAAC4Odr+AQAAAAAAAAAAAAAA3BwNIgAAAAAAAAAAAAAAAG6OBhEAAAAAAAAAAAAAAAA3R4MIAAAAAAAAAAAAAACAm6NBBAAAAAAAAAAAAAAAwM3RIAIAAAAAAAAAAAAAAODmaBABAAAAAAAAAAAAAABwczSIAAAAAAAAAAAAAAAAuDkaRAAAAAAAAAAAAAAAANwcDSIAAAAAAAAAAAAAAABujgYRAAAAAAAAAAAAAAAAN0eDCAAAAAAAAAAAAAAAgJv7f6bRksffqA8lAAAAAElFTkSuQmCC",
          "text/plain": "<Figure size 2200x600 with 1 Axes>"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "7bbc2e13b33d4da88b6f49e1b6f95e49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8a43642fd5ad47bc9b1bc4f033cc526c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_7bbc2e13b33d4da88b6f49e1b6f95e49",
       "placeholder": "​",
       "style": "IPY_MODEL_151e3ba02f8840ba96aadef3f4c767bd",
       "value": "Processing: 100%"
      }
     },
     "8d4c46ba23e241f0a078e58ada7284e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "916837e968c04837b0cc35766b5a30be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_502d35300357411f8d14722d92a8b529",
       "placeholder": "​",
       "style": "IPY_MODEL_41412c9808934b018fa2ea95e25e79f1",
       "value": " 69/69 [1:16:28&lt;00:00, 61.98s/it]"
      }
     },
     "ad39ab7958af455e801edd85c051c3ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ToggleButtonsModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ToggleButtonsModel",
       "_options_labels": [
        "Pipeline Plot",
        "Hyperparameters",
        "AUC",
        "Confusion Matrix",
        "Threshold",
        "Precision Recall",
        "Prediction Error",
        "Class Report",
        "Feature Selection",
        "Learning Curve",
        "Manifold Learning",
        "Calibration Curve",
        "Validation Curve",
        "Dimensions",
        "Feature Importance",
        "Feature Importance (All)",
        "Decision Boundary",
        "Lift Chart",
        "Gain Chart",
        "Decision Tree",
        "KS Statistic Plot"
       ],
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ToggleButtonsView",
       "button_style": "",
       "description": "Plot Type:",
       "description_tooltip": null,
       "disabled": false,
       "icons": [
        ""
       ],
       "index": 0,
       "layout": "IPY_MODEL_b2aa1559bacc4b868e90811751bf51b7",
       "style": "IPY_MODEL_50e53cab871a43c588c0a36ed814d7df",
       "tooltips": []
      }
     },
     "affa18605fbd4255a2ace4383d43fbed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b2aa1559bacc4b868e90811751bf51b7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0399e5799974439ade0a37535f87985": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8d4c46ba23e241f0a078e58ada7284e4",
       "placeholder": "​",
       "style": "IPY_MODEL_5aeb87c49c2c429da6eef2059287e3ea",
       "value": "Processing: 100%"
      }
     },
     "c1eba573e027459ea3245627ec1e1872": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c5a712ea6f294f189645555ab90073c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e1ef550f400d49fa8fae03148e3013ce",
       "max": 69.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_479b1fba5c2b4201a20dfbdbcee765b9",
       "value": 69.0
      }
     },
     "cf5c399e38894999be074e8a3c34c296": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d627980fd765474dae556de0e7b95aaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "de3cc7c22219425d954c9053a48a3686": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c0399e5799974439ade0a37535f87985",
        "IPY_MODEL_c5a712ea6f294f189645555ab90073c4",
        "IPY_MODEL_1def9b30550849f2b3fb2748bb5f3cca"
       ],
       "layout": "IPY_MODEL_4e786997c41e471d8c4671130d17ef12"
      }
     },
     "e1ef550f400d49fa8fae03148e3013ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5f84e13461f46dfa0a3f8b56663b35f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": "hidden",
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

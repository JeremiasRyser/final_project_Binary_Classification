{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install pycaret","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.simplefilter('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:46:58.390907Z","iopub.execute_input":"2024-07-13T14:46:58.391452Z","iopub.status.idle":"2024-07-13T14:46:58.435525Z","shell.execute_reply.started":"2024-07-13T14:46:58.391405Z","shell.execute_reply":"2024-07-13T14:46:58.434149Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:46:58.437751Z","iopub.execute_input":"2024-07-13T14:46:58.438124Z","iopub.status.idle":"2024-07-13T14:46:59.708296Z","shell.execute_reply.started":"2024-07-13T14:46:58.438093Z","shell.execute_reply":"2024-07-13T14:46:59.706918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/train.csv',index_col='id')\ndf_test_raw = pd.read_csv('/kaggle/input/playground-series-s4e7/test.csv',index_col='id')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:47:03.017873Z","iopub.execute_input":"2024-07-13T14:47:03.018435Z","iopub.status.idle":"2024-07-13T14:47:43.146245Z","shell.execute_reply.started":"2024-07-13T14:47:03.018399Z","shell.execute_reply":"2024-07-13T14:47:43.144973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train_pycaret = df_train_raw.copy()\ndf_train_pycaret = df_train_pycaret.sample(frac=0.1, random_state=42)\ndf_train_pycaret.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:47:43.148625Z","iopub.execute_input":"2024-07-13T14:47:43.149050Z","iopub.status.idle":"2024-07-13T14:47:45.222586Z","shell.execute_reply.started":"2024-07-13T14:47:43.149010Z","shell.execute_reply":"2024-07-13T14:47:45.221359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pycaret.classification import *\ns = setup(df_train_pycaret, target = 'Response', session_id = 123)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:49:37.283237Z","iopub.execute_input":"2024-07-13T14:49:37.283704Z","iopub.status.idle":"2024-07-13T14:50:00.658786Z","shell.execute_reply.started":"2024-07-13T14:49:37.283666Z","shell.execute_reply":"2024-07-13T14:50:00.657736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compare baseline models\nbest = compare_models()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T14:50:21.817107Z","iopub.execute_input":"2024-07-13T14:50:21.817642Z","iopub.status.idle":"2024-07-13T16:14:00.764817Z","shell.execute_reply.started":"2024-07-13T14:50:21.817600Z","shell.execute_reply":"2024-07-13T16:14:00.763411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pycaret.classification import ClassificationExperiment\nexp = ClassificationExperiment()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:14:39.667406Z","iopub.execute_input":"2024-07-13T16:14:39.667982Z","iopub.status.idle":"2024-07-13T16:14:39.674448Z","shell.execute_reply.started":"2024-07-13T16:14:39.667947Z","shell.execute_reply":"2024-07-13T16:14:39.673078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check the type of exp\ntype(exp)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:14:41.408065Z","iopub.execute_input":"2024-07-13T16:14:41.408619Z","iopub.status.idle":"2024-07-13T16:14:41.416921Z","shell.execute_reply.started":"2024-07-13T16:14:41.408578Z","shell.execute_reply":"2024-07-13T16:14:41.415608Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# init setup on exp\nexp.setup(df_train_pycaret, target = 'Response', session_id = 123)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:14:42.887020Z","iopub.execute_input":"2024-07-13T16:14:42.887452Z","iopub.status.idle":"2024-07-13T16:14:54.592845Z","shell.execute_reply.started":"2024-07-13T16:14:42.887413Z","shell.execute_reply":"2024-07-13T16:14:54.591478Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compare models using OOP\nexp.compare_models()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T16:14:56.055984Z","iopub.execute_input":"2024-07-13T16:14:56.056448Z","iopub.status.idle":"2024-07-13T17:41:02.173506Z","shell.execute_reply.started":"2024-07-13T16:14:56.056412Z","shell.execute_reply":"2024-07-13T17:41:02.172240Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Analyze Model","metadata":{}},{"cell_type":"code","source":"# plot confusion matrix\nplot_model(best, plot = 'confusion_matrix')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:41:43.422390Z","iopub.execute_input":"2024-07-13T17:41:43.422848Z","iopub.status.idle":"2024-07-13T17:41:47.214035Z","shell.execute_reply.started":"2024-07-13T17:41:43.422814Z","shell.execute_reply":"2024-07-13T17:41:47.212628Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot AUC\nplot_model(best, plot = 'auc')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:42:09.024574Z","iopub.execute_input":"2024-07-13T17:42:09.025108Z","iopub.status.idle":"2024-07-13T17:42:12.709210Z","shell.execute_reply.started":"2024-07-13T17:42:09.025071Z","shell.execute_reply":"2024-07-13T17:42:12.707598Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot feature importance\nplot_model(best, plot = 'feature')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:42:12.711746Z","iopub.execute_input":"2024-07-13T17:42:12.712285Z","iopub.status.idle":"2024-07-13T17:42:14.039607Z","shell.execute_reply.started":"2024-07-13T17:42:12.712236Z","shell.execute_reply":"2024-07-13T17:42:14.038069Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"evaluate_model(best)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:42:46.413401Z","iopub.execute_input":"2024-07-13T17:42:46.414052Z","iopub.status.idle":"2024-07-13T17:42:47.351355Z","shell.execute_reply.started":"2024-07-13T17:42:46.414012Z","shell.execute_reply":"2024-07-13T17:42:47.350085Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Prediction","metadata":{}},{"cell_type":"code","source":"# predict on test set\nholdout_pred = predict_model(best)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:42:55.397166Z","iopub.execute_input":"2024-07-13T17:42:55.397701Z","iopub.status.idle":"2024-07-13T17:42:58.490295Z","shell.execute_reply.started":"2024-07-13T17:42:55.397663Z","shell.execute_reply":"2024-07-13T17:42:58.489009Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# copy data and drop Class variable\n\ndf_train_pycaret_2 = df_train_pycaret.copy()\ndf_train_pycaret_2.drop('Response', axis=1, inplace=True)\ndf_train_pycaret_2.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:43:31.087230Z","iopub.execute_input":"2024-07-13T17:43:31.087728Z","iopub.status.idle":"2024-07-13T17:43:31.275879Z","shell.execute_reply.started":"2024-07-13T17:43:31.087689Z","shell.execute_reply":"2024-07-13T17:43:31.274445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# predict model on new_data\npredictions = predict_model(best, data = df_train_pycaret_2)\npredictions.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:43:36.012914Z","iopub.execute_input":"2024-07-13T17:43:36.013866Z","iopub.status.idle":"2024-07-13T17:43:45.927688Z","shell.execute_reply.started":"2024-07-13T17:43:36.013737Z","shell.execute_reply":"2024-07-13T17:43:45.926367Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Save Model","metadata":{}},{"cell_type":"code","source":"# save pipeline\nsave_model(best, 'my_first_pipeline')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:43:53.818194Z","iopub.execute_input":"2024-07-13T17:43:53.818699Z","iopub.status.idle":"2024-07-13T17:43:54.227977Z","shell.execute_reply.started":"2024-07-13T17:43:53.818653Z","shell.execute_reply":"2024-07-13T17:43:54.226617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# load pipeline\nloaded_best_pipeline = load_model('my_first_pipeline')\nloaded_best_pipeline","metadata":{"execution":{"iopub.status.busy":"2024-07-13T17:43:57.961465Z","iopub.execute_input":"2024-07-13T17:43:57.961977Z","iopub.status.idle":"2024-07-13T17:43:58.115095Z","shell.execute_reply.started":"2024-07-13T17:43:57.961941Z","shell.execute_reply":"2024-07-13T17:43:58.113740Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}